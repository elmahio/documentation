{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"elmah.io Installation Quick Start Welcome to the quick-start installation guide. Here you will find a quick introduction to installing elmah.io. For the full overview, read through the individual guides by clicking a technology below: ASP.NET Core Extensions.Logging ASP.NET ASP.NET MVC ASP.NET Web API Functions Serilog log4net NLog Blazor Umbraco JavaScript ASP.NET Core quick start Install the Elmah.Io.AspNetCore NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.AspNetCore Install-Package Elmah.Io.AspNetCore <PackageReference Include=\"Elmah.Io.AspNetCore\" Version=\"5.*\" /> paket add Elmah.Io.AspNetCore Once installed, call AddElmahIo and UseElmahIo in the Program.cs file: var builder = WebApplication.CreateBuilder(args); // ... builder.Services.AddElmahIo(options => // \ud83d\udc48 { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); // ... var app = builder.Build(); // ... app.UseElmahIo(); // \ud83d\udc48 // ... app.Run(); Make sure to insert your API key and log ID. For more information, check out the installation guides for ASP.NET Core and Microsoft.Extensions.Logging . ASP.NET / MVC / Web API quick start Install the Elmah.Io NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io Install-Package Elmah.Io <PackageReference Include=\"Elmah.Io\" Version=\"5.*\" /> paket add Elmah.Io During the installation, you will be asked for your API key and log ID. For more information, check out the installation guides for WebForms , MVC , and Web API . There is a short video tutorial available here: JavaScript quick start Install the elmah.io.javascript npm package: npm install elmah.io.javascript Reference the installed script and include your API key and log ID as part of the URL: <script src=\"~/node_modules/elmah.io.javascript/dist/elmahio.min.js?apiKey=YOUR-API-KEY&logId=YOUR-LOG-ID\" type=\"text/javascript\"></script> For more information, check out the installation guide for JavaScript .","title":"Quick start"},{"location":"#elmahio-installation-quick-start","text":"Welcome to the quick-start installation guide. Here you will find a quick introduction to installing elmah.io. For the full overview, read through the individual guides by clicking a technology below: ASP.NET Core Extensions.Logging ASP.NET ASP.NET MVC ASP.NET Web API Functions Serilog log4net NLog Blazor Umbraco JavaScript","title":"elmah.io Installation Quick Start"},{"location":"#aspnet-core-quick-start","text":"Install the Elmah.Io.AspNetCore NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.AspNetCore Install-Package Elmah.Io.AspNetCore <PackageReference Include=\"Elmah.Io.AspNetCore\" Version=\"5.*\" /> paket add Elmah.Io.AspNetCore Once installed, call AddElmahIo and UseElmahIo in the Program.cs file: var builder = WebApplication.CreateBuilder(args); // ... builder.Services.AddElmahIo(options => // \ud83d\udc48 { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); // ... var app = builder.Build(); // ... app.UseElmahIo(); // \ud83d\udc48 // ... app.Run(); Make sure to insert your API key and log ID. For more information, check out the installation guides for ASP.NET Core and Microsoft.Extensions.Logging .","title":"ASP.NET Core quick start"},{"location":"#aspnet-mvc-web-api-quick-start","text":"Install the Elmah.Io NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io Install-Package Elmah.Io <PackageReference Include=\"Elmah.Io\" Version=\"5.*\" /> paket add Elmah.Io During the installation, you will be asked for your API key and log ID. For more information, check out the installation guides for WebForms , MVC , and Web API . There is a short video tutorial available here:","title":"ASP.NET / MVC / Web API quick start"},{"location":"#javascript-quick-start","text":"Install the elmah.io.javascript npm package: npm install elmah.io.javascript Reference the installed script and include your API key and log ID as part of the URL: <script src=\"~/node_modules/elmah.io.javascript/dist/elmahio.min.js?apiKey=YOUR-API-KEY&logId=YOUR-LOG-ID\" type=\"text/javascript\"></script> For more information, check out the installation guide for JavaScript .","title":"JavaScript quick start"},{"location":"adding-version-information/","text":"Adding Version Information Adding Version Information Version Numbers on the UI Adding Version Numbers ASP.NET Core ASP.NET Microsoft.Extensions.Logging log4net NLog Serilog Almost every piece of software has some sort of version. Whether it's a nice-looking SemVer string or a simple timestamp, distinguishing one version from the other is important. elmah.io supports sending version information from your application in every message logged in two ways: By adding the version manually (as explained in this document). By using the Deployment Tracking feature (as explained in Set Up Deployment Tracking ). Version Numbers on the UI Let's start by looking at how version numbers are represented in the elmah.io UI. Every message contains a version property as illustrated below: The error is logged by an application with version number 1.0.0. This way, you will be able to see which version of your software logged each message. Having the version number on the message opens up some interesting search possibilities. Imagine that you want to search for every message logged by 1.0.* versions of your software, including release candidates, etc. Simply search in the search box like this: The example above finds every message logged from 1.0.0, 1.0.0-rc1, 1.0.1, etc. Adding Version Numbers How you choose to represent version numbers in your system is really up to you. elmah.io doesn't require SemVer, even though we strongly recommend you use it. Version is a simple string in our API , which means that you can send anything from SemVer to a stringified timestamp. Adding a version number to every message logged in elmah.io is as easy as 1-2-3. If you're using our API, there's a property named version where you can put the version of your application. Chances are that you are using one of the integrations for ASP.NET Core, log4net, or Serilog. There are multiple ways to send a version number to elmah.io. ASP.NET Core Adding version information to all errors logged from Elmah.Io.AspNetCore can be achieved using the OnMessage action when initializing logging to elmah.io: builder.Services.AddElmahIo(options => { // ... options.OnMessage = msg => { msg.Version = \"1.2.3\"; }; }); ASP.NET You probably want to attach the same version number on every message logged in elmah.io. The easiest way to achieve that is to create a global event handler for the OnMessage event, which is triggered every time the elmah.io client logs a message to elmah.io: Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client var logger = ErrorLog.Client; logger.OnMessage += (sender, args) => { args.Message.Version = \"1.2.3\"; } In the example, the message sent off to elmah.io is decorated with the version number 1.2.3 You will need to replace this with the value of an app setting, the assembly info, or whatever strategy you've used to make the version number available to your code. If you're logging errors to elmah.io in catch blocks, logging the version number can be done using a similar approach to the above: try { CallSomeBusinessLogic(inputValue); } catch (Exception e) { e.Data.Add(\"X-ELMAHIO-VERSION\", \"1.2.3\"); ErrorSignal.FromCurrentContext().Raise(e); } In this case, the code at this point doesn't know anything about elmah.io. Luckily, there's an alternative to the Version property, by putting a custom element in the Data dictionary on Exception. The exact name of the key must be X-ELMAHIO-VERSION for elmah.io to interpret this as the version number. Microsoft.Extensions.Logging When using the Elmah.Io.Extensions.Logging package there are multiple ways of enriching log messages with version information. If you want the same version number on all log messages you can use the OnMessage action: builder.Logging.AddElmahIo(options => { // ... options.OnMessage = msg => { msg.Version = \"1.2.3\"; }; }); As an alternative, you can push a version property on individual log messages using either a structured property: logger.LogInformation(\"Message from {version}\", \"1.2.3\"); Or using scopes: using (logger.BeginScope(new { Version = \"1.2.3\" })) { logger.LogInformation(\"A message inside a logging scope\"); } log4net log4net supports the concept of customer properties in various ways. Since log4net properties are converted to custom properties in elmah.io, the easiest way to add a version number of every message logged through log4net is by configuring a global property somewhere in your initialization code: log4net.GlobalContext.Properties[\"version\"] = \"1.2.3\"; log4net supports custom properties in the context of a log call as well. To do that, put the version property in the ThreadContext before logging to log4net: log4net.ThreadContext.Properties[\"version\"] = \"1.2.3\"; log4net.Error(\"This is an error message\"); NLog NLog supports structured properties as well as various context objects. To set a version number on all log messages you can include the following code after initializing NLog: GlobalDiagnosticsContext.Set(\"version\", \"1.2.3\"); If the elmah.io NLog target is initialized from C# code you can also use the OnMessage action: var elmahIoTarget = new ElmahIoTarget(); // ... elmahIoTarget.OnMessage = msg => { msg.Version = \"1.2.3\"; }; To set a version number on a single log message, you can include it as a property: log.Info(\"Message from {version}\", \"1.2.3\"); Serilog Serilog can decorate all log messages using enrichers: var logger = new LoggerConfiguration() .Enrich.WithProperty(\"version\", \"1.2.3\") .Enrich.FromLogContext() .WriteTo.ElmahIo(new ElmahIoSinkOptions(\"API_KEY\", new Guid(\"LOG_ID\"))) .CreateLogger(); You can also enrich a single log message with a version number using a structured property: Log.Information(\"Meesage from {version}\", \"1.2.3\"); Or using the LogContext : using (LogContext.PushProperty(\"version\", \"1.2.3\")) { Log.Error(\"An error message\"); }","title":"Adding version information"},{"location":"adding-version-information/#adding-version-information","text":"Adding Version Information Version Numbers on the UI Adding Version Numbers ASP.NET Core ASP.NET Microsoft.Extensions.Logging log4net NLog Serilog Almost every piece of software has some sort of version. Whether it's a nice-looking SemVer string or a simple timestamp, distinguishing one version from the other is important. elmah.io supports sending version information from your application in every message logged in two ways: By adding the version manually (as explained in this document). By using the Deployment Tracking feature (as explained in Set Up Deployment Tracking ).","title":"Adding Version Information"},{"location":"adding-version-information/#version-numbers-on-the-ui","text":"Let's start by looking at how version numbers are represented in the elmah.io UI. Every message contains a version property as illustrated below: The error is logged by an application with version number 1.0.0. This way, you will be able to see which version of your software logged each message. Having the version number on the message opens up some interesting search possibilities. Imagine that you want to search for every message logged by 1.0.* versions of your software, including release candidates, etc. Simply search in the search box like this: The example above finds every message logged from 1.0.0, 1.0.0-rc1, 1.0.1, etc.","title":"Version Numbers on the UI"},{"location":"adding-version-information/#adding-version-numbers","text":"How you choose to represent version numbers in your system is really up to you. elmah.io doesn't require SemVer, even though we strongly recommend you use it. Version is a simple string in our API , which means that you can send anything from SemVer to a stringified timestamp. Adding a version number to every message logged in elmah.io is as easy as 1-2-3. If you're using our API, there's a property named version where you can put the version of your application. Chances are that you are using one of the integrations for ASP.NET Core, log4net, or Serilog. There are multiple ways to send a version number to elmah.io.","title":"Adding Version Numbers"},{"location":"adding-version-information/#aspnet-core","text":"Adding version information to all errors logged from Elmah.Io.AspNetCore can be achieved using the OnMessage action when initializing logging to elmah.io: builder.Services.AddElmahIo(options => { // ... options.OnMessage = msg => { msg.Version = \"1.2.3\"; }; });","title":"ASP.NET Core"},{"location":"adding-version-information/#aspnet","text":"You probably want to attach the same version number on every message logged in elmah.io. The easiest way to achieve that is to create a global event handler for the OnMessage event, which is triggered every time the elmah.io client logs a message to elmah.io: Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client var logger = ErrorLog.Client; logger.OnMessage += (sender, args) => { args.Message.Version = \"1.2.3\"; } In the example, the message sent off to elmah.io is decorated with the version number 1.2.3 You will need to replace this with the value of an app setting, the assembly info, or whatever strategy you've used to make the version number available to your code. If you're logging errors to elmah.io in catch blocks, logging the version number can be done using a similar approach to the above: try { CallSomeBusinessLogic(inputValue); } catch (Exception e) { e.Data.Add(\"X-ELMAHIO-VERSION\", \"1.2.3\"); ErrorSignal.FromCurrentContext().Raise(e); } In this case, the code at this point doesn't know anything about elmah.io. Luckily, there's an alternative to the Version property, by putting a custom element in the Data dictionary on Exception. The exact name of the key must be X-ELMAHIO-VERSION for elmah.io to interpret this as the version number.","title":"ASP.NET"},{"location":"adding-version-information/#microsoftextensionslogging","text":"When using the Elmah.Io.Extensions.Logging package there are multiple ways of enriching log messages with version information. If you want the same version number on all log messages you can use the OnMessage action: builder.Logging.AddElmahIo(options => { // ... options.OnMessage = msg => { msg.Version = \"1.2.3\"; }; }); As an alternative, you can push a version property on individual log messages using either a structured property: logger.LogInformation(\"Message from {version}\", \"1.2.3\"); Or using scopes: using (logger.BeginScope(new { Version = \"1.2.3\" })) { logger.LogInformation(\"A message inside a logging scope\"); }","title":"Microsoft.Extensions.Logging"},{"location":"adding-version-information/#log4net","text":"log4net supports the concept of customer properties in various ways. Since log4net properties are converted to custom properties in elmah.io, the easiest way to add a version number of every message logged through log4net is by configuring a global property somewhere in your initialization code: log4net.GlobalContext.Properties[\"version\"] = \"1.2.3\"; log4net supports custom properties in the context of a log call as well. To do that, put the version property in the ThreadContext before logging to log4net: log4net.ThreadContext.Properties[\"version\"] = \"1.2.3\"; log4net.Error(\"This is an error message\");","title":"log4net"},{"location":"adding-version-information/#nlog","text":"NLog supports structured properties as well as various context objects. To set a version number on all log messages you can include the following code after initializing NLog: GlobalDiagnosticsContext.Set(\"version\", \"1.2.3\"); If the elmah.io NLog target is initialized from C# code you can also use the OnMessage action: var elmahIoTarget = new ElmahIoTarget(); // ... elmahIoTarget.OnMessage = msg => { msg.Version = \"1.2.3\"; }; To set a version number on a single log message, you can include it as a property: log.Info(\"Message from {version}\", \"1.2.3\");","title":"NLog"},{"location":"adding-version-information/#serilog","text":"Serilog can decorate all log messages using enrichers: var logger = new LoggerConfiguration() .Enrich.WithProperty(\"version\", \"1.2.3\") .Enrich.FromLogContext() .WriteTo.ElmahIo(new ElmahIoSinkOptions(\"API_KEY\", new Guid(\"LOG_ID\"))) .CreateLogger(); You can also enrich a single log message with a version number using a structured property: Log.Information(\"Meesage from {version}\", \"1.2.3\"); Or using the LogContext : using (LogContext.PushProperty(\"version\", \"1.2.3\")) { Log.Error(\"An error message\"); }","title":"Serilog"},{"location":"allowing-elmah-io-uptime-agents/","text":"Allowing elmah.io uptime agents elmah.io Uptime Monitoring runs in 9 different regions. Depending on which regions you enabled on each uptime check, your network infrastructure/firewall, or security settings, you may need to allow requests from elmah.io uptime agents. You can allow requests by allowing all requests with the following user-agent: User-Agent: elmahio-uptimebot/2.0 Allowing requests by possible inbound IP addresses is also an option. Since we run on Azure these changes over time, but here's a list by region as of time of writing this article: United States West 23.100.40.244,23.100.40.246,23.100.40.2,23.100.32.186,40.83.253.229,138.91.92.9,138.91.172.82,138.91.230.36,138.91.228.104,23.100.46.198,40.112.243.45,20.190.0.233,20.190.1.8,20.190.1.21,20.190.1.32,20.190.1.42,20.190.1.61,20.190.1.72,20.190.0.33,20.190.1.162,20.190.1.177,20.190.1.187,20.190.1.191,52.149.26.109,52.149.26.223,52.149.26.248,52.149.27.21,52.149.27.137,52.149.28.241,51.143.61.29,52.137.93.170,52.149.29.95,52.149.29.238,52.149.30.76,52.149.30.96,20.190.1.217,20.190.2.43,20.190.2.66,52.143.80.96,52.156.145.74,52.156.145.106 United States Central 13.86.38.119,13.89.106.62,40.89.243.166,52.143.244.58,52.154.168.87,52.154.169.9,52.154.169.57,52.154.169.86,52.154.169.106,52.154.169.204,52.154.170.25,52.154.170.83,52.154.170.158,52.154.171.81,52.154.171.88,52.154.173.21,40.89.244.137,52.154.173.79,52.154.173.101,52.154.173.180,52.154.174.243,52.154.175.58,52.154.240.147,52.154.240.170,52.154.241.97,52.154.241.132,52.154.241.246,52.154.43.251,52.154.44.21,52.154.44.95 United States East 13.92.137.62,13.92.138.72,13.92.137.49,13.92.143.167,13.68.182.254,13.82.23.172,13.82.23.182,13.82.18.16,13.82.18.62,13.92.139.214,40.71.11.179,52.247.85.151,52.247.85.207,52.247.85.217,52.247.85.218,52.247.85.228,52.247.85.242,52.247.74.244,52.247.75.195,52.247.76.11,52.247.76.21,52.247.76.72,52.247.76.155,52.247.85.252,52.247.86.14,52.247.86.22,52.167.77.53,52.177.247.146,52.184.204.69,20.49.97.1 United Kingdom South 51.140.180.76,51.140.191.115,51.140.176.159,51.140.176.11,51.140.185.39,51.140.177.87,51.140.185.119,51.140.188.39,51.140.188.241,51.140.183.68,51.140.184.173 United Kingdom West 51.140.210.96,51.140.252.30,51.140.251.198,51.141.123.138,51.140.248.129,51.140.252.164,51.140.248.213,52.142.164.59,51.140.248.195,51.140.250.153 Australia South East 191.239.187.197,191.239.187.149,191.239.184.74,191.239.188.25,52.189.210.149,52.189.209.158,52.189.215.220,52.189.208.40,40.127.95.32,40.115.76.80,40.115.76.83,40.115.76.93,40.115.76.94,40.115.76.101,40.115.76.109,40.115.76.129,40.115.76.143,191.239.188.11,13.77.50.103 Europe North 40.127.186.114,40.127.183.46,40.127.189.87,40.127.183.64,40.115.126.151,137.135.216.255,40.85.101.214,40.85.101.216,40.85.101.219,40.127.139.252,13.69.228.38 Europe West 20.71.75.100,20.71.75.133,20.71.75.198,20.71.75.237,20.71.76.1,20.71.76.23,20.71.76.57,20.71.76.171,20.71.76.196,20.71.77.10,20.71.77.83,20.71.77.134,20.71.77.205,20.71.78.20,20.71.78.208,20.71.78.243,20.71.79.77,20.71.79.165,20.71.79.228,20.73.232.14,20.73.232.51,20.73.232.121,20.73.232.130,20.73.232.163,20.73.232.186,20.73.232.217,20.73.232.241,20.73.132.133,20.73.132.167,20.73.133.173 Brazil South 191.232.176.16,191.232.180.88,191.232.177.130,191.232.180.187,191.232.179.236,191.232.177.40,191.232.180.122","title":"Allowing elmah.io uptime agents"},{"location":"allowing-elmah-io-uptime-agents/#allowing-elmahio-uptime-agents","text":"elmah.io Uptime Monitoring runs in 9 different regions. Depending on which regions you enabled on each uptime check, your network infrastructure/firewall, or security settings, you may need to allow requests from elmah.io uptime agents. You can allow requests by allowing all requests with the following user-agent: User-Agent: elmahio-uptimebot/2.0 Allowing requests by possible inbound IP addresses is also an option. Since we run on Azure these changes over time, but here's a list by region as of time of writing this article: United States West 23.100.40.244,23.100.40.246,23.100.40.2,23.100.32.186,40.83.253.229,138.91.92.9,138.91.172.82,138.91.230.36,138.91.228.104,23.100.46.198,40.112.243.45,20.190.0.233,20.190.1.8,20.190.1.21,20.190.1.32,20.190.1.42,20.190.1.61,20.190.1.72,20.190.0.33,20.190.1.162,20.190.1.177,20.190.1.187,20.190.1.191,52.149.26.109,52.149.26.223,52.149.26.248,52.149.27.21,52.149.27.137,52.149.28.241,51.143.61.29,52.137.93.170,52.149.29.95,52.149.29.238,52.149.30.76,52.149.30.96,20.190.1.217,20.190.2.43,20.190.2.66,52.143.80.96,52.156.145.74,52.156.145.106 United States Central 13.86.38.119,13.89.106.62,40.89.243.166,52.143.244.58,52.154.168.87,52.154.169.9,52.154.169.57,52.154.169.86,52.154.169.106,52.154.169.204,52.154.170.25,52.154.170.83,52.154.170.158,52.154.171.81,52.154.171.88,52.154.173.21,40.89.244.137,52.154.173.79,52.154.173.101,52.154.173.180,52.154.174.243,52.154.175.58,52.154.240.147,52.154.240.170,52.154.241.97,52.154.241.132,52.154.241.246,52.154.43.251,52.154.44.21,52.154.44.95 United States East 13.92.137.62,13.92.138.72,13.92.137.49,13.92.143.167,13.68.182.254,13.82.23.172,13.82.23.182,13.82.18.16,13.82.18.62,13.92.139.214,40.71.11.179,52.247.85.151,52.247.85.207,52.247.85.217,52.247.85.218,52.247.85.228,52.247.85.242,52.247.74.244,52.247.75.195,52.247.76.11,52.247.76.21,52.247.76.72,52.247.76.155,52.247.85.252,52.247.86.14,52.247.86.22,52.167.77.53,52.177.247.146,52.184.204.69,20.49.97.1 United Kingdom South 51.140.180.76,51.140.191.115,51.140.176.159,51.140.176.11,51.140.185.39,51.140.177.87,51.140.185.119,51.140.188.39,51.140.188.241,51.140.183.68,51.140.184.173 United Kingdom West 51.140.210.96,51.140.252.30,51.140.251.198,51.141.123.138,51.140.248.129,51.140.252.164,51.140.248.213,52.142.164.59,51.140.248.195,51.140.250.153 Australia South East 191.239.187.197,191.239.187.149,191.239.184.74,191.239.188.25,52.189.210.149,52.189.209.158,52.189.215.220,52.189.208.40,40.127.95.32,40.115.76.80,40.115.76.83,40.115.76.93,40.115.76.94,40.115.76.101,40.115.76.109,40.115.76.129,40.115.76.143,191.239.188.11,13.77.50.103 Europe North 40.127.186.114,40.127.183.46,40.127.189.87,40.127.183.64,40.115.126.151,137.135.216.255,40.85.101.214,40.85.101.216,40.85.101.219,40.127.139.252,13.69.228.38 Europe West 20.71.75.100,20.71.75.133,20.71.75.198,20.71.75.237,20.71.76.1,20.71.76.23,20.71.76.57,20.71.76.171,20.71.76.196,20.71.77.10,20.71.77.83,20.71.77.134,20.71.77.205,20.71.78.20,20.71.78.208,20.71.78.243,20.71.79.77,20.71.79.165,20.71.79.228,20.73.232.14,20.73.232.51,20.73.232.121,20.73.232.130,20.73.232.163,20.73.232.186,20.73.232.217,20.73.232.241,20.73.132.133,20.73.132.167,20.73.133.173 Brazil South 191.232.176.16,191.232.180.88,191.232.177.130,191.232.180.187,191.232.179.236,191.232.177.40,191.232.180.122","title":"Allowing elmah.io uptime agents"},{"location":"asp-net-core-troubleshooting/","text":"ASP.NET Core Troubleshooting So, your ASP.NET Core application doesn't log errors to elmah.io? Here is a list of things to try out: Run the diagnose command with the elmah.io CLI as shown here: Diagnose potential problems with an elmah.io installation . Make sure to reference the most recent version of the Elmah.Io.AspNetCore NuGet package. Make sure that the Elmah.Io.Client NuGet package is installed and that the major version matches that of Elmah.Io.AspNetCore . Make sure that you are calling both the AddElmahIo - and UseElmahIo -methods in the Program.cs file (or Startup.cs for older applications), as described on Logging to elmah.io from ASP.NET Core . Make sure that you call the UseElmahIo -method after invoking other Use* methods that in any way inspect exceptions (like UseDeveloperExceptionPage and UseExceptionHandler ). Make sure that you call the UseElmahIo -method before invoking UseMvc , UseEndpoints , and similar. Make sure that your server has an outgoing internet connection and that it can communicate with api.elmah.io on port 443 . The integration for ASP.NET Core supports setting up an HTTP proxy if your server doesn't allow outgoing traffic. Check out Logging through a proxy for details. Make sure that you didn't enable any Ignore filters or set up any Rules with an ignore action on the log in question. Make sure that you don't have any code catching all exceptions happening in your system and ignoring them (could be a logging filter, a piece of middleware, or similar). Make sure that you haven't reached the message limit included in your current plan. Your current usage can be viewed on the Subscription tab on organization settings. Tip Some of the bullets above have been implemented as Roslyn analyzers. Check out Roslyn analyzers for elmah.io and ASP.NET Core for details. Common problems and how to fix them Here you will a list of common exceptions and how to solve them. InvalidOperationException Exception [InvalidOperationException: Unable to resolve service for type 'Elmah.Io.AspNetCore.IBackgroundTaskQueue' while attempting to activate 'Elmah.Io.AspNetCore.ElmahIoMiddleware'.] Microsoft.Extensions.Internal.ActivatorUtilities+ConstructorMatcher.CreateInstance(IServiceProvider provider) Microsoft.AspNetCore.Builder.UseMiddlewareExtensions+<>c__DisplayClass4_0.<UseMiddleware>b__0(RequestDelegate next) Microsoft.AspNetCore.Builder.Internal.ApplicationBuilder.Build() Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication() Solution You forgot to call the AddElmahIo -method in the Program.cs file: builder.Services.AddElmahIo(o => { // ... }); ArgumentException Exception [ArgumentException: Input an API key Parameter name: apiKey] Elmah.Io.AspNetCore.Extensions.StringExtensions.AssertApiKey(string apiKey) Elmah.Io.AspNetCore.ElmahIoMiddleware..ctor(RequestDelegate next, IBackgroundTaskQueue queue, IOptions<ElmahIoOptions> options) Microsoft.Extensions.Internal.ActivatorUtilities+ConstructorMatcher.CreateInstance(IServiceProvider provider) Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters) Microsoft.AspNetCore.Builder.UseMiddlewareExtensions+<>c__DisplayClass4_0.<UseMiddleware>b__0(RequestDelegate next) Microsoft.AspNetCore.Builder.Internal.ApplicationBuilder.Build() Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication() Solution You forgot to call the AddElmahIo -method in the Program.cs file: builder.Services.AddElmahIo(o => { // ... }); or you called AddElmahIo without options and didn't provide these options elsewhere: builder.Services.AddElmahIo(); Even though you configure elmah.io through appsettings.json you still need to call AddElmahIo . In this case, you can register ElmahIoOptions manually and use the empty AddElmahIo overload: builder.Services.Configure<ElmahIoOptions>(Configuration.GetSection(\"ElmahIo\")); builder.Services.AddElmahIo(); An error occurred while starting the application If you see the error An error occurred while starting the application and the exception isn't logged to elmah.io, the error probably happens before hitting the elmah.io middleware. To help find out what is going on, add the following lines to your Program.cs file: builder.WebHost.UseSetting(WebHostDefaults.DetailedErrorsKey, \"true\"); builder.WebHost.CaptureStartupErrors(true); URL missing when using Map When handling requests with the Map method, ASP.NET Core will remove the path from HttpRequest.Path . In this case, Elmah.Io.AspNetCore will look for an URL in the HttpRequest.PathBase property. This is not already enough and won't always return the right URL. Consider using the MapWhen method instead. Thread pool thread or asynchronous tasks blocked on a synchronous call Azure and other systems with runtime diagnostics and validation may complain with the error Thread pool thread or asynchronous tasks blocked on a synchronous call in the Elmah.Io.AspNetCore package. This can be caused by our implementation of the package using a background worker for processing batches of messages. This background worker runs in a single thread and will never cause thread starvation as suggested by the error. We may want to move the internal implementation from BlockingCollection to Channel at some point.","title":"ASP.NET Core troubleshooting"},{"location":"asp-net-core-troubleshooting/#aspnet-core-troubleshooting","text":"So, your ASP.NET Core application doesn't log errors to elmah.io? Here is a list of things to try out: Run the diagnose command with the elmah.io CLI as shown here: Diagnose potential problems with an elmah.io installation . Make sure to reference the most recent version of the Elmah.Io.AspNetCore NuGet package. Make sure that the Elmah.Io.Client NuGet package is installed and that the major version matches that of Elmah.Io.AspNetCore . Make sure that you are calling both the AddElmahIo - and UseElmahIo -methods in the Program.cs file (or Startup.cs for older applications), as described on Logging to elmah.io from ASP.NET Core . Make sure that you call the UseElmahIo -method after invoking other Use* methods that in any way inspect exceptions (like UseDeveloperExceptionPage and UseExceptionHandler ). Make sure that you call the UseElmahIo -method before invoking UseMvc , UseEndpoints , and similar. Make sure that your server has an outgoing internet connection and that it can communicate with api.elmah.io on port 443 . The integration for ASP.NET Core supports setting up an HTTP proxy if your server doesn't allow outgoing traffic. Check out Logging through a proxy for details. Make sure that you didn't enable any Ignore filters or set up any Rules with an ignore action on the log in question. Make sure that you don't have any code catching all exceptions happening in your system and ignoring them (could be a logging filter, a piece of middleware, or similar). Make sure that you haven't reached the message limit included in your current plan. Your current usage can be viewed on the Subscription tab on organization settings. Tip Some of the bullets above have been implemented as Roslyn analyzers. Check out Roslyn analyzers for elmah.io and ASP.NET Core for details.","title":"ASP.NET Core Troubleshooting"},{"location":"asp-net-core-troubleshooting/#common-problems-and-how-to-fix-them","text":"Here you will a list of common exceptions and how to solve them.","title":"Common problems and how to fix them"},{"location":"asp-net-core-troubleshooting/#invalidoperationexception","text":"Exception [InvalidOperationException: Unable to resolve service for type 'Elmah.Io.AspNetCore.IBackgroundTaskQueue' while attempting to activate 'Elmah.Io.AspNetCore.ElmahIoMiddleware'.] Microsoft.Extensions.Internal.ActivatorUtilities+ConstructorMatcher.CreateInstance(IServiceProvider provider) Microsoft.AspNetCore.Builder.UseMiddlewareExtensions+<>c__DisplayClass4_0.<UseMiddleware>b__0(RequestDelegate next) Microsoft.AspNetCore.Builder.Internal.ApplicationBuilder.Build() Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication() Solution You forgot to call the AddElmahIo -method in the Program.cs file: builder.Services.AddElmahIo(o => { // ... });","title":"InvalidOperationException"},{"location":"asp-net-core-troubleshooting/#argumentexception","text":"Exception [ArgumentException: Input an API key Parameter name: apiKey] Elmah.Io.AspNetCore.Extensions.StringExtensions.AssertApiKey(string apiKey) Elmah.Io.AspNetCore.ElmahIoMiddleware..ctor(RequestDelegate next, IBackgroundTaskQueue queue, IOptions<ElmahIoOptions> options) Microsoft.Extensions.Internal.ActivatorUtilities+ConstructorMatcher.CreateInstance(IServiceProvider provider) Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters) Microsoft.AspNetCore.Builder.UseMiddlewareExtensions+<>c__DisplayClass4_0.<UseMiddleware>b__0(RequestDelegate next) Microsoft.AspNetCore.Builder.Internal.ApplicationBuilder.Build() Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication() Solution You forgot to call the AddElmahIo -method in the Program.cs file: builder.Services.AddElmahIo(o => { // ... }); or you called AddElmahIo without options and didn't provide these options elsewhere: builder.Services.AddElmahIo(); Even though you configure elmah.io through appsettings.json you still need to call AddElmahIo . In this case, you can register ElmahIoOptions manually and use the empty AddElmahIo overload: builder.Services.Configure<ElmahIoOptions>(Configuration.GetSection(\"ElmahIo\")); builder.Services.AddElmahIo();","title":"ArgumentException"},{"location":"asp-net-core-troubleshooting/#an-error-occurred-while-starting-the-application","text":"If you see the error An error occurred while starting the application and the exception isn't logged to elmah.io, the error probably happens before hitting the elmah.io middleware. To help find out what is going on, add the following lines to your Program.cs file: builder.WebHost.UseSetting(WebHostDefaults.DetailedErrorsKey, \"true\"); builder.WebHost.CaptureStartupErrors(true);","title":"An error occurred while starting the application"},{"location":"asp-net-core-troubleshooting/#url-missing-when-using-map","text":"When handling requests with the Map method, ASP.NET Core will remove the path from HttpRequest.Path . In this case, Elmah.Io.AspNetCore will look for an URL in the HttpRequest.PathBase property. This is not already enough and won't always return the right URL. Consider using the MapWhen method instead.","title":"URL missing when using Map"},{"location":"asp-net-core-troubleshooting/#thread-pool-thread-or-asynchronous-tasks-blocked-on-a-synchronous-call","text":"Azure and other systems with runtime diagnostics and validation may complain with the error Thread pool thread or asynchronous tasks blocked on a synchronous call in the Elmah.Io.AspNetCore package. This can be caused by our implementation of the package using a background worker for processing batches of messages. This background worker runs in a single thread and will never cause thread starvation as suggested by the error. We may want to move the internal implementation from BlockingCollection to Channel at some point.","title":"Thread pool thread or asynchronous tasks blocked on a synchronous call"},{"location":"asp-net-troubleshooting/","text":"ASP.NET Troubleshooting You are probably here because your application doesn't log errors to elmah.io, even though you installed the integration. Before contacting support, there are some things you can try out yourself. Run the diagnose command with the elmah.io CLI as shown here: Diagnose potential problems with an elmah.io installation . Make sure that you are referencing one of the following NuGet packages: Elmah.Io , Elmah.Io.AspNet , Elmah.Io.Mvc or Elmah.Io.WebApi . Make sure that the Elmah.Io.Client NuGet package is installed and that the major version matches that of Elmah.Io , Elmah.Io.AspNet , Elmah.Io.Mvc or Elmah.Io.WebApi . Make sure that your project reference the following assemblies: Elmah , Elmah.Io , and Elmah.Io.Client . Make sure that your web.config file contains valid config as described here . You can validate your web.config file using this Web.config Validator . When installing the Elmah.Io NuGet package, config is automatically added to your web.config file, as long as your Visual Studio allows for running PowerShell scripts as part of the installation. To check if you have the correct execution policy, go to the Package Manager Console and verify that the result of the following statement is RemoteSigned : Get-ExecutionPolicy Make sure that your server has an outgoing internet connection and that it can communicate with api.elmah.io on port 443 . Most of our integrations support setting up an HTTP proxy if your server doesn't allow outgoing traffic. Make sure that you didn't enable any Ignore filters or set up any Rules with an ignore action on the log in question. Make sure that you don't have any code catching all exceptions happening in your system and ignoring them (could be a logging filter or similar). If you are using custom errors, make sure to configure it correctly. For more details, check out the following posts: Web.config customErrors element with ASP.NET explained and Demystifying ASP.NET MVC 5 Error Pages and Error Logging . If you are running on a .NET version older than 4.6, make sure to configure your application to use TLS 1.2 as seen here: How to log to elmah.io from .NET 4.5 . Common errors and how to fix them Here you will a list of common errors/exceptions and how to solve them. TypeLoadException Exception [TypeLoadException: Inheritance security rules violated by type: 'System.Net.Http.WebRequestHandler'. Derived types must either match the security accessibility of the base type or be less accessible.] Microsoft.Rest.ServiceClient`1.CreateRootHandler() +0 Microsoft.Rest.ServiceClient`1..ctor(DelegatingHandler[] handlers) +59 Elmah.Io.Client.ElmahioAPI..ctor(DelegatingHandler[] handlers) +96 Elmah.Io.Client.ElmahioAPI..ctor(ServiceClientCredentials credentials, DelegatingHandler[] handlers) +70 Elmah.Io.Client.ElmahioAPI.Create(String apiKey, ElmahIoOptions options) +146 Elmah.Io.Client.ElmahioAPI.Create(String apiKey) +91 Elmah.Io.ErrorLog..ctor(IDictionary config) +109 Solution This is most likely caused by a problem with the System.Net.Http NuGet package. Make sure to upgrade to the newest version ( 4.3.4 as of writing this). The default template for creating a new web application installs version 4.3.0 which is seriously flawed. AmbiguousMatchException Exception [AmbiguousMatchException: Multiple custom attributes of the same type found.] System.Attribute.GetCustomAttribute(Assembly element, Type attributeType, Boolean inherit) +119 System.Reflection.CustomAttributeExtensions.GetCustomAttribute(Assembly element, Type attributeType) +16 Microsoft.Rest.ServiceClient`1.get_FrameworkVersion() +226 Microsoft.Rest.ServiceClient`1.SetDefaultAgentInfo() +93 Microsoft.Rest.ServiceClient`1.InitializeHttpClient(HttpClient httpClient, HttpClientHandler httpClientHandler, DelegatingHandler[] handlers) +386 Microsoft.Rest.ServiceClient`1..ctor(HttpClient serviceHttpClient, HttpClientHandler rootHandler, Boolean disposeHttpClient, DelegatingHandler[] delHandlers) +82 Microsoft.Rest.ServiceClient`1..ctor(HttpClientHandler rootHandler, DelegatingHandler[] handlers) +66 Elmah.Io.Client.ElmahioAPI..ctor(HttpClientHandler rootHandler, DelegatingHandler[] handlers) +104 Elmah.Io.Client.ElmahioAPI..ctor(ServiceClientCredentials credentials, HttpClientHandler rootHandler, DelegatingHandler[] handlers) +78 Elmah.Io.ErrorLog..ctor(IDictionary config) +225 [TargetInvocationException: Exception has been thrown by the target of an invocation.] System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor) +0 System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) +359 System.RuntimeType.CreateInstanceImpl(BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes, StackCrawlMark& stackMark) +1485 System.Activator.CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes) +298 System.Activator.CreateInstance(Type type, Object[] args) +34 Elmah.ErrorLog.GetDefaultImpl(HttpContext context) +178 Elmah.ServiceCenter.GetService(Object context, Type serviceType) +17 Elmah.ErrorLog.GetDefault(HttpContext context) +34 Elmah.ErrorPageBase.get_ErrorLog() +39 Elmah.ErrorLogPage.OnLoad(EventArgs e) +400 System.Web.UI.Control.LoadRecursive() +154 System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint) +4082 Solution This is most likely caused by some other software installed on the machine hosting your website. Applications like Microsoft Monitoring Agent (Application Insights) are known for creating problems for other software running on the same machine. Pause or stop any other monitoring service to see if the problem goes away. Exceptions aren't logged to elmah.io when adding the HandleError attribute Much like custom errors, the HandleError attribute can swallow exceptions from your website. This means that ASP.NET MVC catches any exceptions and shows the Error.cshtml view. To log exceptions with this setup, you will need to extend your Error.cshtml file: @model System.Web.Mvc.HandleErrorInfo @{ if (Model.Exception != null) { Elmah.ErrorLog.GetDefault(HttpContext.Current).Log(new Elmah.Error(Model.Exception, HttpContext.Current)); } } <div> Your error page content goes here </div> Errors are not logged when using update panels ASP.NET Update Panels are great at many things. Unfortunately, one of those things is causing problems when trying to log server-side errors. If errors aren't logged as part of a call made from an update panel, you can try to add the following code to Global.asax.cs : protected void Application_Error(object sender, EventArgs e) { var ex = Server.GetLastError(); var error = new Elmah.Error(ex); error.ServerVariables.Add(\"URL\", HttpContext.Current?.Request?.Url?.AbsolutePath); error.ServerVariables.Add(\"HTTP_USER_AGENT\", HttpContext.Current?.Request?.UserAgent); error.ServerVariables.Add(\"REMOTE_ADDR\", HttpContext.Current?.Request?.UserHostAddress); Elmah.ErrorLog.GetDefault(HttpContext.Current).Log(error); } If you start experiencing errors logged multiple times, you can remove the ELMAH module from web.config : <modules> <add name=\"ErrorLog\" type=\"Elmah.ErrorLogModule, Elmah\" preCondition=\"managedHandler\" /> </modules>","title":"ASP.NET troubleshooting"},{"location":"asp-net-troubleshooting/#aspnet-troubleshooting","text":"You are probably here because your application doesn't log errors to elmah.io, even though you installed the integration. Before contacting support, there are some things you can try out yourself. Run the diagnose command with the elmah.io CLI as shown here: Diagnose potential problems with an elmah.io installation . Make sure that you are referencing one of the following NuGet packages: Elmah.Io , Elmah.Io.AspNet , Elmah.Io.Mvc or Elmah.Io.WebApi . Make sure that the Elmah.Io.Client NuGet package is installed and that the major version matches that of Elmah.Io , Elmah.Io.AspNet , Elmah.Io.Mvc or Elmah.Io.WebApi . Make sure that your project reference the following assemblies: Elmah , Elmah.Io , and Elmah.Io.Client . Make sure that your web.config file contains valid config as described here . You can validate your web.config file using this Web.config Validator . When installing the Elmah.Io NuGet package, config is automatically added to your web.config file, as long as your Visual Studio allows for running PowerShell scripts as part of the installation. To check if you have the correct execution policy, go to the Package Manager Console and verify that the result of the following statement is RemoteSigned : Get-ExecutionPolicy Make sure that your server has an outgoing internet connection and that it can communicate with api.elmah.io on port 443 . Most of our integrations support setting up an HTTP proxy if your server doesn't allow outgoing traffic. Make sure that you didn't enable any Ignore filters or set up any Rules with an ignore action on the log in question. Make sure that you don't have any code catching all exceptions happening in your system and ignoring them (could be a logging filter or similar). If you are using custom errors, make sure to configure it correctly. For more details, check out the following posts: Web.config customErrors element with ASP.NET explained and Demystifying ASP.NET MVC 5 Error Pages and Error Logging . If you are running on a .NET version older than 4.6, make sure to configure your application to use TLS 1.2 as seen here: How to log to elmah.io from .NET 4.5 .","title":"ASP.NET Troubleshooting"},{"location":"asp-net-troubleshooting/#common-errors-and-how-to-fix-them","text":"Here you will a list of common errors/exceptions and how to solve them.","title":"Common errors and how to fix them"},{"location":"asp-net-troubleshooting/#typeloadexception","text":"Exception [TypeLoadException: Inheritance security rules violated by type: 'System.Net.Http.WebRequestHandler'. Derived types must either match the security accessibility of the base type or be less accessible.] Microsoft.Rest.ServiceClient`1.CreateRootHandler() +0 Microsoft.Rest.ServiceClient`1..ctor(DelegatingHandler[] handlers) +59 Elmah.Io.Client.ElmahioAPI..ctor(DelegatingHandler[] handlers) +96 Elmah.Io.Client.ElmahioAPI..ctor(ServiceClientCredentials credentials, DelegatingHandler[] handlers) +70 Elmah.Io.Client.ElmahioAPI.Create(String apiKey, ElmahIoOptions options) +146 Elmah.Io.Client.ElmahioAPI.Create(String apiKey) +91 Elmah.Io.ErrorLog..ctor(IDictionary config) +109 Solution This is most likely caused by a problem with the System.Net.Http NuGet package. Make sure to upgrade to the newest version ( 4.3.4 as of writing this). The default template for creating a new web application installs version 4.3.0 which is seriously flawed.","title":"TypeLoadException"},{"location":"asp-net-troubleshooting/#ambiguousmatchexception","text":"Exception [AmbiguousMatchException: Multiple custom attributes of the same type found.] System.Attribute.GetCustomAttribute(Assembly element, Type attributeType, Boolean inherit) +119 System.Reflection.CustomAttributeExtensions.GetCustomAttribute(Assembly element, Type attributeType) +16 Microsoft.Rest.ServiceClient`1.get_FrameworkVersion() +226 Microsoft.Rest.ServiceClient`1.SetDefaultAgentInfo() +93 Microsoft.Rest.ServiceClient`1.InitializeHttpClient(HttpClient httpClient, HttpClientHandler httpClientHandler, DelegatingHandler[] handlers) +386 Microsoft.Rest.ServiceClient`1..ctor(HttpClient serviceHttpClient, HttpClientHandler rootHandler, Boolean disposeHttpClient, DelegatingHandler[] delHandlers) +82 Microsoft.Rest.ServiceClient`1..ctor(HttpClientHandler rootHandler, DelegatingHandler[] handlers) +66 Elmah.Io.Client.ElmahioAPI..ctor(HttpClientHandler rootHandler, DelegatingHandler[] handlers) +104 Elmah.Io.Client.ElmahioAPI..ctor(ServiceClientCredentials credentials, HttpClientHandler rootHandler, DelegatingHandler[] handlers) +78 Elmah.Io.ErrorLog..ctor(IDictionary config) +225 [TargetInvocationException: Exception has been thrown by the target of an invocation.] System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor) +0 System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) +359 System.RuntimeType.CreateInstanceImpl(BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes, StackCrawlMark& stackMark) +1485 System.Activator.CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes) +298 System.Activator.CreateInstance(Type type, Object[] args) +34 Elmah.ErrorLog.GetDefaultImpl(HttpContext context) +178 Elmah.ServiceCenter.GetService(Object context, Type serviceType) +17 Elmah.ErrorLog.GetDefault(HttpContext context) +34 Elmah.ErrorPageBase.get_ErrorLog() +39 Elmah.ErrorLogPage.OnLoad(EventArgs e) +400 System.Web.UI.Control.LoadRecursive() +154 System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint) +4082 Solution This is most likely caused by some other software installed on the machine hosting your website. Applications like Microsoft Monitoring Agent (Application Insights) are known for creating problems for other software running on the same machine. Pause or stop any other monitoring service to see if the problem goes away.","title":"AmbiguousMatchException"},{"location":"asp-net-troubleshooting/#exceptions-arent-logged-to-elmahio-when-adding-the-handleerror-attribute","text":"Much like custom errors, the HandleError attribute can swallow exceptions from your website. This means that ASP.NET MVC catches any exceptions and shows the Error.cshtml view. To log exceptions with this setup, you will need to extend your Error.cshtml file: @model System.Web.Mvc.HandleErrorInfo @{ if (Model.Exception != null) { Elmah.ErrorLog.GetDefault(HttpContext.Current).Log(new Elmah.Error(Model.Exception, HttpContext.Current)); } } <div> Your error page content goes here </div>","title":"Exceptions aren't logged to elmah.io when adding the HandleError attribute"},{"location":"asp-net-troubleshooting/#errors-are-not-logged-when-using-update-panels","text":"ASP.NET Update Panels are great at many things. Unfortunately, one of those things is causing problems when trying to log server-side errors. If errors aren't logged as part of a call made from an update panel, you can try to add the following code to Global.asax.cs : protected void Application_Error(object sender, EventArgs e) { var ex = Server.GetLastError(); var error = new Elmah.Error(ex); error.ServerVariables.Add(\"URL\", HttpContext.Current?.Request?.Url?.AbsolutePath); error.ServerVariables.Add(\"HTTP_USER_AGENT\", HttpContext.Current?.Request?.UserAgent); error.ServerVariables.Add(\"REMOTE_ADDR\", HttpContext.Current?.Request?.UserHostAddress); Elmah.ErrorLog.GetDefault(HttpContext.Current).Log(error); } If you start experiencing errors logged multiple times, you can remove the ELMAH module from web.config : <modules> <add name=\"ErrorLog\" type=\"Elmah.ErrorLogModule, Elmah\" preCondition=\"managedHandler\" /> </modules>","title":"Errors are not logged when using update panels"},{"location":"authentication/","text":"Authentication All of our integrations communicate with the elmah.io API. To request endpoints on the API, each client will need to provide a valid API key. API keys are available on the Organization Settings view, as well as on the Install tab on the Log Settings screen. We wrote a guide to help you find your API key here: Where is my API key? . A default API key is created when you create your organization, but new keys can be added, keys revoked, and more. Sending the API key to the elmah.io API is typically handled by the Elmah.Io.Client NuGet package. All integrations have a dependency on this package, which means that it will be automatically installed through NuGet. How you provide your API key depends on the integration you are installing. Some integrations expect the API key in a config file, while others, accept the key in C#. For details about how to provide the API key for each integration, click the various installation guides in the left menu. Besides a unique string representing an API key, each key can have a set of permissions. By default, API keys only have the Write Messages permission, which means that the key cannot be used to read data from your logs. In 99% of all scenarios, you will browse through errors using the elmah.io UI, which will require you to sign in using a username and password or one of the supported social providers. In the case, you want to enable one of the native UIs provided by different integrations (like the /elmah.axd endpoint part of the ELMAH package) or you are building a third-party integration to elmah.io, you will need to assign additional permissions to your API key. For details about API key permissions, check out How to configure API key permissions .","title":"Authentication"},{"location":"authentication/#authentication","text":"All of our integrations communicate with the elmah.io API. To request endpoints on the API, each client will need to provide a valid API key. API keys are available on the Organization Settings view, as well as on the Install tab on the Log Settings screen. We wrote a guide to help you find your API key here: Where is my API key? . A default API key is created when you create your organization, but new keys can be added, keys revoked, and more. Sending the API key to the elmah.io API is typically handled by the Elmah.Io.Client NuGet package. All integrations have a dependency on this package, which means that it will be automatically installed through NuGet. How you provide your API key depends on the integration you are installing. Some integrations expect the API key in a config file, while others, accept the key in C#. For details about how to provide the API key for each integration, click the various installation guides in the left menu. Besides a unique string representing an API key, each key can have a set of permissions. By default, API keys only have the Write Messages permission, which means that the key cannot be used to read data from your logs. In 99% of all scenarios, you will browse through errors using the elmah.io UI, which will require you to sign in using a username and password or one of the supported social providers. In the case, you want to enable one of the native UIs provided by different integrations (like the /elmah.axd endpoint part of the ELMAH package) or you are building a third-party integration to elmah.io, you will need to assign additional permissions to your API key. For details about API key permissions, check out How to configure API key permissions .","title":"Authentication"},{"location":"bot-detection/","text":"Bot detection elmah.io can help you with classifying log messages generated by bots and crawlers. When storing a log message, we run a range of checks to try and identify if a log message is generated by an automated script or a real human visitor of your website/application. In this case, a flag named isBot is set to true on the message. In case we couldn't identify a log message as generated by a bot, the flag is set to false . Besides an automated check, you can also mark a log message as generated by a bot manually. This is done from within the elmah.io UI: The benefit of marking log messages with the isBot flag manually is that elmah.io will then automatically mark new instances of this log message with isBot=true (this feature is available for automatically bot-marked log messages as well). By doing so you get the possibilities listed later in this article. Log messages marked as generated by bots include a small robot icon on the search result: Search by or not by bots If you want to show all log messages generated by bots you can create a search query like this: isBot:true Or include a search filter for the Is Bot field: By reversing the filter, you see a list of log messages NOT generated by a bot, which can make it easier to get an overview of \"real\" errors. Hide or ignore log messages generated by bots By using the isBot field in Hide and Ignore filters, you can let elmah.io automatically hide or ignore future log messages generated by bots. Be aware that creating ignore filters based on the isBot field is only available for users on the Enterprise plan. To create a new filter, navigate to the Rules tab on log settings, and click the Add a new rule button. Input a query including the isBot field and select either the Hide or Ignore action: Mark log messages using rules It is possible to automatically mark log messages using rules. If you know that an IP range or a specific user agent is a bot, setting up a Mark as bot rule can be done from either log search or log settings:","title":"Bot detection"},{"location":"bot-detection/#bot-detection","text":"elmah.io can help you with classifying log messages generated by bots and crawlers. When storing a log message, we run a range of checks to try and identify if a log message is generated by an automated script or a real human visitor of your website/application. In this case, a flag named isBot is set to true on the message. In case we couldn't identify a log message as generated by a bot, the flag is set to false . Besides an automated check, you can also mark a log message as generated by a bot manually. This is done from within the elmah.io UI: The benefit of marking log messages with the isBot flag manually is that elmah.io will then automatically mark new instances of this log message with isBot=true (this feature is available for automatically bot-marked log messages as well). By doing so you get the possibilities listed later in this article. Log messages marked as generated by bots include a small robot icon on the search result:","title":"Bot detection"},{"location":"bot-detection/#search-by-or-not-by-bots","text":"If you want to show all log messages generated by bots you can create a search query like this: isBot:true Or include a search filter for the Is Bot field: By reversing the filter, you see a list of log messages NOT generated by a bot, which can make it easier to get an overview of \"real\" errors.","title":"Search by or not by bots"},{"location":"bot-detection/#hide-or-ignore-log-messages-generated-by-bots","text":"By using the isBot field in Hide and Ignore filters, you can let elmah.io automatically hide or ignore future log messages generated by bots. Be aware that creating ignore filters based on the isBot field is only available for users on the Enterprise plan. To create a new filter, navigate to the Rules tab on log settings, and click the Add a new rule button. Input a query including the isBot field and select either the Hide or Ignore action:","title":"Hide or ignore log messages generated by bots"},{"location":"bot-detection/#mark-log-messages-using-rules","text":"It is possible to automatically mark log messages using rules. If you know that an IP range or a specific user agent is a bot, setting up a Mark as bot rule can be done from either log search or log settings:","title":"Mark log messages using rules"},{"location":"cli-clear/","text":"Clearing log messages from the CLI The clear command is used to delete one or more messages from a log. Note Be aware that clearing a log does not reset the monthly counter towards log messages included in your current plan. The clear command is intended for cleanup in non-expired log messages you no longer need. Usage > elmahio clear --help Description: Delete one or more messages from a log Usage: elmahio clear [options] Options: --apiKey <apiKey> (REQUIRED) An API key with permission to execute the command --logId <logId> (REQUIRED) The log ID of the log to clear messages --query <query> (REQUIRED) Clear messages matching this query (use * for all messages) --from <from> Optional date and time to clear messages from --to <to> Optional date and time to clear messages to --proxyHost <proxyHost> A hostname or IP for a proxy to use to call elmah.io --proxyPort <proxyPort> A port number for a proxy to use to call elmah.io -?, -h, --help Show help and usage information Examples Simple: elmahio clear --apiKey API_KEY --logId LOG_ID --query \"statusCode:404\" Full: elmahio clear --apiKey API_KEY --logId LOG_ID --query \"statusCode:404\" --from 2022-05-17 --to 2022-05-18","title":"Clear"},{"location":"cli-clear/#clearing-log-messages-from-the-cli","text":"The clear command is used to delete one or more messages from a log. Note Be aware that clearing a log does not reset the monthly counter towards log messages included in your current plan. The clear command is intended for cleanup in non-expired log messages you no longer need.","title":"Clearing log messages from the CLI"},{"location":"cli-clear/#usage","text":"> elmahio clear --help Description: Delete one or more messages from a log Usage: elmahio clear [options] Options: --apiKey <apiKey> (REQUIRED) An API key with permission to execute the command --logId <logId> (REQUIRED) The log ID of the log to clear messages --query <query> (REQUIRED) Clear messages matching this query (use * for all messages) --from <from> Optional date and time to clear messages from --to <to> Optional date and time to clear messages to --proxyHost <proxyHost> A hostname or IP for a proxy to use to call elmah.io --proxyPort <proxyPort> A port number for a proxy to use to call elmah.io -?, -h, --help Show help and usage information","title":"Usage"},{"location":"cli-clear/#examples","text":"Simple: elmahio clear --apiKey API_KEY --logId LOG_ID --query \"statusCode:404\" Full: elmahio clear --apiKey API_KEY --logId LOG_ID --query \"statusCode:404\" --from 2022-05-17 --to 2022-05-18","title":"Examples"},{"location":"cli-dataloader/","text":"Dataloader loads data from the CLI The dataloader command loads 50 log messages into a specified log. Usage > elmahio dataloader --help Description: Load 50 log messages into the specified log Usage: elmahio dataloader [options] Options: --apiKey <apiKey> (REQUIRED) An API key with permission to execute the command --logId <logId> (REQUIRED) The log ID of the log to import messages into --proxyHost <proxyHost> A hostname or IP for a proxy to use to call elmah.io --proxyPort <proxyPort> A port number for a proxy to use to call elmah.io -?, -h, --help Show help and usage information Example elmahio dataloader --apiKey API_KEY --logId LOG_ID","title":"Dataloader"},{"location":"cli-dataloader/#dataloader-loads-data-from-the-cli","text":"The dataloader command loads 50 log messages into a specified log.","title":"Dataloader loads data from the CLI"},{"location":"cli-dataloader/#usage","text":"> elmahio dataloader --help Description: Load 50 log messages into the specified log Usage: elmahio dataloader [options] Options: --apiKey <apiKey> (REQUIRED) An API key with permission to execute the command --logId <logId> (REQUIRED) The log ID of the log to import messages into --proxyHost <proxyHost> A hostname or IP for a proxy to use to call elmah.io --proxyPort <proxyPort> A port number for a proxy to use to call elmah.io -?, -h, --help Show help and usage information","title":"Usage"},{"location":"cli-dataloader/#example","text":"elmahio dataloader --apiKey API_KEY --logId LOG_ID","title":"Example"},{"location":"cli-deployment/","text":"Create a deployment from the CLI The deployment command is used to create new deployments on elmah.io. Usage > elmahio deployment --help Description: Create a new deployment Usage: elmahio deployment [options] Options: --apiKey <apiKey> (REQUIRED) An API key with permission to execute the command --version <version> (REQUIRED) The version number of this deployment --created <created> When was this deployment created in UTC --description <description> Description of this deployment --userName <userName> The name of the person responsible for creating this deployment --userEmail <userEmail> The email of the person responsible for creating this deployment --logId <logId> The ID of a log if this deployment is specific to a single log --proxyHost <proxyHost> A hostname or IP for a proxy to use to call elmah.io --proxyPort <proxyPort> A port number for a proxy to use to call elmah.io -?, -h, --help Show help and usage information Examples Simple: elmahio deployment --apiKey API_KEY --version 1.0.0 Full: elmahio deployment --apiKey API_KEY --version 1.0.0 --created 2022-02-08 --description \"My new cool release\" --userName \"Thomas Ardal\" --userEmail \"thomas@elmah.io\" --logId LOG_ID","title":"Deployment"},{"location":"cli-deployment/#create-a-deployment-from-the-cli","text":"The deployment command is used to create new deployments on elmah.io.","title":"Create a deployment from the CLI"},{"location":"cli-deployment/#usage","text":"> elmahio deployment --help Description: Create a new deployment Usage: elmahio deployment [options] Options: --apiKey <apiKey> (REQUIRED) An API key with permission to execute the command --version <version> (REQUIRED) The version number of this deployment --created <created> When was this deployment created in UTC --description <description> Description of this deployment --userName <userName> The name of the person responsible for creating this deployment --userEmail <userEmail> The email of the person responsible for creating this deployment --logId <logId> The ID of a log if this deployment is specific to a single log --proxyHost <proxyHost> A hostname or IP for a proxy to use to call elmah.io --proxyPort <proxyPort> A port number for a proxy to use to call elmah.io -?, -h, --help Show help and usage information","title":"Usage"},{"location":"cli-deployment/#examples","text":"Simple: elmahio deployment --apiKey API_KEY --version 1.0.0 Full: elmahio deployment --apiKey API_KEY --version 1.0.0 --created 2022-02-08 --description \"My new cool release\" --userName \"Thomas Ardal\" --userEmail \"thomas@elmah.io\" --logId LOG_ID","title":"Examples"},{"location":"cli-diagnose/","text":"Diagnose potential problems with an elmah.io installation The diagnose command can be run in the root folder of an elmah.io installation to find potential problems with the configuration. Usage > elmahio diagnose --help Description: Diagnose potential problems with an elmah.io installation Usage: elmahio diagnose [options] Options: --directory <directory> The root directory to check [default: C:\\test] --verbose Output verbose diagnostics to help debug problems [default: False] -?, -h, --help Show help and usage information Examples Simple: elmahio diagnose --directory c:\\projects\\my-project Full: elmahio diagnose --directory c:\\projects\\my-project --verbose","title":"Diagnose"},{"location":"cli-diagnose/#diagnose-potential-problems-with-an-elmahio-installation","text":"The diagnose command can be run in the root folder of an elmah.io installation to find potential problems with the configuration.","title":"Diagnose potential problems with an elmah.io installation"},{"location":"cli-diagnose/#usage","text":"> elmahio diagnose --help Description: Diagnose potential problems with an elmah.io installation Usage: elmahio diagnose [options] Options: --directory <directory> The root directory to check [default: C:\\test] --verbose Output verbose diagnostics to help debug problems [default: False] -?, -h, --help Show help and usage information","title":"Usage"},{"location":"cli-diagnose/#examples","text":"Simple: elmahio diagnose --directory c:\\projects\\my-project Full: elmahio diagnose --directory c:\\projects\\my-project --verbose","title":"Examples"},{"location":"cli-export/","text":"Exporting log messages from the CLI The export command is used to export one or more log messages from a log to JSON. Usage > elmahio export --help Description: Export log messages from a specified log Usage: elmahio export [options] Options: --apiKey <apiKey> (REQUIRED) An API key with permission to execute the command --logId <logId> (REQUIRED) The ID of the log to export messages from --dateFrom <dateFrom> (REQUIRED) Defines the Date from which the logs start. Ex. \" --dateFrom 2025-03-06\" --dateTo <dateTo> (REQUIRED) Defines the Date from which the logs end. Ex. \" --dateTo 2025-03-13\" --filename <filename> Defines the path and filename of the file to export to. Ex. \" --filename C:\\myDirectory\\myFile.json\" or \" --filename myFile.csv\" --query <query> Defines the query that is passed to the API [default: *] --includeHeaders Include headers, cookies, etc. in output (will take longer to export) --format <Csv|Json> The format to export [default: Json] --proxyHost <proxyHost> A hostname or IP for a proxy to use to call elmah.io --proxyPort <proxyPort> A port number for a proxy to use to call elmah.io -?, -h, --help Show help and usage information Examples Simple JSON: elmahio export --apiKey API_KEY --logId LOG_ID --dateFrom 2020-08-21 --dateTo 2020-08-28 Simple CSV: elmahio export --apiKey API_KEY --logId LOG_ID --dateFrom 2020-08-21 --dateTo 2020-08-28 --format Csv Full: elmahio export --apiKey API_KEY --logId LOG_ID --dateFrom 2020-08-21 --dateTo 2020-08-28 --filename c:\\temp\\elmahio.json --query \"statusCode: 404\" --includeHeaders --format Json","title":"Export"},{"location":"cli-export/#exporting-log-messages-from-the-cli","text":"The export command is used to export one or more log messages from a log to JSON.","title":"Exporting log messages from the CLI"},{"location":"cli-export/#usage","text":"> elmahio export --help Description: Export log messages from a specified log Usage: elmahio export [options] Options: --apiKey <apiKey> (REQUIRED) An API key with permission to execute the command --logId <logId> (REQUIRED) The ID of the log to export messages from --dateFrom <dateFrom> (REQUIRED) Defines the Date from which the logs start. Ex. \" --dateFrom 2025-03-06\" --dateTo <dateTo> (REQUIRED) Defines the Date from which the logs end. Ex. \" --dateTo 2025-03-13\" --filename <filename> Defines the path and filename of the file to export to. Ex. \" --filename C:\\myDirectory\\myFile.json\" or \" --filename myFile.csv\" --query <query> Defines the query that is passed to the API [default: *] --includeHeaders Include headers, cookies, etc. in output (will take longer to export) --format <Csv|Json> The format to export [default: Json] --proxyHost <proxyHost> A hostname or IP for a proxy to use to call elmah.io --proxyPort <proxyPort> A port number for a proxy to use to call elmah.io -?, -h, --help Show help and usage information","title":"Usage"},{"location":"cli-export/#examples","text":"Simple JSON: elmahio export --apiKey API_KEY --logId LOG_ID --dateFrom 2020-08-21 --dateTo 2020-08-28 Simple CSV: elmahio export --apiKey API_KEY --logId LOG_ID --dateFrom 2020-08-21 --dateTo 2020-08-28 --format Csv Full: elmahio export --apiKey API_KEY --logId LOG_ID --dateFrom 2020-08-21 --dateTo 2020-08-28 --filename c:\\temp\\elmahio.json --query \"statusCode: 404\" --includeHeaders --format Json","title":"Examples"},{"location":"cli-import/","text":"Importing log messages from the CLI The import command is used to import log messages from IIS log files and W3C Extended log files to an elmah.io log. Usage > elmahio import --help Description: Import log messages to a specified log Usage: elmahio import [options] Options: --apiKey <apiKey> (REQUIRED) An API key with permission to execute the command --logId <logId> (REQUIRED) The ID of the log to import messages to --type <iis|w3c> (REQUIRED) The type of log file to import. Use 'w3c' for W3C Extended Log File Format and 'iis' for IIS Log File Format --filename <filename> (REQUIRED) Defines the path and filename of the file to import from. Ex. \" --filename C:\\myDirectory\\log.txt\" --dateFrom <dateFrom> Defines the Date from which the logs start. Ex. \" --dateFrom 2024-09-23\" --dateTo <dateTo> Defines the Date from which the logs end. Ex. \" --dateTo 2024-09-30\" --proxyHost <proxyHost> A hostname or IP for a proxy to use to call elmah.io --proxyPort <proxyPort> A port number for a proxy to use to call elmah.io -?, -h, --help Show help and usage information Examples IIS: elmahio import --apiKey API_KEY --logId LOG_ID --type iis --filename u_inetsv1.log --dateFrom 2023-03-13T10:14 --dateTo 2023-03-13T10:16 w3c: elmahio import --apiKey API_KEY --logId LOG_ID --type w3c --filename u_extend1.log --dateFrom 2023-03-13T10:14 --dateTo 2023-03-13T10:16","title":"Import"},{"location":"cli-import/#importing-log-messages-from-the-cli","text":"The import command is used to import log messages from IIS log files and W3C Extended log files to an elmah.io log.","title":"Importing log messages from the CLI"},{"location":"cli-import/#usage","text":"> elmahio import --help Description: Import log messages to a specified log Usage: elmahio import [options] Options: --apiKey <apiKey> (REQUIRED) An API key with permission to execute the command --logId <logId> (REQUIRED) The ID of the log to import messages to --type <iis|w3c> (REQUIRED) The type of log file to import. Use 'w3c' for W3C Extended Log File Format and 'iis' for IIS Log File Format --filename <filename> (REQUIRED) Defines the path and filename of the file to import from. Ex. \" --filename C:\\myDirectory\\log.txt\" --dateFrom <dateFrom> Defines the Date from which the logs start. Ex. \" --dateFrom 2024-09-23\" --dateTo <dateTo> Defines the Date from which the logs end. Ex. \" --dateTo 2024-09-30\" --proxyHost <proxyHost> A hostname or IP for a proxy to use to call elmah.io --proxyPort <proxyPort> A port number for a proxy to use to call elmah.io -?, -h, --help Show help and usage information","title":"Usage"},{"location":"cli-import/#examples","text":"IIS: elmahio import --apiKey API_KEY --logId LOG_ID --type iis --filename u_inetsv1.log --dateFrom 2023-03-13T10:14 --dateTo 2023-03-13T10:16 w3c: elmahio import --apiKey API_KEY --logId LOG_ID --type w3c --filename u_extend1.log --dateFrom 2023-03-13T10:14 --dateTo 2023-03-13T10:16","title":"Examples"},{"location":"cli-log/","text":"Log a message from the CLI The log command is used to store a log message in a specified log. Usage > elmahio log --help Description: Log a message to the specified log Usage: elmahio log [options] Options: --apiKey <apiKey> (REQUIRED) An API key with permission to execute the command --logId <logId> (REQUIRED) The ID of the log to send the log message to --application <application> Used to identify which application logged this message. You can use this if you have multiple applications and services logging to the same log --detail <detail> A longer description of the message. For errors this could be a stacktrace, but it's really up to you what to log in there. --hostname <hostname> The hostname of the server logging the message. --title <title> (REQUIRED) The textual title or headline of the message to log. --titleTemplate <titleTemplate> The title template of the message to log. This property can be used from logging frameworks that supports structured logging like: \"{user} says {quote}\". In the example, titleTemplate will be this string and title will be \"Gilfoyle says It's not magic. It's talent and sweat\". --source <source> The source of the code logging the message. This could be the assembly name. --statusCode <statusCode> If the message logged relates to a HTTP status code, you can put the code in this property. This would probably only be relevant for errors, but could be used for logging successful status codes as well. --dateTime <dateTime> The date and time in UTC of the message. If you don't provide us with a value in dateTime, we will set the current date and time in UTC. --type <type> The type of message. If logging an error, the type of the exception would go into type but you can put anything in there, that makes sense for your domain. --user <user> An identification of the user triggering this message. You can put the users email address or your user key into this property. --severity <severity> An enum value representing the severity of this message. The following values are allowed: Verbose, Debug, Information, Warning, Error, Fatal. --url <url> If message relates to a HTTP request, you may send the URL of that request. If you don't provide us with an URL, we will try to find a key named URL in serverVariables. --method <method> If message relates to a HTTP request, you may send the HTTP method of that request. If you don't provide us with a method, we will try to find a key named REQUEST_METHOD in serverVariables. --version <version> Versions can be used to distinguish messages from different versions of your software. The value of version can be a SemVer compliant string or any other syntax that you are using as your version numbering scheme. --correlationId <correlationId> CorrelationId can be used to group similar log messages together into a single discoverable batch. A correlation ID could be a session ID from ASP.NET Core, a unique string spanning multiple microsservices handling the same request, or similar. --category <category> The category to set on the message. Category can be used to emulate a logger name when created from a logging framework. --proxyHost <proxyHost> A hostname or IP for a proxy to use to call elmah.io --proxyPort <proxyPort> A port number for a proxy to use to call elmah.io -?, -h, --help Show help and usage information Examples Simple: elmahio log --apiKey API_KEY --logId LOG_ID --title \"An error happened\" Full: elmahio log --apiKey API_KEY --logId LOG_ID --title \"An error happened\" --application \"My app\" --details \"Some details\" --hostname \"localhost\" --titleTemplate \"An {severity} happened\" --source \"A source\" --statusCode 500 --dateTime 2022-01-13 --type \"The type\" --user \"A user\" --severity \"Error\" --url \"https://elmah.io\" --method \"GET\" --version \"1.0.0\"","title":"Log"},{"location":"cli-log/#log-a-message-from-the-cli","text":"The log command is used to store a log message in a specified log.","title":"Log a message from the CLI"},{"location":"cli-log/#usage","text":"> elmahio log --help Description: Log a message to the specified log Usage: elmahio log [options] Options: --apiKey <apiKey> (REQUIRED) An API key with permission to execute the command --logId <logId> (REQUIRED) The ID of the log to send the log message to --application <application> Used to identify which application logged this message. You can use this if you have multiple applications and services logging to the same log --detail <detail> A longer description of the message. For errors this could be a stacktrace, but it's really up to you what to log in there. --hostname <hostname> The hostname of the server logging the message. --title <title> (REQUIRED) The textual title or headline of the message to log. --titleTemplate <titleTemplate> The title template of the message to log. This property can be used from logging frameworks that supports structured logging like: \"{user} says {quote}\". In the example, titleTemplate will be this string and title will be \"Gilfoyle says It's not magic. It's talent and sweat\". --source <source> The source of the code logging the message. This could be the assembly name. --statusCode <statusCode> If the message logged relates to a HTTP status code, you can put the code in this property. This would probably only be relevant for errors, but could be used for logging successful status codes as well. --dateTime <dateTime> The date and time in UTC of the message. If you don't provide us with a value in dateTime, we will set the current date and time in UTC. --type <type> The type of message. If logging an error, the type of the exception would go into type but you can put anything in there, that makes sense for your domain. --user <user> An identification of the user triggering this message. You can put the users email address or your user key into this property. --severity <severity> An enum value representing the severity of this message. The following values are allowed: Verbose, Debug, Information, Warning, Error, Fatal. --url <url> If message relates to a HTTP request, you may send the URL of that request. If you don't provide us with an URL, we will try to find a key named URL in serverVariables. --method <method> If message relates to a HTTP request, you may send the HTTP method of that request. If you don't provide us with a method, we will try to find a key named REQUEST_METHOD in serverVariables. --version <version> Versions can be used to distinguish messages from different versions of your software. The value of version can be a SemVer compliant string or any other syntax that you are using as your version numbering scheme. --correlationId <correlationId> CorrelationId can be used to group similar log messages together into a single discoverable batch. A correlation ID could be a session ID from ASP.NET Core, a unique string spanning multiple microsservices handling the same request, or similar. --category <category> The category to set on the message. Category can be used to emulate a logger name when created from a logging framework. --proxyHost <proxyHost> A hostname or IP for a proxy to use to call elmah.io --proxyPort <proxyPort> A port number for a proxy to use to call elmah.io -?, -h, --help Show help and usage information","title":"Usage"},{"location":"cli-log/#examples","text":"Simple: elmahio log --apiKey API_KEY --logId LOG_ID --title \"An error happened\" Full: elmahio log --apiKey API_KEY --logId LOG_ID --title \"An error happened\" --application \"My app\" --details \"Some details\" --hostname \"localhost\" --titleTemplate \"An {severity} happened\" --source \"A source\" --statusCode 500 --dateTime 2022-01-13 --type \"The type\" --user \"A user\" --severity \"Error\" --url \"https://elmah.io\" --method \"GET\" --version \"1.0.0\"","title":"Examples"},{"location":"cli-overview/","text":"CLI overview The elmah.io CLI lets you execute common tasks against elmah.io. Installing the CLI Note The elmah.io CLI requires .NET 6 or newer installed. The elmah.io CLI can be installed in several ways. To set up everything automatically, execute the following script from the command line: dotnet tool install --global Elmah.Io.Cli or make sure to run on the latest version if you already have the CLI installed: dotnet tool update --global Elmah.Io.Cli If you prefer downloading the CLI as a zip you can download the latest version from GitHub . To clone and build the CLI manually, check out the instructions below. Run the CLI Clear Dataloader Deployment Diagnose Export Import Log Sourcemap Tail Run the CLI to get help: elmahio --help Help similar to this is outputted to the console: elmahio: CLI for executing various actions against elmah.io Usage: elmahio [options] [command] Options: --nologo Doesn't display the startup banner or the copyright message --version Show version information -?, -h, --help Show help and usage information Commands: clear Delete one or more messages from a log dataloader Load 50 log messages into the specified log deployment Create a new deployment diagnose Diagnose potential problems with an elmah.io installation export Export log messages from a specified log import Import log messages to a specified log log Log a message to the specified log sourcemap Upload a source map and minified JavaScript tail Tail log messages from a specified log Cloning the CLI Create a new folder and git clone the repository: git clone https://github.com/elmahio/Elmah.Io.Cli.git Building the CLI Navigate to the root repository of the code and execute the following command: dotnet build","title":"CLI overview"},{"location":"cli-overview/#cli-overview","text":"The elmah.io CLI lets you execute common tasks against elmah.io.","title":"CLI overview"},{"location":"cli-overview/#installing-the-cli","text":"Note The elmah.io CLI requires .NET 6 or newer installed. The elmah.io CLI can be installed in several ways. To set up everything automatically, execute the following script from the command line: dotnet tool install --global Elmah.Io.Cli or make sure to run on the latest version if you already have the CLI installed: dotnet tool update --global Elmah.Io.Cli If you prefer downloading the CLI as a zip you can download the latest version from GitHub . To clone and build the CLI manually, check out the instructions below.","title":"Installing the CLI"},{"location":"cli-overview/#run-the-cli","text":"Clear Dataloader Deployment Diagnose Export Import Log Sourcemap Tail Run the CLI to get help: elmahio --help Help similar to this is outputted to the console: elmahio: CLI for executing various actions against elmah.io Usage: elmahio [options] [command] Options: --nologo Doesn't display the startup banner or the copyright message --version Show version information -?, -h, --help Show help and usage information Commands: clear Delete one or more messages from a log dataloader Load 50 log messages into the specified log deployment Create a new deployment diagnose Diagnose potential problems with an elmah.io installation export Export log messages from a specified log import Import log messages to a specified log log Log a message to the specified log sourcemap Upload a source map and minified JavaScript tail Tail log messages from a specified log","title":"Run the CLI"},{"location":"cli-overview/#cloning-the-cli","text":"Create a new folder and git clone the repository: git clone https://github.com/elmahio/Elmah.Io.Cli.git","title":"Cloning the CLI"},{"location":"cli-overview/#building-the-cli","text":"Navigate to the root repository of the code and execute the following command: dotnet build","title":"Building the CLI"},{"location":"cli-sourcemap/","text":"Upload a source map from the CLI The sourcemap command is used to upload source maps and minified JavaScript files to elmah.io. Usage > elmahio sourcemap --help Description: Upload a source map and minified JavaScript Usage: elmahio sourcemap [options] Options: --apiKey <apiKey> (REQUIRED) An API key with permission to execute the command --logId <logId> (REQUIRED) The ID of the log which should contain the minified JavaScript and source map --path <path> (REQUIRED) An URL to the online minified JavaScript file --sourceMap <sourceMap> (REQUIRED) The source map file. Only files with an extension of .map and content type of application/json will be accepted --minifiedJavaScript <minifiedJavaScript> (REQUIRED) The minified JavaScript file. Only files with an extension of .js and content type of text/javascript will be accepted --proxyHost <proxyHost> A hostname or IP for a proxy to use to call elmah.io --proxyPort <proxyPort> A port number for a proxy to use to call elmah.io -?, -h, --help Show help and usage information Examples sourcemap --apiKey API_KEY --logId LOG_ID --path \"/bundles/sharedbundle.min.js\" --sourceMap \"c:\\path\\to\\sharedbundle.map\" --minifiedJavaScript \"c:\\path\\to\\sharedbundle.min.js\"","title":"Sourcemap"},{"location":"cli-sourcemap/#upload-a-source-map-from-the-cli","text":"The sourcemap command is used to upload source maps and minified JavaScript files to elmah.io.","title":"Upload a source map from the CLI"},{"location":"cli-sourcemap/#usage","text":"> elmahio sourcemap --help Description: Upload a source map and minified JavaScript Usage: elmahio sourcemap [options] Options: --apiKey <apiKey> (REQUIRED) An API key with permission to execute the command --logId <logId> (REQUIRED) The ID of the log which should contain the minified JavaScript and source map --path <path> (REQUIRED) An URL to the online minified JavaScript file --sourceMap <sourceMap> (REQUIRED) The source map file. Only files with an extension of .map and content type of application/json will be accepted --minifiedJavaScript <minifiedJavaScript> (REQUIRED) The minified JavaScript file. Only files with an extension of .js and content type of text/javascript will be accepted --proxyHost <proxyHost> A hostname or IP for a proxy to use to call elmah.io --proxyPort <proxyPort> A port number for a proxy to use to call elmah.io -?, -h, --help Show help and usage information","title":"Usage"},{"location":"cli-sourcemap/#examples","text":"sourcemap --apiKey API_KEY --logId LOG_ID --path \"/bundles/sharedbundle.min.js\" --sourceMap \"c:\\path\\to\\sharedbundle.map\" --minifiedJavaScript \"c:\\path\\to\\sharedbundle.min.js\"","title":"Examples"},{"location":"cli-tail/","text":"Tail log messages from the CLI The tail command is used to tail log messages in a specified log. Usage > elmahio tail --help Description: Tail log messages from a specified log Usage: elmahio tail [options] Options: --apiKey <apiKey> (REQUIRED) An API key with permission to execute the command --logId <logId> (REQUIRED) The ID of the log to send the log message to --proxyHost <proxyHost> A hostname or IP for a proxy to use to call elmah.io --proxyPort <proxyPort> A port number for a proxy to use to call elmah.io -?, -h, --help Show help and usage information Example elmahio tail --apiKey API_KEY --logId LOG_ID","title":"Tail"},{"location":"cli-tail/#tail-log-messages-from-the-cli","text":"The tail command is used to tail log messages in a specified log.","title":"Tail log messages from the CLI"},{"location":"cli-tail/#usage","text":"> elmahio tail --help Description: Tail log messages from a specified log Usage: elmahio tail [options] Options: --apiKey <apiKey> (REQUIRED) An API key with permission to execute the command --logId <logId> (REQUIRED) The ID of the log to send the log message to --proxyHost <proxyHost> A hostname or IP for a proxy to use to call elmah.io --proxyPort <proxyPort> A port number for a proxy to use to call elmah.io -?, -h, --help Show help and usage information","title":"Usage"},{"location":"cli-tail/#example","text":"elmahio tail --apiKey API_KEY --logId LOG_ID","title":"Example"},{"location":"configure-elmah-io-from-code/","text":"Configure elmah.io from code You typically configure elmah.io in your web.config file. With a little help from some custom code, you will be able to configure everything in code as well: using Elmah; using System.Collections.Generic; using System.ComponentModel.Design; [assembly: WebActivatorEx.PreApplicationStartMethod(typeof(ElmahFromCodeExample.ElmahConfig), \"Start\")] namespace ElmahFromCodeExample { public static class ElmahConfig { public static void Start() { ServiceCenter.Current = CreateServiceProviderQueryHandler(ServiceCenter.Current); HttpApplication.RegisterModule(typeof(ErrorLogModule)); } private static ServiceProviderQueryHandler CreateServiceProviderQueryHandler(ServiceProviderQueryHandler sp) { return context => { var container = new ServiceContainer(sp(context)); var config = new Dictionary<string, string>(); config[\"apiKey\"] = \"API_KEY\"; config[\"logId\"] = \"LOG_ID\"; var log = new Elmah.Io.ErrorLog(config); container.AddService(typeof(Elmah.ErrorLog), log); return container; }; } } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with a log ID ( Where is my log ID? ). Let's look at the code. Our class ElmahConfig is configured as a PreApplicationStartMethod which means, that ASP.NET (MVC) will execute the Start method when the web application starts up. Inside this method, we set the ServiceCenter.Current property to the return type of the CreateServiceProviderQueryHandler method. This method is where the magic happens. Besides creating the new ServiceContainer , we created the Elmah.Io.ErrorLog class normally configured through XML. The Dictionary should contain the API key and log ID as explained earlier. In the second line of the Start -method, we call the RegisterModule -method with ErrorLogModule as a parameter. This replaces the need for registering the module in web.config as part of the system.webServer element. That's it! You no longer need the <elmah> element, config sections, or anything else related to ELMAH and elmah.io in your web.config file.","title":"Configure elmah.io from code"},{"location":"configure-elmah-io-from-code/#configure-elmahio-from-code","text":"You typically configure elmah.io in your web.config file. With a little help from some custom code, you will be able to configure everything in code as well: using Elmah; using System.Collections.Generic; using System.ComponentModel.Design; [assembly: WebActivatorEx.PreApplicationStartMethod(typeof(ElmahFromCodeExample.ElmahConfig), \"Start\")] namespace ElmahFromCodeExample { public static class ElmahConfig { public static void Start() { ServiceCenter.Current = CreateServiceProviderQueryHandler(ServiceCenter.Current); HttpApplication.RegisterModule(typeof(ErrorLogModule)); } private static ServiceProviderQueryHandler CreateServiceProviderQueryHandler(ServiceProviderQueryHandler sp) { return context => { var container = new ServiceContainer(sp(context)); var config = new Dictionary<string, string>(); config[\"apiKey\"] = \"API_KEY\"; config[\"logId\"] = \"LOG_ID\"; var log = new Elmah.Io.ErrorLog(config); container.AddService(typeof(Elmah.ErrorLog), log); return container; }; } } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with a log ID ( Where is my log ID? ). Let's look at the code. Our class ElmahConfig is configured as a PreApplicationStartMethod which means, that ASP.NET (MVC) will execute the Start method when the web application starts up. Inside this method, we set the ServiceCenter.Current property to the return type of the CreateServiceProviderQueryHandler method. This method is where the magic happens. Besides creating the new ServiceContainer , we created the Elmah.Io.ErrorLog class normally configured through XML. The Dictionary should contain the API key and log ID as explained earlier. In the second line of the Start -method, we call the RegisterModule -method with ErrorLogModule as a parameter. This replaces the need for registering the module in web.config as part of the system.webServer element. That's it! You no longer need the <elmah> element, config sections, or anything else related to ELMAH and elmah.io in your web.config file.","title":"Configure elmah.io from code"},{"location":"configure-elmah-io-manually/","text":"Configure elmah.io manually The Elmah.Io NuGet package normally adds all of the necessary configuration, to get up and running with elmah.io. This is one of our killer features and our customers tell us, that we have the simplest installer on the market. In some cases, you may experience problems with the automatic configuration, though. Different reasons can cause the configuration not to be added automatically. The most common reason is restrictions to executing PowerShell inside Visual Studio. Start by installing the Elmah.Io package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io Install-Package Elmah.Io <PackageReference Include=\"Elmah.Io\" Version=\"5.*\" /> paket add Elmah.Io If a dialog is shown during the installation, input your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Don't worry if the configuration isn't added, since we will verify this later. Add the following to the <configSections> element in your web.config : <sectionGroup name=\"elmah\"> <section name=\"security\" requirePermission=\"false\" type=\"Elmah.SecuritySectionHandler, Elmah\" /> <section name=\"errorLog\" requirePermission=\"false\" type=\"Elmah.ErrorLogSectionHandler, Elmah\" /> <section name=\"errorMail\" requirePermission=\"false\" type=\"Elmah.ErrorMailSectionHandler, Elmah\" /> <section name=\"errorFilter\" requirePermission=\"false\" type=\"Elmah.ErrorFilterSectionHandler, Elmah\" /> </sectionGroup> Add the following to the <httpModules> element (inside <system.web> ) in your web.config : <add name=\"ErrorLog\" type=\"Elmah.ErrorLogModule, Elmah\" /> <add name=\"ErrorMail\" type=\"Elmah.ErrorMailModule, Elmah\" /> <add name=\"ErrorFilter\" type=\"Elmah.ErrorFilterModule, Elmah\"/> Add the following to the <modules> element (inside <system.webServer> ) in your web.config : <add name=\"ErrorLog\" type=\"Elmah.ErrorLogModule, Elmah\" preCondition=\"managedHandler\" /> <add name=\"ErrorMail\" type=\"Elmah.ErrorMailModule, Elmah\" preCondition=\"managedHandler\" /> <add name=\"ErrorFilter\" type=\"Elmah.ErrorFilterModule, Elmah\" preCondition=\"managedHandler\" /> Add the following to the system.webServer element in your web.config : <validation validateIntegratedModeConfiguration=\"false\" /> Add the following as a root element beneath the <configuration> element in your web.config : <elmah> <security allowRemoteAccess=\"false\" /> <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKey=\"API_KEY\" logId=\"LOG_ID\" /> </elmah> Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with your log ID ( Where is my log ID? ). That's it. You managed to install elmah.io manually and you should go to your LinkedIn profile and update with a new certification called \"Certified elmah.io installer\" :) Here's a full example of ELMAH configuration in a web.config file: <configuration> <configSections> <sectionGroup name=\"elmah\"> <section name=\"security\" requirePermission=\"false\" type=\"Elmah.SecuritySectionHandler, Elmah\" /> <section name=\"errorLog\" requirePermission=\"false\" type=\"Elmah.ErrorLogSectionHandler, Elmah\" /> <section name=\"errorMail\" requirePermission=\"false\" type=\"Elmah.ErrorMailSectionHandler, Elmah\" /> <section name=\"errorFilter\" requirePermission=\"false\" type=\"Elmah.ErrorFilterSectionHandler, Elmah\" /> </sectionGroup> </configSections> <system.web> <httpModules> <add name=\"ErrorLog\" type=\"Elmah.ErrorLogModule, Elmah\" /> <add name=\"ErrorMail\" type=\"Elmah.ErrorMailModule, Elmah\" /> <add name=\"ErrorFilter\" type=\"Elmah.ErrorFilterModule, Elmah\"/> </httpModules> </system.web> <system.webServer> <validation validateIntegratedModeConfiguration=\"false\" /> <modules> <add name=\"ErrorLog\" type=\"Elmah.ErrorLogModule, Elmah\" preCondition=\"managedHandler\" /> <add name=\"ErrorMail\" type=\"Elmah.ErrorMailModule, Elmah\" preCondition=\"managedHandler\" /> <add name=\"ErrorFilter\" type=\"Elmah.ErrorFilterModule, Elmah\" preCondition=\"managedHandler\" /> </modules> </system.webServer> <elmah> <security allowRemoteAccess=\"false\" /> <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKey=\"API_KEY\" logId=\"LOG_ID\" /> </elmah> </configuration> In case you need to access your error log on /elmah.axd , you need to add the following to the <configuration> element in your web.config : <location path=\"elmah.axd\" inheritInChildApplications=\"false\"> <system.web> <httpHandlers> <add verb=\"POST,GET,HEAD\" path=\"elmah.axd\" type=\"Elmah.ErrorLogPageFactory, Elmah\" /> </httpHandlers> </system.web> <system.webServer> <handlers> <add name=\"ELMAH\" verb=\"POST,GET,HEAD\" path=\"elmah.axd\" type=\"Elmah.ErrorLogPageFactory, Elmah\" preCondition=\"integratedMode\" /> </handlers> </system.webServer> </location> We don't recommend browsing your error logs through the /elmah.axd endpoint. The elmah.io UI will let you control different levels of access and more.","title":"Configure elmah.io manually"},{"location":"configure-elmah-io-manually/#configure-elmahio-manually","text":"The Elmah.Io NuGet package normally adds all of the necessary configuration, to get up and running with elmah.io. This is one of our killer features and our customers tell us, that we have the simplest installer on the market. In some cases, you may experience problems with the automatic configuration, though. Different reasons can cause the configuration not to be added automatically. The most common reason is restrictions to executing PowerShell inside Visual Studio. Start by installing the Elmah.Io package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io Install-Package Elmah.Io <PackageReference Include=\"Elmah.Io\" Version=\"5.*\" /> paket add Elmah.Io If a dialog is shown during the installation, input your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Don't worry if the configuration isn't added, since we will verify this later. Add the following to the <configSections> element in your web.config : <sectionGroup name=\"elmah\"> <section name=\"security\" requirePermission=\"false\" type=\"Elmah.SecuritySectionHandler, Elmah\" /> <section name=\"errorLog\" requirePermission=\"false\" type=\"Elmah.ErrorLogSectionHandler, Elmah\" /> <section name=\"errorMail\" requirePermission=\"false\" type=\"Elmah.ErrorMailSectionHandler, Elmah\" /> <section name=\"errorFilter\" requirePermission=\"false\" type=\"Elmah.ErrorFilterSectionHandler, Elmah\" /> </sectionGroup> Add the following to the <httpModules> element (inside <system.web> ) in your web.config : <add name=\"ErrorLog\" type=\"Elmah.ErrorLogModule, Elmah\" /> <add name=\"ErrorMail\" type=\"Elmah.ErrorMailModule, Elmah\" /> <add name=\"ErrorFilter\" type=\"Elmah.ErrorFilterModule, Elmah\"/> Add the following to the <modules> element (inside <system.webServer> ) in your web.config : <add name=\"ErrorLog\" type=\"Elmah.ErrorLogModule, Elmah\" preCondition=\"managedHandler\" /> <add name=\"ErrorMail\" type=\"Elmah.ErrorMailModule, Elmah\" preCondition=\"managedHandler\" /> <add name=\"ErrorFilter\" type=\"Elmah.ErrorFilterModule, Elmah\" preCondition=\"managedHandler\" /> Add the following to the system.webServer element in your web.config : <validation validateIntegratedModeConfiguration=\"false\" /> Add the following as a root element beneath the <configuration> element in your web.config : <elmah> <security allowRemoteAccess=\"false\" /> <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKey=\"API_KEY\" logId=\"LOG_ID\" /> </elmah> Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with your log ID ( Where is my log ID? ). That's it. You managed to install elmah.io manually and you should go to your LinkedIn profile and update with a new certification called \"Certified elmah.io installer\" :) Here's a full example of ELMAH configuration in a web.config file: <configuration> <configSections> <sectionGroup name=\"elmah\"> <section name=\"security\" requirePermission=\"false\" type=\"Elmah.SecuritySectionHandler, Elmah\" /> <section name=\"errorLog\" requirePermission=\"false\" type=\"Elmah.ErrorLogSectionHandler, Elmah\" /> <section name=\"errorMail\" requirePermission=\"false\" type=\"Elmah.ErrorMailSectionHandler, Elmah\" /> <section name=\"errorFilter\" requirePermission=\"false\" type=\"Elmah.ErrorFilterSectionHandler, Elmah\" /> </sectionGroup> </configSections> <system.web> <httpModules> <add name=\"ErrorLog\" type=\"Elmah.ErrorLogModule, Elmah\" /> <add name=\"ErrorMail\" type=\"Elmah.ErrorMailModule, Elmah\" /> <add name=\"ErrorFilter\" type=\"Elmah.ErrorFilterModule, Elmah\"/> </httpModules> </system.web> <system.webServer> <validation validateIntegratedModeConfiguration=\"false\" /> <modules> <add name=\"ErrorLog\" type=\"Elmah.ErrorLogModule, Elmah\" preCondition=\"managedHandler\" /> <add name=\"ErrorMail\" type=\"Elmah.ErrorMailModule, Elmah\" preCondition=\"managedHandler\" /> <add name=\"ErrorFilter\" type=\"Elmah.ErrorFilterModule, Elmah\" preCondition=\"managedHandler\" /> </modules> </system.webServer> <elmah> <security allowRemoteAccess=\"false\" /> <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKey=\"API_KEY\" logId=\"LOG_ID\" /> </elmah> </configuration> In case you need to access your error log on /elmah.axd , you need to add the following to the <configuration> element in your web.config : <location path=\"elmah.axd\" inheritInChildApplications=\"false\"> <system.web> <httpHandlers> <add verb=\"POST,GET,HEAD\" path=\"elmah.axd\" type=\"Elmah.ErrorLogPageFactory, Elmah\" /> </httpHandlers> </system.web> <system.webServer> <handlers> <add name=\"ELMAH\" verb=\"POST,GET,HEAD\" path=\"elmah.axd\" type=\"Elmah.ErrorLogPageFactory, Elmah\" preCondition=\"integratedMode\" /> </handlers> </system.webServer> </location> We don't recommend browsing your error logs through the /elmah.axd endpoint. The elmah.io UI will let you control different levels of access and more.","title":"Configure elmah.io manually"},{"location":"create-deployments-from-atlassian-bamboo/","text":"Create deployments from Atlassian Bamboo Setting up elmah.io Deployment Tracking on Bamboo is easy using a bit of PowerShell. Add a new Script Task and select Windows PowerShell in Interpreter . Select Inline in Script location and add the following PowerShell to Script body : $ProgressPreference = \"SilentlyContinue\" Write-Host $bamboo_buildNumber $url = \"https://api.elmah.io/v3/deployments?api_key=API_KEY\" $body = @{ version = $Env:bamboo_buildNumber logId = \"LOG_ID\" } [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 Invoke-RestMethod -Method Post -Uri $url -Body $body Replace API_KEY and LOG_ID and everything is configured. The script uses the build number of the current build as the version number ( $Env:bamboo_buildNumber ). If you prefer another scheme, Bamboo offers a range of variables .","title":"Create deployments from Atlassian Bamboo"},{"location":"create-deployments-from-atlassian-bamboo/#create-deployments-from-atlassian-bamboo","text":"Setting up elmah.io Deployment Tracking on Bamboo is easy using a bit of PowerShell. Add a new Script Task and select Windows PowerShell in Interpreter . Select Inline in Script location and add the following PowerShell to Script body : $ProgressPreference = \"SilentlyContinue\" Write-Host $bamboo_buildNumber $url = \"https://api.elmah.io/v3/deployments?api_key=API_KEY\" $body = @{ version = $Env:bamboo_buildNumber logId = \"LOG_ID\" } [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 Invoke-RestMethod -Method Post -Uri $url -Body $body Replace API_KEY and LOG_ID and everything is configured. The script uses the build number of the current build as the version number ( $Env:bamboo_buildNumber ). If you prefer another scheme, Bamboo offers a range of variables .","title":"Create deployments from Atlassian Bamboo"},{"location":"create-deployments-from-azure-devops-pipelines/","text":"Create deployments from Azure DevOps Pipelines Create deployments from Azure DevOps Pipelines Using YAML Using Classic editor Notifying elmah.io about new deployments is possible as a build step in Azure DevOps Pipelines. Using YAML Edit your build definition YAML file. If not already shown, open the assistant by clicking the Show assistant button. Search for 'elmah.io deploy'. Click the elmah.io Deployment Notification task Replace API_KEY with an API key ( Where is my API key? ) with permission ( How to configure API key permissions ) to create deployments. If the deployment is specific to a single log, insert a log ID ( Where is my log ID? ) with the ID of the log instead of LOG_ID . Deployments without a log ID will show on all logs in the organization. The task uses the current build number ( BUILD_BUILDNUMBER ) as the version name on elmah.io. If you want to override this behavior, you can insert a value in the Version text box. Click the Add button and the new task will be added to your YAML definition. You typically want to move the deployment task to the last placement in tasks : steps: # other steps - task: ElmahIoDeploymentNotification@4 inputs: apiKey: 'API_KEY' logId: 'LOG_ID' Using Classic editor The deployment task extension is not available in the Classic editor. Here, you can use PowerShell instead. Edit the build definition currently building your project(s). Click the Add task button and locate the PowerShell task. Click Add . Fill in the details as shown in the screenshot. ... and here's the code from the screenshot above: $ProgressPreference = \"SilentlyContinue\" $url = \"https://api.elmah.io/v3/deployments?api_key=API_KEY\" $body = @{ version = \"$env:BUILD_BUILDNUMBER\" description = \"$env:BUILD_SOURCEVERSIONMESSAGE\" userName = \"$env:BUILD_REQUESTEDFOR\" userEmail = \"$env:BUILD_REQUESTEDFOREMAIL\" logId = \"LOG_ID\" } [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 Invoke-RestMethod -Method Post -Uri $url -Body $body Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the id of the log representing the application deployed by this build configuration.","title":"Create deployments from Azure DevOps Pipelines"},{"location":"create-deployments-from-azure-devops-pipelines/#create-deployments-from-azure-devops-pipelines","text":"Create deployments from Azure DevOps Pipelines Using YAML Using Classic editor Notifying elmah.io about new deployments is possible as a build step in Azure DevOps Pipelines.","title":"Create deployments from Azure DevOps Pipelines"},{"location":"create-deployments-from-azure-devops-pipelines/#using-yaml","text":"Edit your build definition YAML file. If not already shown, open the assistant by clicking the Show assistant button. Search for 'elmah.io deploy'. Click the elmah.io Deployment Notification task Replace API_KEY with an API key ( Where is my API key? ) with permission ( How to configure API key permissions ) to create deployments. If the deployment is specific to a single log, insert a log ID ( Where is my log ID? ) with the ID of the log instead of LOG_ID . Deployments without a log ID will show on all logs in the organization. The task uses the current build number ( BUILD_BUILDNUMBER ) as the version name on elmah.io. If you want to override this behavior, you can insert a value in the Version text box. Click the Add button and the new task will be added to your YAML definition. You typically want to move the deployment task to the last placement in tasks : steps: # other steps - task: ElmahIoDeploymentNotification@4 inputs: apiKey: 'API_KEY' logId: 'LOG_ID'","title":"Using YAML"},{"location":"create-deployments-from-azure-devops-pipelines/#using-classic-editor","text":"The deployment task extension is not available in the Classic editor. Here, you can use PowerShell instead. Edit the build definition currently building your project(s). Click the Add task button and locate the PowerShell task. Click Add . Fill in the details as shown in the screenshot. ... and here's the code from the screenshot above: $ProgressPreference = \"SilentlyContinue\" $url = \"https://api.elmah.io/v3/deployments?api_key=API_KEY\" $body = @{ version = \"$env:BUILD_BUILDNUMBER\" description = \"$env:BUILD_SOURCEVERSIONMESSAGE\" userName = \"$env:BUILD_REQUESTEDFOR\" userEmail = \"$env:BUILD_REQUESTEDFOREMAIL\" logId = \"LOG_ID\" } [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 Invoke-RestMethod -Method Post -Uri $url -Body $body Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the id of the log representing the application deployed by this build configuration.","title":"Using Classic editor"},{"location":"create-deployments-from-azure-devops-releases/","text":"Create deployments from Azure DevOps Releases If you are using Releases in Azure DevOps, you should use our extension to notify elmah.io about new deployments. To install and configure the extension, follow the simple steps below: Go to the elmah.io Deployment Tasks extension on the Azure DevOps Marketplace and click the Get it free button: Select your organization and click the Install button: Go to your Azure DevOps project and add the elmah.io Deployment Notification task. Fill in all fields as shown here: You will need to replace API_KEY with an API key ( Where is my API key? ) with permission ( How to configure API key permissions ) to create deployments. If the deployment is specific to a single log, insert a log ID ( Where is my log ID? ) with the ID of the log instead of LOG_ID . Deployments without a log ID will show on all logs in the organization. The task uses the current release name ( RELEASE_RELEASENAME ) as the version name on elmah.io. If you want to override this behavior, you can insert a value in the Version text box. That's it! Azure DevOps will now notify elmah.io every time the release pipeline is executed.","title":"Create deployments from Azure DevOps Releases"},{"location":"create-deployments-from-azure-devops-releases/#create-deployments-from-azure-devops-releases","text":"If you are using Releases in Azure DevOps, you should use our extension to notify elmah.io about new deployments. To install and configure the extension, follow the simple steps below: Go to the elmah.io Deployment Tasks extension on the Azure DevOps Marketplace and click the Get it free button: Select your organization and click the Install button: Go to your Azure DevOps project and add the elmah.io Deployment Notification task. Fill in all fields as shown here: You will need to replace API_KEY with an API key ( Where is my API key? ) with permission ( How to configure API key permissions ) to create deployments. If the deployment is specific to a single log, insert a log ID ( Where is my log ID? ) with the ID of the log instead of LOG_ID . Deployments without a log ID will show on all logs in the organization. The task uses the current release name ( RELEASE_RELEASENAME ) as the version name on elmah.io. If you want to override this behavior, you can insert a value in the Version text box. That's it! Azure DevOps will now notify elmah.io every time the release pipeline is executed.","title":"Create deployments from Azure DevOps Releases"},{"location":"create-deployments-from-bitbucket-pipelines/","text":"Create deployments from Bitbucket Pipelines Pipelines use scripts, embedded in YAML files, to configure the different steps required to build and deploy software. To notify elmah.io as part of a build/deployment, the first you will need to do is to add your API key as a secure environment variable. To do so, go to Settings | Workspace Settings | Workspace variables and add a new variable: Where is my API key? Then add a new script to your build YAML-file after building and deploying your software: pipelines: default: - step: script: # ... - curl -X POST -d \"{\\\"version\\\":\\\"$BITBUCKET_BUILD_NUMBER\\\"}\" -H \"Content-Type:application/json\" https://api.elmah.io/v3/deployments?api_key=$ELMAHIO_APIKEY The script uses curl to invoke the elmah.io Deployments endpoint with the API key ( $ELMAHIO_APIKEY ) and a version number ( $BITBUCKET_BUILD_NUMBER ). The posted JSON can be extended to support additional properties like a changelog and the name of the person triggering the deployment. Check out the API documentation for details.","title":"Create deployments from Bitbucket Pipelines"},{"location":"create-deployments-from-bitbucket-pipelines/#create-deployments-from-bitbucket-pipelines","text":"Pipelines use scripts, embedded in YAML files, to configure the different steps required to build and deploy software. To notify elmah.io as part of a build/deployment, the first you will need to do is to add your API key as a secure environment variable. To do so, go to Settings | Workspace Settings | Workspace variables and add a new variable: Where is my API key? Then add a new script to your build YAML-file after building and deploying your software: pipelines: default: - step: script: # ... - curl -X POST -d \"{\\\"version\\\":\\\"$BITBUCKET_BUILD_NUMBER\\\"}\" -H \"Content-Type:application/json\" https://api.elmah.io/v3/deployments?api_key=$ELMAHIO_APIKEY The script uses curl to invoke the elmah.io Deployments endpoint with the API key ( $ELMAHIO_APIKEY ) and a version number ( $BITBUCKET_BUILD_NUMBER ). The posted JSON can be extended to support additional properties like a changelog and the name of the person triggering the deployment. Check out the API documentation for details.","title":"Create deployments from Bitbucket Pipelines"},{"location":"create-deployments-from-cli/","text":"Create deployments from the elmah.io CLI Deployments can be easily created from either the command-line or a build server using the elmah.io CLI. There's a help page dedicated to the deployment command but here's a quick recap. If not already installed, start by installing the elmah.io CLI: dotnet tool install --global Elmah.Io.Cli Then, create a new deployment using the deployment command: elmahio deployment --apiKey API_KEY --version 1.0.0 In case you are calling the CLI from a build server, you may want to exclude the elmah.io logo and copyright message using the --nologo parameter to reduce log output and to avoid cluttering the build output: elmahio deployment --nologo --apiKey API_KEY --version 1.0.0","title":"Create deployments from CLI"},{"location":"create-deployments-from-cli/#create-deployments-from-the-elmahio-cli","text":"Deployments can be easily created from either the command-line or a build server using the elmah.io CLI. There's a help page dedicated to the deployment command but here's a quick recap. If not already installed, start by installing the elmah.io CLI: dotnet tool install --global Elmah.Io.Cli Then, create a new deployment using the deployment command: elmahio deployment --apiKey API_KEY --version 1.0.0 In case you are calling the CLI from a build server, you may want to exclude the elmah.io logo and copyright message using the --nologo parameter to reduce log output and to avoid cluttering the build output: elmahio deployment --nologo --apiKey API_KEY --version 1.0.0","title":"Create deployments from the elmah.io CLI"},{"location":"create-deployments-from-github-actions/","text":"Create deployments from GitHub Actions GitHub Actions is a great platform for building and releasing software. To notify elmah.io when you deploy a new version of your project, you will need an additional step in your build definition. Before you do that, start by creating new secrets: Go to your project on GitHub. Click the Settings tab. Click the Secrets navigation item. Click New repository secret . Name the secret ELMAH_IO_API_KEY . Insert your elmah.io API key in Value ( Where is my API key? ). Make sure to use an API key that includes the Deployments | Write permission ( How to configure API key permissions ). Click Add secret Do the same for your elmah.io log ID but name it ELMAH_IO_LOG_ID ( Where is my log ID? ). Insert the following step as the last one in your YAML build specification: - name: Create Deployment on elmah.io uses: elmahio/github-create-deployment-action@v1 with: apiKey: ${{ secrets.ELMAH_IO_API_KEY }} version: ${{ github.run_number }} logId: ${{ secrets.ELMAH_IO_LOG_ID }} The configuration will automatically notify elmah.io every time the build script is running. The build number ( github.run_number ) is used as the version for this sample, but you can modify this if you prefer another scheme. Here's a full overview of properties: Name Required Description apiKey \u2714\ufe0f An API key with permission to create deployments. version \u2714\ufe0f The version number of this deployment. The value of version can be a SemVer compliant string or any other syntax that you are using as your version numbering scheme. You can use ${{ github.run_number }} to use the build number as the version or you can pick another scheme or combine the two. description Optional description of this deployment. Can be markdown or cleartext. The latest commit message can be used as the description by using ${{ github.event.head_commit.message }} . userName The name of the person responsible for creating this deployment. This can be set manually or dynamically using the ${{ github.actor }} variable. userEmail The email of the person responsible for creating this deployment. There doesn't seem to be a way to pull the email responsible for triggering the build through variables, why this will need to be set manually. logId As default, deployments are attached to all logs of the organization. If you want a deployment to attach to a single log only, set this to the ID of that log.","title":"Create deployments from GitHub Actions"},{"location":"create-deployments-from-github-actions/#create-deployments-from-github-actions","text":"GitHub Actions is a great platform for building and releasing software. To notify elmah.io when you deploy a new version of your project, you will need an additional step in your build definition. Before you do that, start by creating new secrets: Go to your project on GitHub. Click the Settings tab. Click the Secrets navigation item. Click New repository secret . Name the secret ELMAH_IO_API_KEY . Insert your elmah.io API key in Value ( Where is my API key? ). Make sure to use an API key that includes the Deployments | Write permission ( How to configure API key permissions ). Click Add secret Do the same for your elmah.io log ID but name it ELMAH_IO_LOG_ID ( Where is my log ID? ). Insert the following step as the last one in your YAML build specification: - name: Create Deployment on elmah.io uses: elmahio/github-create-deployment-action@v1 with: apiKey: ${{ secrets.ELMAH_IO_API_KEY }} version: ${{ github.run_number }} logId: ${{ secrets.ELMAH_IO_LOG_ID }} The configuration will automatically notify elmah.io every time the build script is running. The build number ( github.run_number ) is used as the version for this sample, but you can modify this if you prefer another scheme. Here's a full overview of properties: Name Required Description apiKey \u2714\ufe0f An API key with permission to create deployments. version \u2714\ufe0f The version number of this deployment. The value of version can be a SemVer compliant string or any other syntax that you are using as your version numbering scheme. You can use ${{ github.run_number }} to use the build number as the version or you can pick another scheme or combine the two. description Optional description of this deployment. Can be markdown or cleartext. The latest commit message can be used as the description by using ${{ github.event.head_commit.message }} . userName The name of the person responsible for creating this deployment. This can be set manually or dynamically using the ${{ github.actor }} variable. userEmail The email of the person responsible for creating this deployment. There doesn't seem to be a way to pull the email responsible for triggering the build through variables, why this will need to be set manually. logId As default, deployments are attached to all logs of the organization. If you want a deployment to attach to a single log only, set this to the ID of that log.","title":"Create deployments from GitHub Actions"},{"location":"create-deployments-from-gitlab-pipelines/","text":"Create deployments from GitLab Pipelines Notifying elmah.io of new deployments on GitLab Pipelines can be done by adding a bit of YAML code. You can create the integration in whatever job you prefer. In the following example, a deploy job is extended to create a new deployment on elmah.io: deploy-job: stage: deploy environment: production variables: API_KEY: 'API_KEY' LOG_ID: 'LOG_ID' script: - echo \"Deploying application...\" - echo \"Application successfully deployed.\" - | curl --location --request POST \"https://api.elmah.io//v3/deployments?api_key=$API_KEY\" --header 'Content-Type: application/x-www-form-urlencoded' --data \"version=$CI_PIPELINE_ID&description=$CI_COMMIT_MESSAGE&userName=$GITLAB_USER_NAME&userEmail=$GITLAB_USER_EMAIL&logId=$LOG_ID\" The code defines two new variables named API_KEY and LOG_ID . Replace the values with an API key ( Where is my API key? ) with permission to create deployments and the ID ( Where is my log ID? ) of the log to create the deployment in. The script uses curl to call the elmah.io API. As part of the HTTP POST, the pipeline ID (basically a build number) is used for the version. You can change that to SemVer or whatever you prefer. The commit message and user triggering the build are added as part of the deployment.","title":"Create deployments from GitLab Pipelines"},{"location":"create-deployments-from-gitlab-pipelines/#create-deployments-from-gitlab-pipelines","text":"Notifying elmah.io of new deployments on GitLab Pipelines can be done by adding a bit of YAML code. You can create the integration in whatever job you prefer. In the following example, a deploy job is extended to create a new deployment on elmah.io: deploy-job: stage: deploy environment: production variables: API_KEY: 'API_KEY' LOG_ID: 'LOG_ID' script: - echo \"Deploying application...\" - echo \"Application successfully deployed.\" - | curl --location --request POST \"https://api.elmah.io//v3/deployments?api_key=$API_KEY\" --header 'Content-Type: application/x-www-form-urlencoded' --data \"version=$CI_PIPELINE_ID&description=$CI_COMMIT_MESSAGE&userName=$GITLAB_USER_NAME&userEmail=$GITLAB_USER_EMAIL&logId=$LOG_ID\" The code defines two new variables named API_KEY and LOG_ID . Replace the values with an API key ( Where is my API key? ) with permission to create deployments and the ID ( Where is my log ID? ) of the log to create the deployment in. The script uses curl to call the elmah.io API. As part of the HTTP POST, the pipeline ID (basically a build number) is used for the version. You can change that to SemVer or whatever you prefer. The commit message and user triggering the build are added as part of the deployment.","title":"Create deployments from GitLab Pipelines"},{"location":"create-deployments-from-kudu/","text":"Create deployments from Kudu Kudu is the engine behind Git deployments on Microsoft Azure. To create a new elmah.io deployment every time you deploy a new app service to Azure, add a new post-deployment script by navigating your browser to https://yoursite.scm.azurewebsites.net where yoursite is the name of your Azure website. Click the Debug console and navigate to site\\deployments\\tools\\PostDeploymentActions (create it if it doesn't exist). To create the new PowerShell file, write the following in the prompt: touch CreateDeployment.ps1 With a post-deployment script running inside Kudu, we can to extract some more information about the current deployment. A full deployment PowerShell script for Kudu would look like this: $version = Get-Date -format u (Get-Content ..\\wwwroot\\web.config).replace('$version', $version) | Set-Content ..\\wwwroot\\web.config $ProgressPreference = \"SilentlyContinue\" $commit = [System.Environment]::GetEnvironmentVariable(\"SCM_COMMIT_MESSAGE\"); $commitId = [System.Environment]::GetEnvironmentVariable(\"SCM_COMMIT_ID\"); $httpHost = [System.Environment]::GetEnvironmentVariable(\"HTTP_HOST\"); $deployUrl = \"https://$httpHost/api/deployments/$commitId\" $username = \"MY_USERNAME\" $password = \"MY_PASSWORD\" $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes((\"{0}:{1}\" -f $username,$password))) $deployInfo = Invoke-RestMethod -Method Get -Uri $deployUrl -Headers @{Authorization=(\"Basic {0}\" -f $base64AuthInfo)} $url = 'https://api.elmah.io/v3/deployments?api_key=API_KEY' $body = @{ version = $version description = $commit userName = $deployInfo.author userEmail = $deployInfo.author_email } [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 Invoke-RestMethod -Method Post -Uri $url -Body $body (replace MY_USERNAME and MY_PASSWORD with your Azure deployment credentials and API_KEY with your elmah.io API key located on your organization settings page) The script generates a new version string from the current date and time. How you want your version string looking, is really up to you. To fetch additional information about the deployment, the Kudu deployments endpoint is requested with the current commit id. Finally, the script creates the deployment using the elmah.io REST API.","title":"Create deployments from Kudu"},{"location":"create-deployments-from-kudu/#create-deployments-from-kudu","text":"Kudu is the engine behind Git deployments on Microsoft Azure. To create a new elmah.io deployment every time you deploy a new app service to Azure, add a new post-deployment script by navigating your browser to https://yoursite.scm.azurewebsites.net where yoursite is the name of your Azure website. Click the Debug console and navigate to site\\deployments\\tools\\PostDeploymentActions (create it if it doesn't exist). To create the new PowerShell file, write the following in the prompt: touch CreateDeployment.ps1 With a post-deployment script running inside Kudu, we can to extract some more information about the current deployment. A full deployment PowerShell script for Kudu would look like this: $version = Get-Date -format u (Get-Content ..\\wwwroot\\web.config).replace('$version', $version) | Set-Content ..\\wwwroot\\web.config $ProgressPreference = \"SilentlyContinue\" $commit = [System.Environment]::GetEnvironmentVariable(\"SCM_COMMIT_MESSAGE\"); $commitId = [System.Environment]::GetEnvironmentVariable(\"SCM_COMMIT_ID\"); $httpHost = [System.Environment]::GetEnvironmentVariable(\"HTTP_HOST\"); $deployUrl = \"https://$httpHost/api/deployments/$commitId\" $username = \"MY_USERNAME\" $password = \"MY_PASSWORD\" $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes((\"{0}:{1}\" -f $username,$password))) $deployInfo = Invoke-RestMethod -Method Get -Uri $deployUrl -Headers @{Authorization=(\"Basic {0}\" -f $base64AuthInfo)} $url = 'https://api.elmah.io/v3/deployments?api_key=API_KEY' $body = @{ version = $version description = $commit userName = $deployInfo.author userEmail = $deployInfo.author_email } [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 Invoke-RestMethod -Method Post -Uri $url -Body $body (replace MY_USERNAME and MY_PASSWORD with your Azure deployment credentials and API_KEY with your elmah.io API key located on your organization settings page) The script generates a new version string from the current date and time. How you want your version string looking, is really up to you. To fetch additional information about the deployment, the Kudu deployments endpoint is requested with the current commit id. Finally, the script creates the deployment using the elmah.io REST API.","title":"Create deployments from Kudu"},{"location":"create-deployments-from-octopus-deploy/","text":"Create deployments from Octopus Deploy Notifying elmah.io of a new deployment from Octopus Deploy is supported through a custom step template. The step template can be installed in multiple ways as explained on Community step templates . In this document, the step template will be installed directly from the Process Editor : Go to the Process Editor and click the ADD STEP button. In the Choose Step Template section search for 'elmah.io': Hover over the 'elmah.io - Register Deployment' community template and click the INSTALL AND ADD button. In the Install and add modal click the SAVE button. The step template is now added to the process. Fill in your API key ( Where is my API key? ) and log ID ( Where is my log ID? ) in the step template fields and click the SAVE button: And we're done. On every new deployment, Octopus Deploy will notify elmah.io. In case you want an alternative version naming scheme, the Version field in the step template can be used to change the format.","title":"Create deployments from Octopus Deploy"},{"location":"create-deployments-from-octopus-deploy/#create-deployments-from-octopus-deploy","text":"Notifying elmah.io of a new deployment from Octopus Deploy is supported through a custom step template. The step template can be installed in multiple ways as explained on Community step templates . In this document, the step template will be installed directly from the Process Editor : Go to the Process Editor and click the ADD STEP button. In the Choose Step Template section search for 'elmah.io': Hover over the 'elmah.io - Register Deployment' community template and click the INSTALL AND ADD button. In the Install and add modal click the SAVE button. The step template is now added to the process. Fill in your API key ( Where is my API key? ) and log ID ( Where is my log ID? ) in the step template fields and click the SAVE button: And we're done. On every new deployment, Octopus Deploy will notify elmah.io. In case you want an alternative version naming scheme, the Version field in the step template can be used to change the format.","title":"Create deployments from Octopus Deploy"},{"location":"create-deployments-from-powershell/","text":"Create deployments from PowerShell If you release your software using a build or deployment server, creating the new release is easy using a bit of PowerShell. To request the deployments endpoint, write the following PowerShell script: $version = \"1.42.7\" $ProgressPreference = \"SilentlyContinue\" $url = 'https://api.elmah.io/v3/deployments?api_key=API_KEY' $body = @{ version = $version } [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 Invoke-RestMethod -Method Post -Uri $url -Body $body (replace API_KEY with your API key found on your organization settings page) In the example, a simple version string is sent to the API and elmah.io will automatically put a timestamp on that. Overriding user information and description make the experience within the elmah.io UI better. Pulling release notes and the name and email of the deployer, is usually available through environment variables or similar, depending on the technology used for creating the deployment. Here's an example of a full payload for the create deployment endpoint: $body = @{ version = \"1.0.0\" created = [datetime]::UtcNow.ToString(\"o\") description = \"my deployment\" userName = \"Thomas\" userEmail = \"thomas@elmah.io\" logId = \"39e60b0b-21b4-4d12-8f09-81f3642c64be\" } In this example, the deployment belongs to a single log why the logId property is set. The description property can be used to include a changelog or similar. Markdown is supported.","title":"Create deployments from PowerShell"},{"location":"create-deployments-from-powershell/#create-deployments-from-powershell","text":"If you release your software using a build or deployment server, creating the new release is easy using a bit of PowerShell. To request the deployments endpoint, write the following PowerShell script: $version = \"1.42.7\" $ProgressPreference = \"SilentlyContinue\" $url = 'https://api.elmah.io/v3/deployments?api_key=API_KEY' $body = @{ version = $version } [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 Invoke-RestMethod -Method Post -Uri $url -Body $body (replace API_KEY with your API key found on your organization settings page) In the example, a simple version string is sent to the API and elmah.io will automatically put a timestamp on that. Overriding user information and description make the experience within the elmah.io UI better. Pulling release notes and the name and email of the deployer, is usually available through environment variables or similar, depending on the technology used for creating the deployment. Here's an example of a full payload for the create deployment endpoint: $body = @{ version = \"1.0.0\" created = [datetime]::UtcNow.ToString(\"o\") description = \"my deployment\" userName = \"Thomas\" userEmail = \"thomas@elmah.io\" logId = \"39e60b0b-21b4-4d12-8f09-81f3642c64be\" } In this example, the deployment belongs to a single log why the logId property is set. The description property can be used to include a changelog or similar. Markdown is supported.","title":"Create deployments from PowerShell"},{"location":"create-deployments-from-umbraco-cloud/","text":"Create deployments from Umbraco Cloud Umbraco Cloud uses Azure to host Umbraco websites, so supporting deployment tracking pretty much corresponds to the steps specified in Using Kudu . Navigate to https://your-umbraco-site.scm.s1.umbraco.io where your-umbraco-site is the name of your Umbraco site. Click the Debug console link and navigate to site\\deployments\\tools\\PostDeploymentActions\\deploymenthooks (create it if it doesn't exist). Notice the folder deploymenthooks , which is required for your scripts to run on Umbraco Cloud. Unlike Kudu, Umbraco Cloud only executes cmd and bat files. Create a new cmd file: touch create-deployment.cmd with the following content: echo \"Creating elmah.io deployment\" cd %POST_DEPLOYMENT_ACTIONS_DIR% cd deploymenthooks powershell -command \". .\\create-deployment.ps1\" The script executes a PowerShell script, which we will create next: touch create-deployment.ps1 The content of the PowerShell script looks a lot like in Using Kudu , but with some minor tweaks to support Umbraco Cloud: $version = Get-Date -format u $ProgressPreference = \"SilentlyContinue\" $commitId = [System.Environment]::GetEnvironmentVariable(\"SCM_COMMIT_ID\"); $deployUrl = \"https://your-umbraco-site.scm.s1.umbraco.io/api/deployments/$commitId\" $username = \"MY_USERNAME\" $password = \"MY_PASSWORD\" $logId = \"LOG_ID\" $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes((\"{0}:{1}\" -f $username,$password))) $deployInfo = Invoke-RestMethod -Method Get -Uri $deployUrl -Headers @{Authorization=(\"Basic {0}\" -f $base64AuthInfo)} $url = 'https://api.elmah.io/v3/deployments?api_key=API_KEY' $body = @{ version = $version description = $deployInfo.message userName = $deployInfo.author userEmail = $deployInfo.author_email logId = $logId } [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 Invoke-RestMethod -Method Post -Uri $url -Body $body Replace your-umbraco-site with the name of your site, MY_USERNAME with your Umbraco Cloud username, MY_PASSWORD with your Umbraco Cloud password, LOG_ID with the id if the elmah.io log that should contain the deployments ( Where is my log ID? ), and finally API_KEY with your elmah.io API key, found and your organization settings page. There you go. When deploying changes to your Umbraco Cloud site, a new deployment is automatically created on elmah.io.","title":"Create deployments from Umbraco Cloud"},{"location":"create-deployments-from-umbraco-cloud/#create-deployments-from-umbraco-cloud","text":"Umbraco Cloud uses Azure to host Umbraco websites, so supporting deployment tracking pretty much corresponds to the steps specified in Using Kudu . Navigate to https://your-umbraco-site.scm.s1.umbraco.io where your-umbraco-site is the name of your Umbraco site. Click the Debug console link and navigate to site\\deployments\\tools\\PostDeploymentActions\\deploymenthooks (create it if it doesn't exist). Notice the folder deploymenthooks , which is required for your scripts to run on Umbraco Cloud. Unlike Kudu, Umbraco Cloud only executes cmd and bat files. Create a new cmd file: touch create-deployment.cmd with the following content: echo \"Creating elmah.io deployment\" cd %POST_DEPLOYMENT_ACTIONS_DIR% cd deploymenthooks powershell -command \". .\\create-deployment.ps1\" The script executes a PowerShell script, which we will create next: touch create-deployment.ps1 The content of the PowerShell script looks a lot like in Using Kudu , but with some minor tweaks to support Umbraco Cloud: $version = Get-Date -format u $ProgressPreference = \"SilentlyContinue\" $commitId = [System.Environment]::GetEnvironmentVariable(\"SCM_COMMIT_ID\"); $deployUrl = \"https://your-umbraco-site.scm.s1.umbraco.io/api/deployments/$commitId\" $username = \"MY_USERNAME\" $password = \"MY_PASSWORD\" $logId = \"LOG_ID\" $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes((\"{0}:{1}\" -f $username,$password))) $deployInfo = Invoke-RestMethod -Method Get -Uri $deployUrl -Headers @{Authorization=(\"Basic {0}\" -f $base64AuthInfo)} $url = 'https://api.elmah.io/v3/deployments?api_key=API_KEY' $body = @{ version = $version description = $deployInfo.message userName = $deployInfo.author userEmail = $deployInfo.author_email logId = $logId } [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 Invoke-RestMethod -Method Post -Uri $url -Body $body Replace your-umbraco-site with the name of your site, MY_USERNAME with your Umbraco Cloud username, MY_PASSWORD with your Umbraco Cloud password, LOG_ID with the id if the elmah.io log that should contain the deployments ( Where is my log ID? ), and finally API_KEY with your elmah.io API key, found and your organization settings page. There you go. When deploying changes to your Umbraco Cloud site, a new deployment is automatically created on elmah.io.","title":"Create deployments from Umbraco Cloud"},{"location":"creating-rules-to-perform-actions-on-messages/","text":"Creating Rules to Perform Actions on Messages elmah.io comes with a great rule engine for performing various actions when messages are logged in your log. This guide is also available as a short video tutorial here: The rule engine is located beneath each log on the log settings page: A rule consists of three parts: a title, a query, and an action. The title should be a short text explaining what this rule does. We don't use the title for anything, so please write something that helps you identify rules and keep them apart. The query should contain either a full-text search string or a Lucene query. When new messages are logged, the message is matched up against all queries registered on that log. If and only if a message matches a query, the action registered on the rule is performed. As mentioned above, the action part of a rule is executed when a message matches the query specified in the same rule. An action can be one of six types: Ignore, Hide, Mail, HTTP Request, Mark as bot, and Mark as fixed. To illustrate how to use each action type, here are six examples of useful rules. Ignore errors with an HTTP status code of 400 Note Be aware that Ignore rules are only meant as a temporary way of ignoring messages. In case you want to permanently ignore one or more log messages, use client-side filtering as explained in the documentation for each client integration. In addition, there's a client-side filtering help dialog available on the log message details toolbar. Ignoring a large number of messages with Ignore rules will slow down your application logging, use unnecessary network bandwidth, and risk hitting the elmah.io API request limit. To ignore all messages with an HTTP status code of 400, you would need to set up the following: Title Query Then Ignore 400s statusCode:400 Ignore The rule would look like this in the UI: Hide warnings To hide all messages with a severity of Warning , you would need to set up the following: Title Query Then Hide Warnings severity:Warning Hide The rule would look like this in the UI: Send an email on all messages containing a word To send an email on all messages containing the word billing somewhere, you would need to set up the following: Title Query Then Mail on billing billing Email The rule would look like this in the UI: Make an HTTP request on all new and fatal messages To make an HTTP request on every new message with a severity of Fatal , you would need to set up the following: Title Query Then Request on new fatal isNew:true AND severity:Fatal HTTP The rule would look like this in the UI: Mark log messages from IP as bot To mark log messages generated from an IP range with the isBot flag, you would need to set up the following: Title Query Then Mark IP as bot remoteAddr:172.253.63.* Mark as bot The rule would look like this in the UI: Mark Debug log messages as fixed To mark log messages with a severity of Debug as fixed, you would need to set up the following: Title Query Then Mark Debug as fixed severity:Debug Mark as fixed The rule would look like this in the UI:","title":"Creating Rules to Perform Actions on Messages"},{"location":"creating-rules-to-perform-actions-on-messages/#creating-rules-to-perform-actions-on-messages","text":"elmah.io comes with a great rule engine for performing various actions when messages are logged in your log. This guide is also available as a short video tutorial here: The rule engine is located beneath each log on the log settings page: A rule consists of three parts: a title, a query, and an action. The title should be a short text explaining what this rule does. We don't use the title for anything, so please write something that helps you identify rules and keep them apart. The query should contain either a full-text search string or a Lucene query. When new messages are logged, the message is matched up against all queries registered on that log. If and only if a message matches a query, the action registered on the rule is performed. As mentioned above, the action part of a rule is executed when a message matches the query specified in the same rule. An action can be one of six types: Ignore, Hide, Mail, HTTP Request, Mark as bot, and Mark as fixed. To illustrate how to use each action type, here are six examples of useful rules.","title":"Creating Rules to Perform Actions on Messages"},{"location":"creating-rules-to-perform-actions-on-messages/#ignore-errors-with-an-http-status-code-of-400","text":"Note Be aware that Ignore rules are only meant as a temporary way of ignoring messages. In case you want to permanently ignore one or more log messages, use client-side filtering as explained in the documentation for each client integration. In addition, there's a client-side filtering help dialog available on the log message details toolbar. Ignoring a large number of messages with Ignore rules will slow down your application logging, use unnecessary network bandwidth, and risk hitting the elmah.io API request limit. To ignore all messages with an HTTP status code of 400, you would need to set up the following: Title Query Then Ignore 400s statusCode:400 Ignore The rule would look like this in the UI:","title":"Ignore errors with an HTTP status code of 400"},{"location":"creating-rules-to-perform-actions-on-messages/#hide-warnings","text":"To hide all messages with a severity of Warning , you would need to set up the following: Title Query Then Hide Warnings severity:Warning Hide The rule would look like this in the UI:","title":"Hide warnings"},{"location":"creating-rules-to-perform-actions-on-messages/#send-an-email-on-all-messages-containing-a-word","text":"To send an email on all messages containing the word billing somewhere, you would need to set up the following: Title Query Then Mail on billing billing Email The rule would look like this in the UI:","title":"Send an email on all messages containing a word"},{"location":"creating-rules-to-perform-actions-on-messages/#make-an-http-request-on-all-new-and-fatal-messages","text":"To make an HTTP request on every new message with a severity of Fatal , you would need to set up the following: Title Query Then Request on new fatal isNew:true AND severity:Fatal HTTP The rule would look like this in the UI:","title":"Make an HTTP request on all new and fatal messages"},{"location":"creating-rules-to-perform-actions-on-messages/#mark-log-messages-from-ip-as-bot","text":"To mark log messages generated from an IP range with the isBot flag, you would need to set up the following: Title Query Then Mark IP as bot remoteAddr:172.253.63.* Mark as bot The rule would look like this in the UI:","title":"Mark log messages from IP as bot"},{"location":"creating-rules-to-perform-actions-on-messages/#mark-debug-log-messages-as-fixed","text":"To mark log messages with a severity of Debug as fixed, you would need to set up the following: Title Query Then Mark Debug as fixed severity:Debug Mark as fixed The rule would look like this in the UI:","title":"Mark Debug log messages as fixed"},{"location":"elmah-and-custom-errors/","text":"ELMAH and custom errors ELMAH and ASP.NET (MVC) custom errors aren't exactly known to be best friends. Question after question has been posted on forums like Stack Overflow, from people having problems with ELMAH, when custom errors are configured. These problems make perfect sense since both ELMAH and custom errors are designed to catch errors and do something about them. Before looking at some code, we recommend you to read Web.config customErrors element with ASP.NET explained and Demystifying ASP.NET MVC 5 Error Pages and Error Logging . Together, the posts are a great introduction to different ways of implementing custom error pages in ASP.NET MVC. Back to ELMAH. In most implementations of custom error pages, ASP.NET swallows any uncaught exceptions, putting ELMAH out of play. To overcome this issue, you can utilize MVC's IExceptionFilter to log all exceptions, whether or not it is handled by a custom error page: public class ElmahExceptionLogger : IExceptionFilter { public void OnException (ExceptionContext context) { if (context.ExceptionHandled) { ErrorSignal.FromCurrentContext().Raise(context.Exception); } } } The OnException method on ElmahExceptionLogger is executed every time an error is happening, by registering it in Application_Start : protected void Application_Start() { // ... GlobalConfiguration.Configuration.Filters.Add(new ElmahExceptionLogger()); // ... }","title":"ELMAH and custom errors"},{"location":"elmah-and-custom-errors/#elmah-and-custom-errors","text":"ELMAH and ASP.NET (MVC) custom errors aren't exactly known to be best friends. Question after question has been posted on forums like Stack Overflow, from people having problems with ELMAH, when custom errors are configured. These problems make perfect sense since both ELMAH and custom errors are designed to catch errors and do something about them. Before looking at some code, we recommend you to read Web.config customErrors element with ASP.NET explained and Demystifying ASP.NET MVC 5 Error Pages and Error Logging . Together, the posts are a great introduction to different ways of implementing custom error pages in ASP.NET MVC. Back to ELMAH. In most implementations of custom error pages, ASP.NET swallows any uncaught exceptions, putting ELMAH out of play. To overcome this issue, you can utilize MVC's IExceptionFilter to log all exceptions, whether or not it is handled by a custom error page: public class ElmahExceptionLogger : IExceptionFilter { public void OnException (ExceptionContext context) { if (context.ExceptionHandled) { ErrorSignal.FromCurrentContext().Raise(context.Exception); } } } The OnException method on ElmahExceptionLogger is executed every time an error is happening, by registering it in Application_Start : protected void Application_Start() { // ... GlobalConfiguration.Configuration.Filters.Add(new ElmahExceptionLogger()); // ... }","title":"ELMAH and custom errors"},{"location":"elmah-and-elmah-io-differences/","text":"ELMAH and elmah.io differences We receive a lot of questions like these: What is the difference between ELMAH and elmah.io? I thought ELMAH was free. Why do you suddenly charge? My ELMAH SQL Server configuration doesn't work. Why not? We understand the confusion. The purpose of this article is to give a bit of background on the differences between ELMAH and elmah.io and why they share similar names. What is ELMAH? ELMAH is an error logging framework originally developed by Atif Aziz in 2004 able to log all unhandled exceptions from .NET web applications. Errors can be logged to a variety of destinations through ELMAH's plugin model called error logs. Plugins for XML, SQL Server, MySQL, Elasticsearch, and many more exist. ELMAH automatically collects a lot of information from the HTTP context when logging the error, giving you the possibility to inspect request parameters, cookies, and much more for the failed request. Custom errors can be logged to ELMAH, by manually calling the error log. What is elmah.io? elmah.io is a cloud-based error management system originally developed on top of ELMAH (see history for details). Besides supporting ELMAH, elmah.io also integrates with popular logging frameworks like log4net , NLog , Serilog , and web frameworks like ASP.NET Core . elmah.io offers a superior notification model to ELMAH, with integrations to mail, Slack, Microsoft Teams, and many others. elmah.io also built a lot of features outside the scope of ELMAH, like a complete uptime monitoring system. Comparison Feature ELMAH elmah.io Error Logging \u2705 \u2705 Self-hosted \u2705 \u274c Cloud-hosted \u274c \u2705 Search \u274c \u2705 New error detection \u274c \u2705 Error grouping \u274c \u2705 Issue tracking \u274c \u2705 log4net / NLog / Serilog \u274c \u2705 Clientside error logging \u274c \u2705 Slack/Teams/HipChat/etc. \u274c \u2705 Deployment tracking \u274c \u2705 Uptime monitoring \u274c \u2705 Heartbeats \u274c \u2705 Machine learning \u274c \u2705 Discount on popular software \u274c \u2705 History So, why name a service elmah.io, when only a minor part of a client integration uses ELMAH? When Thomas Ardal introduced elmah.io back in 2013, the intention was to create a cloud-based error logger for ELMAH. We had some simple search and graphing possibilities, but the platform was meant as an alternative to host your own error logs in SQL Server or similar. In time, elmah.io grew from being a hobby project to an actual company. During those years, we realized that the potential of the platform exceeded the possibilities with ELMAH in many ways. New features not available in ELMAH have been added constantly. A process that would have been nearly impossible with ELMAH's many storage integrations. Today, elmah.io is a full error management system for everything from console applications to web apps and serverless code hosted on Azure or AWS. We've built an entire uptime monitoring system, able to monitor not only if your website fails but also if it even responds to requests. Why not change the name to something else, you may be thinking? That is our wish as well. But changing your SaaS (software-as-a-service) company name isn't exactly easy. We have tried a couple of times, the first time back in 2016. We tried to name the different major features of elmah.io to sea creatures (like Stingray). We failed with the rename and people got confused. In 2017, we started looking at renaming the product again. This time to Unbug. We had learned from our previous mistake and this time silently started changing the name. We quickly realized that the domain change would cause a major risk in regards to SEO (search engine optimization) and confusion. For now, we are elmah.io. The name is not ideal, but it's a lesson learned for another time :)","title":"ELMAH and elmah.io differences"},{"location":"elmah-and-elmah-io-differences/#elmah-and-elmahio-differences","text":"We receive a lot of questions like these: What is the difference between ELMAH and elmah.io? I thought ELMAH was free. Why do you suddenly charge? My ELMAH SQL Server configuration doesn't work. Why not? We understand the confusion. The purpose of this article is to give a bit of background on the differences between ELMAH and elmah.io and why they share similar names.","title":"ELMAH and elmah.io differences"},{"location":"elmah-and-elmah-io-differences/#what-is-elmah","text":"ELMAH is an error logging framework originally developed by Atif Aziz in 2004 able to log all unhandled exceptions from .NET web applications. Errors can be logged to a variety of destinations through ELMAH's plugin model called error logs. Plugins for XML, SQL Server, MySQL, Elasticsearch, and many more exist. ELMAH automatically collects a lot of information from the HTTP context when logging the error, giving you the possibility to inspect request parameters, cookies, and much more for the failed request. Custom errors can be logged to ELMAH, by manually calling the error log.","title":"What is ELMAH?"},{"location":"elmah-and-elmah-io-differences/#what-is-elmahio","text":"elmah.io is a cloud-based error management system originally developed on top of ELMAH (see history for details). Besides supporting ELMAH, elmah.io also integrates with popular logging frameworks like log4net , NLog , Serilog , and web frameworks like ASP.NET Core . elmah.io offers a superior notification model to ELMAH, with integrations to mail, Slack, Microsoft Teams, and many others. elmah.io also built a lot of features outside the scope of ELMAH, like a complete uptime monitoring system.","title":"What is elmah.io?"},{"location":"elmah-and-elmah-io-differences/#comparison","text":"Feature ELMAH elmah.io Error Logging \u2705 \u2705 Self-hosted \u2705 \u274c Cloud-hosted \u274c \u2705 Search \u274c \u2705 New error detection \u274c \u2705 Error grouping \u274c \u2705 Issue tracking \u274c \u2705 log4net / NLog / Serilog \u274c \u2705 Clientside error logging \u274c \u2705 Slack/Teams/HipChat/etc. \u274c \u2705 Deployment tracking \u274c \u2705 Uptime monitoring \u274c \u2705 Heartbeats \u274c \u2705 Machine learning \u274c \u2705 Discount on popular software \u274c \u2705","title":"Comparison"},{"location":"elmah-and-elmah-io-differences/#history","text":"So, why name a service elmah.io, when only a minor part of a client integration uses ELMAH? When Thomas Ardal introduced elmah.io back in 2013, the intention was to create a cloud-based error logger for ELMAH. We had some simple search and graphing possibilities, but the platform was meant as an alternative to host your own error logs in SQL Server or similar. In time, elmah.io grew from being a hobby project to an actual company. During those years, we realized that the potential of the platform exceeded the possibilities with ELMAH in many ways. New features not available in ELMAH have been added constantly. A process that would have been nearly impossible with ELMAH's many storage integrations. Today, elmah.io is a full error management system for everything from console applications to web apps and serverless code hosted on Azure or AWS. We've built an entire uptime monitoring system, able to monitor not only if your website fails but also if it even responds to requests. Why not change the name to something else, you may be thinking? That is our wish as well. But changing your SaaS (software-as-a-service) company name isn't exactly easy. We have tried a couple of times, the first time back in 2016. We tried to name the different major features of elmah.io to sea creatures (like Stingray). We failed with the rename and people got confused. In 2017, we started looking at renaming the product again. This time to Unbug. We had learned from our previous mistake and this time silently started changing the name. We quickly realized that the domain change would cause a major risk in regards to SEO (search engine optimization) and confusion. For now, we are elmah.io. The name is not ideal, but it's a lesson learned for another time :)","title":"History"},{"location":"elmah-io-apps-azure-boards/","text":"Install Azure Boards App for elmah.io Get your personal access token To create bugs on Azure Boards, you will need to generate a personal access token. Go to Azure DevOps and click the User settings icon in the top right corner. Select the Personal access tokens menu item in the dropdown. Finally, click the New Token button and fill in the details as shown below: For this example, we have picked a 90-day expiration period, but you can decide on a shorter or longer period if you'd like. Remember to enable the Read & write scope under Work Items . Next, click the Create button and copy the generated token. Note Bugs created by elmah.io will have the CreatedBy set to the user generating the personal access token. If you want to identify bugs created by elmah.io, you should create the token from a new user (like elmahio@yourdomain.com). Install the Azure Boards App on elmah.io Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Azure Boards app and click the Install button: Paste the token copied in the previous step into the Token textbox. In the Organization textbox, input the name of your organization. For https://dev.azure.com/myorg/myproject, the organization name would be myorg . In the Project textbox, input the name of the project containing your board. For https://dev.azure.com/myorg/myproject, the project name would be myproject . The Type dropdown will allow you to select another work item template than Bug . This will decide how the created issues from elmah.io are shown inside the Azure Boards UI. Bug and Task are available in most processes. User Story is part of the Agile process while Product Backlog Item is part of the Scrum process. So, pick according to the process you have configured on the selected project. If you want to embed all bugs created by the app beneath an overall work item, epic, or similar, fill in the optional ID in the Parent field. Click Save and the app is added to your log. When new errors are logged, bugs are automatically created in the configured Azure Board.","title":"Azure Boards"},{"location":"elmah-io-apps-azure-boards/#install-azure-boards-app-for-elmahio","text":"","title":"Install Azure Boards App for elmah.io"},{"location":"elmah-io-apps-azure-boards/#get-your-personal-access-token","text":"To create bugs on Azure Boards, you will need to generate a personal access token. Go to Azure DevOps and click the User settings icon in the top right corner. Select the Personal access tokens menu item in the dropdown. Finally, click the New Token button and fill in the details as shown below: For this example, we have picked a 90-day expiration period, but you can decide on a shorter or longer period if you'd like. Remember to enable the Read & write scope under Work Items . Next, click the Create button and copy the generated token. Note Bugs created by elmah.io will have the CreatedBy set to the user generating the personal access token. If you want to identify bugs created by elmah.io, you should create the token from a new user (like elmahio@yourdomain.com).","title":"Get your personal access token"},{"location":"elmah-io-apps-azure-boards/#install-the-azure-boards-app-on-elmahio","text":"Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Azure Boards app and click the Install button: Paste the token copied in the previous step into the Token textbox. In the Organization textbox, input the name of your organization. For https://dev.azure.com/myorg/myproject, the organization name would be myorg . In the Project textbox, input the name of the project containing your board. For https://dev.azure.com/myorg/myproject, the project name would be myproject . The Type dropdown will allow you to select another work item template than Bug . This will decide how the created issues from elmah.io are shown inside the Azure Boards UI. Bug and Task are available in most processes. User Story is part of the Agile process while Product Backlog Item is part of the Scrum process. So, pick according to the process you have configured on the selected project. If you want to embed all bugs created by the app beneath an overall work item, epic, or similar, fill in the optional ID in the Parent field. Click Save and the app is added to your log. When new errors are logged, bugs are automatically created in the configured Azure Board.","title":"Install the Azure Boards App on elmah.io"},{"location":"elmah-io-apps-bitbucket/","text":"Install Bitbucket App for elmah.io Get your App password To allow elmah.io to create issues on Bitbucket, you will need an App password. App passwords can be generated by clicking your user in the top right corner and selecting Personal settings . In the left menu, click the App passwords page ( https://bitbucket.org/account/settings/app-passwords/ ). To create a new password, click the Create app password button and input the following information: elmah.io only need the Issues - Write permission to create issues. To test the inputted values on elmah.io (later step) also check the Repositories - Read permission. After clicking the Create button, copy the generated app password. Install the Bitbucket App on elmah.io Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Bitbucket app and click the Install button: Paste the App password copied in the previous step into the APP PASSWORD textbox. In the TEAM textbox, input the name of the team/workspace owning the repository you want to create issues in. In the REPOSITORY textbox input the name of the repository. In the USERNAME textbox, input the name of the user generating the App password. In older installations, this can also contain the team/workspace name. Click Save and the app is added to your log. When new errors are logged, issues are automatically created in the configured Bitbucket repository.","title":"Bitbucket"},{"location":"elmah-io-apps-bitbucket/#install-bitbucket-app-for-elmahio","text":"","title":"Install Bitbucket App for elmah.io"},{"location":"elmah-io-apps-bitbucket/#get-your-app-password","text":"To allow elmah.io to create issues on Bitbucket, you will need an App password. App passwords can be generated by clicking your user in the top right corner and selecting Personal settings . In the left menu, click the App passwords page ( https://bitbucket.org/account/settings/app-passwords/ ). To create a new password, click the Create app password button and input the following information: elmah.io only need the Issues - Write permission to create issues. To test the inputted values on elmah.io (later step) also check the Repositories - Read permission. After clicking the Create button, copy the generated app password.","title":"Get your App password"},{"location":"elmah-io-apps-bitbucket/#install-the-bitbucket-app-on-elmahio","text":"Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Bitbucket app and click the Install button: Paste the App password copied in the previous step into the APP PASSWORD textbox. In the TEAM textbox, input the name of the team/workspace owning the repository you want to create issues in. In the REPOSITORY textbox input the name of the repository. In the USERNAME textbox, input the name of the user generating the App password. In older installations, this can also contain the team/workspace name. Click Save and the app is added to your log. When new errors are logged, issues are automatically created in the configured Bitbucket repository.","title":"Install the Bitbucket App on elmah.io"},{"location":"elmah-io-apps-botbuster/","text":"Install BotBuster App for elmah.io Warning The BotBuster app is deprecated. Enable the Filter Crawlers toggle on the Filters tab to ignore errors generated by crawlers. The BotBuster app for elmah.io identifies and ignores messages generated by white hat bots like spiders, search engine bots, and similar. Under normal circumstances, you want to allow access for white hat bots, but you don't want to get a notification every time one of them tries to request a resource not found on the server. Installing BotBuster couldn't be simpler. Log into elmah.io and go to the log settings. Click the Apps tab. Locate the BotBuster app and click the Install button.","title":"BotBuster (deprecated)"},{"location":"elmah-io-apps-botbuster/#install-botbuster-app-for-elmahio","text":"Warning The BotBuster app is deprecated. Enable the Filter Crawlers toggle on the Filters tab to ignore errors generated by crawlers. The BotBuster app for elmah.io identifies and ignores messages generated by white hat bots like spiders, search engine bots, and similar. Under normal circumstances, you want to allow access for white hat bots, but you don't want to get a notification every time one of them tries to request a resource not found on the server. Installing BotBuster couldn't be simpler. Log into elmah.io and go to the log settings. Click the Apps tab. Locate the BotBuster app and click the Install button.","title":"Install BotBuster App for elmah.io"},{"location":"elmah-io-apps-chatgpt/","text":"Install ChatGPT for elmah.io Log into elmah.io and go to the log settings. Click the Apps tab. Locate the ChatGPT app and click the Install button: The app supports two hosting models for ChatGPT. You can either bring your own OpenAI API key or use a model hosted by us (available on the Enterprise plan). Both options currently support GPT-3.5-Turbo, GPT-4, GPT-4o, and GPT-4o mini. To use OpenAI, select one of the models prefixed with 'OpenAI' and input your API key ( Where do I find my OpenAI API Key? ). If you prefer a restricted API key, make sure to enable the Model capabilities resource: To use a model hosted by us, select one of the models prefixed with 'elmah.io'. When picking this option, your data will never leave our data center since the model is hosted directly on Azure. As a default, elmah.io will only share the stack trace and a few other properties of an error with ChatGPT when you click the Get suggestion button in the elmah.io UI. If you want to include the source code, attached SQL, and/or breadcrumbs, you can enable one or more toggles. Sharing the source will require you to bundle your source code alongside errors as documented here: How to include source code in log messages . Click Save and the app is added to your log. When you open errors valid for ChatGPT help, you will see a tab named AI next to Detail , Inspector , etc.","title":"ChatGPT"},{"location":"elmah-io-apps-chatgpt/#install-chatgpt-for-elmahio","text":"Log into elmah.io and go to the log settings. Click the Apps tab. Locate the ChatGPT app and click the Install button: The app supports two hosting models for ChatGPT. You can either bring your own OpenAI API key or use a model hosted by us (available on the Enterprise plan). Both options currently support GPT-3.5-Turbo, GPT-4, GPT-4o, and GPT-4o mini. To use OpenAI, select one of the models prefixed with 'OpenAI' and input your API key ( Where do I find my OpenAI API Key? ). If you prefer a restricted API key, make sure to enable the Model capabilities resource: To use a model hosted by us, select one of the models prefixed with 'elmah.io'. When picking this option, your data will never leave our data center since the model is hosted directly on Azure. As a default, elmah.io will only share the stack trace and a few other properties of an error with ChatGPT when you click the Get suggestion button in the elmah.io UI. If you want to include the source code, attached SQL, and/or breadcrumbs, you can enable one or more toggles. Sharing the source will require you to bundle your source code alongside errors as documented here: How to include source code in log messages . Click Save and the app is added to your log. When you open errors valid for ChatGPT help, you will see a tab named AI next to Detail , Inspector , etc.","title":"Install ChatGPT for elmah.io"},{"location":"elmah-io-apps-clickup/","text":"Install ClickUp for elmah.io Log in to elmah.io and go to the log settings page. Click the Apps tab. Locate the ClickUp app and click the Install button: You will need to input a ClickUp API token and the ID of the list to create tasks. The API token can be generated by navigating to ClickUp, clicking the profile photo in the bottom left corner, and clicking Apps . It is important to click the Apps link beneath your profile and not the ClickApps link beneath the team. On the Apps page, you can generate and copy a new token beneath the API Token section. The list ID can be found by going to the list on the ClickUp app and clicking the list name: When copying the link, you will get a link similar to this: https://app.clickup.com/.../v/li/901200300647 The list ID is the last part of the URL ( 901200300647 in the example above). When both the API token and list ID are inputted on elmah.io, click the Test button to test the values. When the Test button turns green, click the Save button, and the app is added to your log. When new errors are logged, tasks are automatically created in the configured ClickUp list. ClickUp Troubleshooting If errors aren't showing up in ClickUp, please check that the following are all true: When clicking the Test button on the ClickUp app settings screen, the button turns green. There's a message logged in the log where you set up the ClickUp integration. The message is marked as new (yellow star next to the title on the search result). The message is either of severity Error or Fatal . To trigger an error manually, go to https://api.elmah.io/swagger/index.html and input an elmah.io API key with the Messages - Write permission enabled. Expand Messages and the POST node with the URL /v3/messages/{logId} . Input your log ID and the following JSON: { \"title\": \"This is a test\", \"severity\": \"Error\" } Finally, click the Try it out! button and verify that the API returns a status code of 201 . The new error should show up in ClickUp. If testing this multiple times, you will need to make small adjustments to the title field inside the JSON for additional errors to be marked as new.","title":"ClickUp"},{"location":"elmah-io-apps-clickup/#install-clickup-for-elmahio","text":"Log in to elmah.io and go to the log settings page. Click the Apps tab. Locate the ClickUp app and click the Install button: You will need to input a ClickUp API token and the ID of the list to create tasks. The API token can be generated by navigating to ClickUp, clicking the profile photo in the bottom left corner, and clicking Apps . It is important to click the Apps link beneath your profile and not the ClickApps link beneath the team. On the Apps page, you can generate and copy a new token beneath the API Token section. The list ID can be found by going to the list on the ClickUp app and clicking the list name: When copying the link, you will get a link similar to this: https://app.clickup.com/.../v/li/901200300647 The list ID is the last part of the URL ( 901200300647 in the example above). When both the API token and list ID are inputted on elmah.io, click the Test button to test the values. When the Test button turns green, click the Save button, and the app is added to your log. When new errors are logged, tasks are automatically created in the configured ClickUp list.","title":"Install ClickUp for elmah.io"},{"location":"elmah-io-apps-clickup/#clickup-troubleshooting","text":"If errors aren't showing up in ClickUp, please check that the following are all true: When clicking the Test button on the ClickUp app settings screen, the button turns green. There's a message logged in the log where you set up the ClickUp integration. The message is marked as new (yellow star next to the title on the search result). The message is either of severity Error or Fatal . To trigger an error manually, go to https://api.elmah.io/swagger/index.html and input an elmah.io API key with the Messages - Write permission enabled. Expand Messages and the POST node with the URL /v3/messages/{logId} . Input your log ID and the following JSON: { \"title\": \"This is a test\", \"severity\": \"Error\" } Finally, click the Try it out! button and verify that the API returns a status code of 201 . The new error should show up in ClickUp. If testing this multiple times, you will need to make small adjustments to the title field inside the JSON for additional errors to be marked as new.","title":"ClickUp Troubleshooting"},{"location":"elmah-io-apps-fixes/","text":"Install Fixes for elmah.io The Fixes app will show quick fixes and/or Stack Overflow answers related to the current log message on the extended details view. This app is installed on all logs as a default, but can be disabled if you want to disable one or both sections. Log in to elmah.io and go to the log settings page. Click the Apps tab. Locate the Fixes app and click the Install button: The app contains two toggles through which you can enable/disable both the Quick Fixes and the Stack Overflow view. Disabling one or both of the toggles will hide the corresponding section from the UI. Click Save and the app is added to your log. Only enabled sections will be shown when you open the extended details view. No requests are made to Stack Overflow if the SHOW STACK OVERFLOW toggle is disabled.","title":"Fixes"},{"location":"elmah-io-apps-fixes/#install-fixes-for-elmahio","text":"The Fixes app will show quick fixes and/or Stack Overflow answers related to the current log message on the extended details view. This app is installed on all logs as a default, but can be disabled if you want to disable one or both sections. Log in to elmah.io and go to the log settings page. Click the Apps tab. Locate the Fixes app and click the Install button: The app contains two toggles through which you can enable/disable both the Quick Fixes and the Stack Overflow view. Disabling one or both of the toggles will hide the corresponding section from the UI. Click Save and the app is added to your log. Only enabled sections will be shown when you open the extended details view. No requests are made to Stack Overflow if the SHOW STACK OVERFLOW toggle is disabled.","title":"Install Fixes for elmah.io"},{"location":"elmah-io-apps-github/","text":"Install GitHub App for elmah.io Generate Personal Access Token To allow elmah.io to create issues on GitHub, you need a Personal Access Token. Sign in to GitHub, click your profile photo in the top right corner, and click Settings . On the Settings page click Developer settings followed by Personal access token . Here you can create a new token by clicking the Generate new token (classic) button: Input a token note and select an expiration date. If the repository you want issues created in is public, make sure to check the public_repo checkbox. If the repository is private, check the repo checkbox. Finally, click the Generate token button, and copy the generated token (colored with a green background) GitHub also supports fine-grained personal access tokens. This token can also be used on elmah.io. Make sure to select Read and write in the Issues permission. Install the GitHub App on elmah.io Log into elmah.io and go to the log settings. Click the Apps tab. Locate the GitHub app and click the Install button: Paste the token copied in the previous step into the Token textbox. In the Owner textbox, input the name of the user or organization owning the repository you want to create issues in. In the Repository textbox input the name of the repository. Click Save and the app is added to your log. When new errors are logged, issues are automatically created in the configured GitHub repository.","title":"GitHub"},{"location":"elmah-io-apps-github/#install-github-app-for-elmahio","text":"","title":"Install GitHub App for elmah.io"},{"location":"elmah-io-apps-github/#generate-personal-access-token","text":"To allow elmah.io to create issues on GitHub, you need a Personal Access Token. Sign in to GitHub, click your profile photo in the top right corner, and click Settings . On the Settings page click Developer settings followed by Personal access token . Here you can create a new token by clicking the Generate new token (classic) button: Input a token note and select an expiration date. If the repository you want issues created in is public, make sure to check the public_repo checkbox. If the repository is private, check the repo checkbox. Finally, click the Generate token button, and copy the generated token (colored with a green background) GitHub also supports fine-grained personal access tokens. This token can also be used on elmah.io. Make sure to select Read and write in the Issues permission.","title":"Generate Personal Access Token"},{"location":"elmah-io-apps-github/#install-the-github-app-on-elmahio","text":"Log into elmah.io and go to the log settings. Click the Apps tab. Locate the GitHub app and click the Install button: Paste the token copied in the previous step into the Token textbox. In the Owner textbox, input the name of the user or organization owning the repository you want to create issues in. In the Repository textbox input the name of the repository. Click Save and the app is added to your log. When new errors are logged, issues are automatically created in the configured GitHub repository.","title":"Install the GitHub App on elmah.io"},{"location":"elmah-io-apps-gitlab/","text":"Install GitLab App for elmah.io Generate Personal Access Token To allow elmah.io to create issues on GitLab, you will need to generate a Personal Access Token. To do so, log into GitLab, click your profile photo in the top right corner, and select Preferences . On the Preferences page click the Access Tokens menu item: Input a token name, expiration date, and check the api checkbox. Click the Create personal access token button and copy the generated token. Install the GitLab App on elmah.io Log into elmah.io and go to the log settings. Click the Apps tab. Locate the GitLab app and click the Install button: Paste the token copied in the previous step into the Token textbox. In the Project textbox, input the ID or name of the project you want issues created on. If you are self-hosting GitLab, input your custom URL in the URL textbox (for example https://gitlab.hooli.com). Click the Test button and observe it turn green. When clicking Save , the app is added to your log. When new errors are logged, issues are automatically created in the configured GitLab project.","title":"GitLab"},{"location":"elmah-io-apps-gitlab/#install-gitlab-app-for-elmahio","text":"","title":"Install GitLab App for elmah.io"},{"location":"elmah-io-apps-gitlab/#generate-personal-access-token","text":"To allow elmah.io to create issues on GitLab, you will need to generate a Personal Access Token. To do so, log into GitLab, click your profile photo in the top right corner, and select Preferences . On the Preferences page click the Access Tokens menu item: Input a token name, expiration date, and check the api checkbox. Click the Create personal access token button and copy the generated token.","title":"Generate Personal Access Token"},{"location":"elmah-io-apps-gitlab/#install-the-gitlab-app-on-elmahio","text":"Log into elmah.io and go to the log settings. Click the Apps tab. Locate the GitLab app and click the Install button: Paste the token copied in the previous step into the Token textbox. In the Project textbox, input the ID or name of the project you want issues created on. If you are self-hosting GitLab, input your custom URL in the URL textbox (for example https://gitlab.hooli.com). Click the Test button and observe it turn green. When clicking Save , the app is added to your log. When new errors are logged, issues are automatically created in the configured GitLab project.","title":"Install the GitLab App on elmah.io"},{"location":"elmah-io-apps-hipchat/","text":"Install HipChat App for elmah.io Warning The Hipchat application was discontinued by Atlassian in 2019. We no longer support this integration either. Generate OAuth 2 Token To allow elmah.io to log messages to HipChat, you will need to generate an OAuth 2 token. To do so, log into HipChat and go to the API Access page (like https://elmahio.hipchat.com/account/api and replace elmahio with your subdomain). Input a label, click the Create button and copy the generated token. Note If you want to test your configuration using the Test button on the elmah.io UI, you will need to select both Send Notification and View Room in Scopes . Install the HipChat App on elmah.io Log into elmah.io and go to the log settings. Click the Apps tab. Locate the HipChat app and click the Install button: Paste the token copied in the previous step into the Token textbox. In the Room textbox, input the name of the HipChat chat room you want messages from elmah.io to show up in. Click Save and the app is added to your log. When new errors are logged, messages start appearing in the chat room that you configured. Note HipChat doesn't allow more than 500 requests per 5 minutes. If you generate more messages to elmah.io, not all of them will show up in HipChat because of this.","title":"HipChat"},{"location":"elmah-io-apps-hipchat/#install-hipchat-app-for-elmahio","text":"Warning The Hipchat application was discontinued by Atlassian in 2019. We no longer support this integration either.","title":"Install HipChat App for elmah.io"},{"location":"elmah-io-apps-hipchat/#generate-oauth-2-token","text":"To allow elmah.io to log messages to HipChat, you will need to generate an OAuth 2 token. To do so, log into HipChat and go to the API Access page (like https://elmahio.hipchat.com/account/api and replace elmahio with your subdomain). Input a label, click the Create button and copy the generated token. Note If you want to test your configuration using the Test button on the elmah.io UI, you will need to select both Send Notification and View Room in Scopes .","title":"Generate OAuth 2 Token"},{"location":"elmah-io-apps-hipchat/#install-the-hipchat-app-on-elmahio","text":"Log into elmah.io and go to the log settings. Click the Apps tab. Locate the HipChat app and click the Install button: Paste the token copied in the previous step into the Token textbox. In the Room textbox, input the name of the HipChat chat room you want messages from elmah.io to show up in. Click Save and the app is added to your log. When new errors are logged, messages start appearing in the chat room that you configured. Note HipChat doesn't allow more than 500 requests per 5 minutes. If you generate more messages to elmah.io, not all of them will show up in HipChat because of this.","title":"Install the HipChat App on elmah.io"},{"location":"elmah-io-apps-ipfilter/","text":"Install IP Filter App for elmah.io Warning The IP Filter app is deprecated. The IP Filter filter on the Filters tab offers more advanced IP filtering. The IP Filter app for elmah.io automatically ignores messages from one or more IP addresses. This is a great way to ignore errors generated by both crawlers and errors generated by you. To install IP Filter, click the Install button on the Apps tab. This will show the IP Filter settings page: To ignore messages from a single IP address, input the IP in both the From and To fields. To ignore messages from a range of IP addresses, input the start and end IP address in the From and To fields. Both IP addresses are included in the ignored range. The IP Filter app ignores every message matching the specified IP range. This means that if you are logging something like Information messages through Serilog or similar, these messages are also ignored. For a message to have an IP, you will need to specify a server variable named REMOTE_ADDR when creating the message. This variable is automatically added (if available) when using the integration for ELMAH.","title":"IP Filter (deprecated)"},{"location":"elmah-io-apps-ipfilter/#install-ip-filter-app-for-elmahio","text":"Warning The IP Filter app is deprecated. The IP Filter filter on the Filters tab offers more advanced IP filtering. The IP Filter app for elmah.io automatically ignores messages from one or more IP addresses. This is a great way to ignore errors generated by both crawlers and errors generated by you. To install IP Filter, click the Install button on the Apps tab. This will show the IP Filter settings page: To ignore messages from a single IP address, input the IP in both the From and To fields. To ignore messages from a range of IP addresses, input the start and end IP address in the From and To fields. Both IP addresses are included in the ignored range. The IP Filter app ignores every message matching the specified IP range. This means that if you are logging something like Information messages through Serilog or similar, these messages are also ignored. For a message to have an IP, you will need to specify a server variable named REMOTE_ADDR when creating the message. This variable is automatically added (if available) when using the integration for ELMAH.","title":"Install IP Filter App for elmah.io"},{"location":"elmah-io-apps-jira/","text":"Install Jira App for elmah.io Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Jira app and click the Install button: Input your site name, which is the first part of the URL you use to log into Jira. For the URL https://elmahio.atlassian.net/ , the site parameter would be elmahio . In the Project field, input the key of the project. Note that a project has both a display name and a key. The property we are looking for here is the uppercase identifier of the project. To create issues on Jira, you will need to input the username and password of a user with permission to create issues in the project specified above. You can use your user credentials, but we recommend using a combination of your username and an API token. To generate a new token specific for elmah.io, go to the API Tokens page on your Jira account. Then click the Create API token button and input a label of your choice. Finally, click the Create button and an API token is generated for you. Make sure to copy this token, since you won't be able to access it once the dialog is closed. Go back to elmah.io and input your email in the Username field and the API token from the previous step in the Password field. If you don't like to use an existing user account for the integration, you can create a new Atlassian account for elmah.io and generate the API token from that account instead. Click Save and the app is added to your log. When new errors are logged, issues are automatically created in the configured Jira project. Jira Troubleshooting If errors aren't showing up in Jira, please check that the following are all true: When clicking the Test button on the Jira app settings screen, the button turns green. There's a message logged in the log where you set up the Jira integration. The message is marked as new (yellow star next to the title on the search result). The message is either of severity Error or Fatal . To trigger an error manually, go to https://api.elmah.io/swagger/index.html and input an elmah.io API key with the Messages - Write permission enabled. Expand Messages and the POST node with the URL /v3/messages/{logId} . Input your log ID and the following JSON: { \"title\": \"This is a test\", \"severity\": \"Error\" } Finally, click the Try it out! button and verify that the API returns a status code of 201 . The new error should show up in Jira. If testing this multiple times, you will need to make small adjustments to the title field inside the JSON, for additional errors to be marked as new.","title":"Jira"},{"location":"elmah-io-apps-jira/#install-jira-app-for-elmahio","text":"Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Jira app and click the Install button: Input your site name, which is the first part of the URL you use to log into Jira. For the URL https://elmahio.atlassian.net/ , the site parameter would be elmahio . In the Project field, input the key of the project. Note that a project has both a display name and a key. The property we are looking for here is the uppercase identifier of the project. To create issues on Jira, you will need to input the username and password of a user with permission to create issues in the project specified above. You can use your user credentials, but we recommend using a combination of your username and an API token. To generate a new token specific for elmah.io, go to the API Tokens page on your Jira account. Then click the Create API token button and input a label of your choice. Finally, click the Create button and an API token is generated for you. Make sure to copy this token, since you won't be able to access it once the dialog is closed. Go back to elmah.io and input your email in the Username field and the API token from the previous step in the Password field. If you don't like to use an existing user account for the integration, you can create a new Atlassian account for elmah.io and generate the API token from that account instead. Click Save and the app is added to your log. When new errors are logged, issues are automatically created in the configured Jira project.","title":"Install Jira App for elmah.io"},{"location":"elmah-io-apps-jira/#jira-troubleshooting","text":"If errors aren't showing up in Jira, please check that the following are all true: When clicking the Test button on the Jira app settings screen, the button turns green. There's a message logged in the log where you set up the Jira integration. The message is marked as new (yellow star next to the title on the search result). The message is either of severity Error or Fatal . To trigger an error manually, go to https://api.elmah.io/swagger/index.html and input an elmah.io API key with the Messages - Write permission enabled. Expand Messages and the POST node with the URL /v3/messages/{logId} . Input your log ID and the following JSON: { \"title\": \"This is a test\", \"severity\": \"Error\" } Finally, click the Try it out! button and verify that the API returns a status code of 201 . The new error should show up in Jira. If testing this multiple times, you will need to make small adjustments to the title field inside the JSON, for additional errors to be marked as new.","title":"Jira Troubleshooting"},{"location":"elmah-io-apps-mailman/","text":"Install Mailman App for elmah.io Warning The Mailman app is deprecated. Use an email rule available on the Rules tab for a more advanced email integration. The Mailman app for elmah.io sends out an email to an address of your choice, every time a new error is logged. To install Mailman, click the Install button on the Apps tab. This will show the Mailman settings page: Input a valid email address in the Email input box and click Save . The Mailman app will look at new errors only. Errors are defined by messages with a severity of Error or Fatal and with isNew == true . isNew is a field automatically added by elmah.io when indexing each message. isNew is calculated by looking for similarities between the new message and already logged messages.","title":"Mailman (deprecated)"},{"location":"elmah-io-apps-mailman/#install-mailman-app-for-elmahio","text":"Warning The Mailman app is deprecated. Use an email rule available on the Rules tab for a more advanced email integration. The Mailman app for elmah.io sends out an email to an address of your choice, every time a new error is logged. To install Mailman, click the Install button on the Apps tab. This will show the Mailman settings page: Input a valid email address in the Email input box and click Save . The Mailman app will look at new errors only. Errors are defined by messages with a severity of Error or Fatal and with isNew == true . isNew is a field automatically added by elmah.io when indexing each message. isNew is calculated by looking for similarities between the new message and already logged messages.","title":"Install Mailman App for elmah.io"},{"location":"elmah-io-apps-pagerduty/","text":"Install PagerDuty for elmah.io Using the PagerDuty integration for elmah.io, you can set up advanced notification rules in PagerDuty when new errors are logged on elmah.io. Receive a phone call, text message, or one of the other options provided by PagerDuty, the second new errors are introduced on your websites or services. To integrate elmah.io with PagerDuty, you need to set up a new integration on PagerDuty and install the PagerDuty app on elmah.io. Setting up an integration on PagerDuty Sign in to PagerDuty. Navigate to the Services page. Select the service that you want to integrate to from elmah.io in the list of services. On the Integrations tab click the Add an integration button. On the Add Integrations page search for elmah.io and select it in the search result: Click the Add button. Expand the newly created integration: Copy the value in the Integration Key field. Install the PagerDuty app on elmah.io Next, the PagerDuty app needs to be installed on elmah.io. Sign in to elmah.io. Navigate to the Log Settings page of the log you want to integrate with PagerDuty. Go to the Apps tab. Locate the PagerDuty app and click the Install button. Input the Integration Key that you copied in a previous step in the INTEGRATION KEY field: Click the Save button. That's it. New errors stored in the selected log now trigger incidents in PagerDuty. To get help with this integration, make sure to reach out through the support widget on the elmah.io website.","title":"PagerDuty"},{"location":"elmah-io-apps-pagerduty/#install-pagerduty-for-elmahio","text":"Using the PagerDuty integration for elmah.io, you can set up advanced notification rules in PagerDuty when new errors are logged on elmah.io. Receive a phone call, text message, or one of the other options provided by PagerDuty, the second new errors are introduced on your websites or services. To integrate elmah.io with PagerDuty, you need to set up a new integration on PagerDuty and install the PagerDuty app on elmah.io.","title":"Install PagerDuty for elmah.io"},{"location":"elmah-io-apps-pagerduty/#setting-up-an-integration-on-pagerduty","text":"Sign in to PagerDuty. Navigate to the Services page. Select the service that you want to integrate to from elmah.io in the list of services. On the Integrations tab click the Add an integration button. On the Add Integrations page search for elmah.io and select it in the search result: Click the Add button. Expand the newly created integration: Copy the value in the Integration Key field.","title":"Setting up an integration on PagerDuty"},{"location":"elmah-io-apps-pagerduty/#install-the-pagerduty-app-on-elmahio","text":"Next, the PagerDuty app needs to be installed on elmah.io. Sign in to elmah.io. Navigate to the Log Settings page of the log you want to integrate with PagerDuty. Go to the Apps tab. Locate the PagerDuty app and click the Install button. Input the Integration Key that you copied in a previous step in the INTEGRATION KEY field: Click the Save button. That's it. New errors stored in the selected log now trigger incidents in PagerDuty. To get help with this integration, make sure to reach out through the support widget on the elmah.io website.","title":"Install the PagerDuty app on elmah.io"},{"location":"elmah-io-apps-request-a-new-integration/","text":"Request a new integration between elmah.io and another tool We are always on the lookout for creating new and useful integrations. We don't want to integrate with everything (that's what Zapier is for), but commonly used tools by .NET web developers are on our radar. To suggest a new integration feel free to reach out through the support widget in the lower right corner. Note Not all integration requests are implemented. Don't feel bad if we decide not implement your suggestion. When recommending a new integration we need the following information: Name of the tool. URL of the tool. Why do you need this integration? What do you expect from this integration? Does the tool provide an API? Anything else you think would help? Do you by any chance know anyone working on the tool?","title":"Request a new integration"},{"location":"elmah-io-apps-request-a-new-integration/#request-a-new-integration-between-elmahio-and-another-tool","text":"We are always on the lookout for creating new and useful integrations. We don't want to integrate with everything (that's what Zapier is for), but commonly used tools by .NET web developers are on our radar. To suggest a new integration feel free to reach out through the support widget in the lower right corner. Note Not all integration requests are implemented. Don't feel bad if we decide not implement your suggestion. When recommending a new integration we need the following information: Name of the tool. URL of the tool. Why do you need this integration? What do you expect from this integration? Does the tool provide an API? Anything else you think would help? Do you by any chance know anyone working on the tool?","title":"Request a new integration between elmah.io and another tool"},{"location":"elmah-io-apps-slack/","text":"Install Slack App for elmah.io Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Slack app and click the Install button. You will be redirected to Slack where you need to log into your workspace if not already. Once logged in, select the channel to send messages to: Click the Allow button and you will be redirected back to elmah.io. The integration to Slack is now installed. Note Slack doesn't allow more than a single request per second. If you generate more than one message to elmah.io per second, not all of them will show up in Slack because of this. Slack Troubleshooting Errors don't show up in Slack. Here are a few things to try out. Make sure that the Slack app is installed on the log as described above. Only new errors are sent to Slack. A new error has a severity of Error or Fatal and is marked with a yellow star on the search tab. We only send new errors to help you stay out of Slack's API limits. If sending all errors, you could quickly end up in a scenario where the same error is sent multiple times and more important errors get ignored by Slack. Make sure that your token is still valid. The only way to resolve an issue where the token is no longer valid is to re-install the Slack app.","title":"Slack"},{"location":"elmah-io-apps-slack/#install-slack-app-for-elmahio","text":"Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Slack app and click the Install button. You will be redirected to Slack where you need to log into your workspace if not already. Once logged in, select the channel to send messages to: Click the Allow button and you will be redirected back to elmah.io. The integration to Slack is now installed. Note Slack doesn't allow more than a single request per second. If you generate more than one message to elmah.io per second, not all of them will show up in Slack because of this.","title":"Install Slack App for elmah.io"},{"location":"elmah-io-apps-slack/#slack-troubleshooting","text":"Errors don't show up in Slack. Here are a few things to try out. Make sure that the Slack app is installed on the log as described above. Only new errors are sent to Slack. A new error has a severity of Error or Fatal and is marked with a yellow star on the search tab. We only send new errors to help you stay out of Slack's API limits. If sending all errors, you could quickly end up in a scenario where the same error is sent multiple times and more important errors get ignored by Slack. Make sure that your token is still valid. The only way to resolve an issue where the token is no longer valid is to re-install the Slack app.","title":"Slack Troubleshooting"},{"location":"elmah-io-apps-teams/","text":"Install Microsoft Teams App for elmah.io Install Microsoft Teams App for elmah.io Teams v2 Teams v1 Microsoft Teams Troubleshooting Teams v2 To install the integration with Microsoft Teams v2, go to teams and click the \u22ef menu item next to the channel you want elmah.io to post messages to. Then click the Workflows menu item: In the Workflows dialog search for 'webhook' and select the Post to a channel when a webhook request is received template: In the following step, Microsoft Teams will generate a name and validate the connection. You can input another name if you'd like but make sure that a green checkmark is shown. Click the Next button: In the final step of setting up the webhook, make sure that the correct team and channel is selected. Then click the Add workflow button: The workflow is successfully added. Copy the generated webhook URL and click the Done button: The final step is to input the webhook URL that you just copied, into elmah.io. Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Microsoft Teams v2 app and click the Install button. In the overlay, paste the URL from the previous step: Click Save and the app is added to your log. When new errors are logged, messages start appearing in the channel that you configured. Teams v1 To install the integration with Microsoft Teams, go to teams and click the Apps menu item. Search for \"elmah.io\" and click the app: Click the Add to a team button. In the dropdown, search for your team and/or channel: Click the Set up a connector button. A new webhook URL is generated. Click the Copy Text button followed by the Save button: The elmah.io integration is now configured on Microsoft Teams and you should see the following screen: The final step is to input the webhook URL that you just copied, into elmah.io. Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Microsoft Teams app and click the Install button. In the overlay, paste the URL from the previous step: Click Save and the app is added to your log. When new errors are logged, messages start appearing in the channel that you configured. Note The Office 365 API used behind the scenes for this app uses throttling rather than a maximum of allowed requests. This means that you may start experiencing messages not being sent, if you start logging a large amount of messages. We have experienced a lot of weird error codes when communicating with the API. An example of this is an exception while posting data to the API, but the data is successfully shown on Teams. The result of this error is, that elmah.io retries the failing request multiple times, which causes the same message to be shown multiple times on Teams. Microsoft Teams Troubleshooting Errors don't show up in Teams. Here are a few things to try out. Make sure that the Teams app is installed on the log as described above. Only new errors are sent to Teams. A new error has a severity of Error or Fatal and is marked with a yellow star on the search tab. We only send new errors to help you stay out of Teams' API limits. If sending all errors, you could quickly end up in a scenario where the same error is sent multiple times and more important errors get ignored by Teams. Re-install the app on elmah.io with the webhook URL provided by Teams. Remove the elmah.io configuration from Teams and re-install it. After re-installing the app, you will need to copy the new webhook URL provided by Teams and input it in the elmah.io Teams app as descrived above. Go to the Apps page on Teams and search for 'elmah.io'. Remove the app entirely, click F5 to refresh the page, and install the app again. You may be stuck on an older version of our app, which can be fixed by simply removing and installing the app again.","title":"Microsoft Teams"},{"location":"elmah-io-apps-teams/#install-microsoft-teams-app-for-elmahio","text":"Install Microsoft Teams App for elmah.io Teams v2 Teams v1 Microsoft Teams Troubleshooting","title":"Install Microsoft Teams App for elmah.io"},{"location":"elmah-io-apps-teams/#teams-v2","text":"To install the integration with Microsoft Teams v2, go to teams and click the \u22ef menu item next to the channel you want elmah.io to post messages to. Then click the Workflows menu item: In the Workflows dialog search for 'webhook' and select the Post to a channel when a webhook request is received template: In the following step, Microsoft Teams will generate a name and validate the connection. You can input another name if you'd like but make sure that a green checkmark is shown. Click the Next button: In the final step of setting up the webhook, make sure that the correct team and channel is selected. Then click the Add workflow button: The workflow is successfully added. Copy the generated webhook URL and click the Done button: The final step is to input the webhook URL that you just copied, into elmah.io. Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Microsoft Teams v2 app and click the Install button. In the overlay, paste the URL from the previous step: Click Save and the app is added to your log. When new errors are logged, messages start appearing in the channel that you configured.","title":"Teams v2"},{"location":"elmah-io-apps-teams/#teams-v1","text":"To install the integration with Microsoft Teams, go to teams and click the Apps menu item. Search for \"elmah.io\" and click the app: Click the Add to a team button. In the dropdown, search for your team and/or channel: Click the Set up a connector button. A new webhook URL is generated. Click the Copy Text button followed by the Save button: The elmah.io integration is now configured on Microsoft Teams and you should see the following screen: The final step is to input the webhook URL that you just copied, into elmah.io. Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Microsoft Teams app and click the Install button. In the overlay, paste the URL from the previous step: Click Save and the app is added to your log. When new errors are logged, messages start appearing in the channel that you configured. Note The Office 365 API used behind the scenes for this app uses throttling rather than a maximum of allowed requests. This means that you may start experiencing messages not being sent, if you start logging a large amount of messages. We have experienced a lot of weird error codes when communicating with the API. An example of this is an exception while posting data to the API, but the data is successfully shown on Teams. The result of this error is, that elmah.io retries the failing request multiple times, which causes the same message to be shown multiple times on Teams.","title":"Teams v1"},{"location":"elmah-io-apps-teams/#microsoft-teams-troubleshooting","text":"Errors don't show up in Teams. Here are a few things to try out. Make sure that the Teams app is installed on the log as described above. Only new errors are sent to Teams. A new error has a severity of Error or Fatal and is marked with a yellow star on the search tab. We only send new errors to help you stay out of Teams' API limits. If sending all errors, you could quickly end up in a scenario where the same error is sent multiple times and more important errors get ignored by Teams. Re-install the app on elmah.io with the webhook URL provided by Teams. Remove the elmah.io configuration from Teams and re-install it. After re-installing the app, you will need to copy the new webhook URL provided by Teams and input it in the elmah.io Teams app as descrived above. Go to the Apps page on Teams and search for 'elmah.io'. Remove the app entirely, click F5 to refresh the page, and install the app again. You may be stuck on an older version of our app, which can be fixed by simply removing and installing the app again.","title":"Microsoft Teams Troubleshooting"},{"location":"elmah-io-apps-trello/","text":"Install Trello App for elmah.io For elmah.io to communicate with the Trello API, we will need an API key and token. The API key is available here: https://trello.com/app-key . If you don't have a personal token available on that site, create a new Power-Up as described on the page. When the Power-Up is created, you can create a new API key on that page. To get the token, visit the following URL in your browser: https://trello.com/1/authorize?expiration=never&scope=read,write,account&response_type=token&name=Server%20Token&key=API_KEY . Remember to replace API_KEY with your Trello API key located in the previous step. When clicking the Allow button, Trello will generate a new token for you and show it in the browser window. elmah.io will create cards on a board list of your choice. Unfortunately, Trello didn't provide a way to obtain list IDs. The easiest way is to open Developer Tools in your browser and click an existing card inside the list you want elmah.io to create new cards in. Locate the request for the card details in the Network tab and click the Preview tab. The list id is in the card details: Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Trello app and click the Install button: Input the API key, token, and list ID, all located in the previous steps. Click the Test button to test that everything works and finally, click Save . New errors now trigger elmah.io to create a card with the details of the error in Trello. Trello Troubleshooting If errors aren't showing up in Trello, please check that the following are all true: When clicking the Test button on the Trello app settings screen, the button turns green. There's a message logged in the log where you set up the Trello integration. The message is marked as new (yellow star next to the title on the search result). The message is either of severity Error or Fatal . To trigger an error manually, go to https://api.elmah.io/swagger/index.html and input an elmah.io API key with the Messages - Write permission enabled. Expand Messages and the POST node with the URL /v3/messages/{logId} . Input your log ID and the following JSON: { \"title\": \"This is a test\", \"severity\": \"Error\" } Finally, click the Try it out! button and verify that the API returns a status code of 201 . The new error should show up in Trello. If testing this multiple times, you will need to make small adjustments to the title field inside the JSON, for additional errors to be marked as new.","title":"Trello"},{"location":"elmah-io-apps-trello/#install-trello-app-for-elmahio","text":"For elmah.io to communicate with the Trello API, we will need an API key and token. The API key is available here: https://trello.com/app-key . If you don't have a personal token available on that site, create a new Power-Up as described on the page. When the Power-Up is created, you can create a new API key on that page. To get the token, visit the following URL in your browser: https://trello.com/1/authorize?expiration=never&scope=read,write,account&response_type=token&name=Server%20Token&key=API_KEY . Remember to replace API_KEY with your Trello API key located in the previous step. When clicking the Allow button, Trello will generate a new token for you and show it in the browser window. elmah.io will create cards on a board list of your choice. Unfortunately, Trello didn't provide a way to obtain list IDs. The easiest way is to open Developer Tools in your browser and click an existing card inside the list you want elmah.io to create new cards in. Locate the request for the card details in the Network tab and click the Preview tab. The list id is in the card details: Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Trello app and click the Install button: Input the API key, token, and list ID, all located in the previous steps. Click the Test button to test that everything works and finally, click Save . New errors now trigger elmah.io to create a card with the details of the error in Trello.","title":"Install Trello App for elmah.io"},{"location":"elmah-io-apps-trello/#trello-troubleshooting","text":"If errors aren't showing up in Trello, please check that the following are all true: When clicking the Test button on the Trello app settings screen, the button turns green. There's a message logged in the log where you set up the Trello integration. The message is marked as new (yellow star next to the title on the search result). The message is either of severity Error or Fatal . To trigger an error manually, go to https://api.elmah.io/swagger/index.html and input an elmah.io API key with the Messages - Write permission enabled. Expand Messages and the POST node with the URL /v3/messages/{logId} . Input your log ID and the following JSON: { \"title\": \"This is a test\", \"severity\": \"Error\" } Finally, click the Try it out! button and verify that the API returns a status code of 201 . The new error should show up in Trello. If testing this multiple times, you will need to make small adjustments to the title field inside the JSON, for additional errors to be marked as new.","title":"Trello Troubleshooting"},{"location":"elmah-io-apps-twilio/","text":"Install Twilio for elmah.io To send SMS/Text messages with Twilio, you will need to sign up for Twilio first. Twilio provides a range of good tutorials when signing up, why we don't want to duplicate them here. When signed up, you will have access to a Twilio phone number to send messages from, an Account SID and a token needed to authenticate Twilio. These pieces of information will be used below when installing the Twilio app on elmah.io. Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Twilio app and click the Install button: Input your Twilio phone number (available on https://www.twilio.com/console/phone-numbers/incoming) in the From field. Input the phone number you want receiving error reports from elmah.io in the To field. Remember to fully qualify the number with a plus and the language code (US example: +12025550170 - UK example: +441632960775). Copy your Account SID and Auth Token from the Twilio Dashboard and input them in the fields on elmah.io. Click Save and the app is added to your log. When new errors are logged, an SMS/Text message is automatically sent to the configured phone number. Twilio Troubleshooting If errors aren't being sent to your phone, verify that the configured variables work. To do so, replace the four variables in the top of this PowerShell script and execute it: $sid = \"INSERT_SID\" $token = \"INSERT_TOKEN\" $from = \"INSERT_FROM\" $to = \"INSERT_TO\" $url = \"https://api.twilio.com/2010-04-01/Accounts/$sid/Messages.json\" $pair = \"$($sid):$($token)\" $encodedCreds = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($pair)) $basicAuthValue = \"Basic $encodedCreds\" $Headers = @{ Authorization = $basicAuthValue ContentType = \"application/x-www-form-urlencoded\" } $from = $from.Replace(\"+\", \"%2B\") $to = $to.Replace(\"+\", \"%2B\") $response = Invoke-WebRequest -Uri $url -Method POST -Headers $Headers -Body \"Body=Affirmative&From=$from&To=$to\" You should see a text message on your phone. The script will output any errors from Twilio if something isn't working.","title":"Twilio"},{"location":"elmah-io-apps-twilio/#install-twilio-for-elmahio","text":"To send SMS/Text messages with Twilio, you will need to sign up for Twilio first. Twilio provides a range of good tutorials when signing up, why we don't want to duplicate them here. When signed up, you will have access to a Twilio phone number to send messages from, an Account SID and a token needed to authenticate Twilio. These pieces of information will be used below when installing the Twilio app on elmah.io. Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Twilio app and click the Install button: Input your Twilio phone number (available on https://www.twilio.com/console/phone-numbers/incoming) in the From field. Input the phone number you want receiving error reports from elmah.io in the To field. Remember to fully qualify the number with a plus and the language code (US example: +12025550170 - UK example: +441632960775). Copy your Account SID and Auth Token from the Twilio Dashboard and input them in the fields on elmah.io. Click Save and the app is added to your log. When new errors are logged, an SMS/Text message is automatically sent to the configured phone number.","title":"Install Twilio for elmah.io"},{"location":"elmah-io-apps-twilio/#twilio-troubleshooting","text":"If errors aren't being sent to your phone, verify that the configured variables work. To do so, replace the four variables in the top of this PowerShell script and execute it: $sid = \"INSERT_SID\" $token = \"INSERT_TOKEN\" $from = \"INSERT_FROM\" $to = \"INSERT_TO\" $url = \"https://api.twilio.com/2010-04-01/Accounts/$sid/Messages.json\" $pair = \"$($sid):$($token)\" $encodedCreds = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($pair)) $basicAuthValue = \"Basic $encodedCreds\" $Headers = @{ Authorization = $basicAuthValue ContentType = \"application/x-www-form-urlencoded\" } $from = $from.Replace(\"+\", \"%2B\") $to = $to.Replace(\"+\", \"%2B\") $response = Invoke-WebRequest -Uri $url -Method POST -Headers $Headers -Body \"Body=Affirmative&From=$from&To=$to\" You should see a text message on your phone. The script will output any errors from Twilio if something isn't working.","title":"Twilio Troubleshooting"},{"location":"elmah-io-apps-youtrack/","text":"Install YouTrack App for elmah.io Get your token To allow elmah.io to create issues on YouTrack, you will need a permanent token. Go to your YouTrack profile, click the Account Security . Here you can generate a new token: Copy the generated token. Install the YouTrack App on elmah.io Log into elmah.io and go to the log settings. Click the Apps tab. Locate the YouTrack app and click the Install button. Input your token and the base URL of your YouTrack Cloud installation. Next, click the Login button to fetch the list of projects from YouTrack: Click Save and the app is added to your log. When new errors are logged, issues are automatically created in the configured YouTrack project.","title":"YouTrack"},{"location":"elmah-io-apps-youtrack/#install-youtrack-app-for-elmahio","text":"","title":"Install YouTrack App for elmah.io"},{"location":"elmah-io-apps-youtrack/#get-your-token","text":"To allow elmah.io to create issues on YouTrack, you will need a permanent token. Go to your YouTrack profile, click the Account Security . Here you can generate a new token: Copy the generated token.","title":"Get your token"},{"location":"elmah-io-apps-youtrack/#install-the-youtrack-app-on-elmahio","text":"Log into elmah.io and go to the log settings. Click the Apps tab. Locate the YouTrack app and click the Install button. Input your token and the base URL of your YouTrack Cloud installation. Next, click the Login button to fetch the list of projects from YouTrack: Click Save and the app is added to your log. When new errors are logged, issues are automatically created in the configured YouTrack project.","title":"Install the YouTrack App on elmah.io"},{"location":"email-troubleshooting/","text":"Email troubleshooting Email troubleshooting Emails on new errors only Email bounced Invalid email Check your promotional and/or spam folder So, you aren't receiving emails from elmah.io? Here is a collection of things to know/try out. Emails on new errors only The most common reason for not receiving emails when errors are logged is that elmah.io only sends the New Error email when an error that we haven't seen before is logged. New errors are marked with a yellow star next to the log message in the UI and can be searched through either search filters or full-text search: isNew:true The new detection algorithm is implemented by looking at a range of fields like the title, type, and severity. Only severities Error and Fatal marked as isNew trigger an email. Email bounced We use AWS to send out all transactional emails from elmah.io. We get a notification from AWS when an email bounces and show an error message on your profile: As the error message says, get in contact for us to try and reach the email address again. An organization administrator can check the bounce status for all users in the organization by navigating to the Users tab on the Organization Settings page. Bounced emails will be marked with a yellow warning next to any bounced emails. Invalid email Ok, this may seem obvious. But this happens more often than you would think. Typos are a common cause of invalid emails. Specifying a mailing list or group address doesn't always play nice with elmah.io either. For instance, Office 365 distribution groups block external emails as the default. The easiest way to check your inputted email address is to send a new message to that address from an external email provider. Check your promotional and/or spam folder We do a lot to keep our email reputation high. However, some email clients may treat similar-looking emails as promotional or spam. Remember to check those folders and mark messages as important if spotting them in the wrong folder.","title":"Email troubleshooting"},{"location":"email-troubleshooting/#email-troubleshooting","text":"Email troubleshooting Emails on new errors only Email bounced Invalid email Check your promotional and/or spam folder So, you aren't receiving emails from elmah.io? Here is a collection of things to know/try out.","title":"Email troubleshooting"},{"location":"email-troubleshooting/#emails-on-new-errors-only","text":"The most common reason for not receiving emails when errors are logged is that elmah.io only sends the New Error email when an error that we haven't seen before is logged. New errors are marked with a yellow star next to the log message in the UI and can be searched through either search filters or full-text search: isNew:true The new detection algorithm is implemented by looking at a range of fields like the title, type, and severity. Only severities Error and Fatal marked as isNew trigger an email.","title":"Emails on new errors only"},{"location":"email-troubleshooting/#email-bounced","text":"We use AWS to send out all transactional emails from elmah.io. We get a notification from AWS when an email bounces and show an error message on your profile: As the error message says, get in contact for us to try and reach the email address again. An organization administrator can check the bounce status for all users in the organization by navigating to the Users tab on the Organization Settings page. Bounced emails will be marked with a yellow warning next to any bounced emails.","title":"Email bounced"},{"location":"email-troubleshooting/#invalid-email","text":"Ok, this may seem obvious. But this happens more often than you would think. Typos are a common cause of invalid emails. Specifying a mailing list or group address doesn't always play nice with elmah.io either. For instance, Office 365 distribution groups block external emails as the default. The easiest way to check your inputted email address is to send a new message to that address from an external email provider.","title":"Invalid email"},{"location":"email-troubleshooting/#check-your-promotional-andor-spam-folder","text":"We do a lot to keep our email reputation high. However, some email clients may treat similar-looking emails as promotional or spam. Remember to check those folders and mark messages as important if spotting them in the wrong folder.","title":"Check your promotional and/or spam folder"},{"location":"frequently-asked-questions/","text":"Frequently Asked Questions Is elmah.io highly available? Yes. The service runs on Azure with multi-datacenter redundancy. Data is stored in clustered backends for resilience. Is elmah.io secure? Yes. HTTPS in transit only. Operational security is reviewed with external specialists. Never share API keys or log IDs. See https://elmah.io/security/ for details. Which frameworks and languages are supported? elmah.io support mosts web and logg frameworks. Official integrations exist for log4net, NLog, Serilog, Microsoft.Extensions.Logging, ASP.NET Core, JavaScript, and more. Other languages can send logs via the REST API. Can I browse errors without opening the web app? Yes. Options include rules that email or call webhooks, install an app for Microsoft Teams, Slack, and more, the Visual Studio extension, and the public REST API. My log is noisy. How do I regain control? Hide or delete individual errors, clear the log from settings, and use Ignore Filters or Business Rules to suppress known noise. What is the difference between ELMAH and elmah.io? ELMAH is the original open-source error logging library for .NET. elmah.io is a hosted logging and monitoring platform that integrates with ELMAH and many other frameworks. Is elmah.io built by the ELMAH maintainers? No. Different teams. Collaboration exists on open-source components where relevant. Is elmah.io open source? The core platform and websites are closed-source. Client libraries and several components are open-sourced. Contributions to other OSS projects are ongoing. The API key and Log ID dialog did not show during install in ASP.NET. Why? Likely causes: existing <errorlog> config already present, or PowerShell execution policy blocked the NuGet install.ps1 . Run Visual Studio as admin or adjust ExecutionPolicy. Can I try elmah.io for free? Yes. 21-day free trial. No credit card required. Can I upgrade or downgrade later? Yes. Upgrades prorate the difference. Downgrades take effect at the next billing cycle. Do you offer refunds? Yes. Full refund within 14 days. Outside that window, subscriptions are prepaid and non-refundable for the remaining period. See https://elmah.io/legal/refund-policy/. What currency do you charge in? USD. Taxes may apply depending on country. Do you support invoicing and alternative payments? Manual invoices are available on annual Business+ and Enterprise plans. Card payments always produce downloadable/emailed invoices. Check support for wire transfer, PayPal, or checks on eligible plans. Do you provide custom plans? Yes. Contact support to tailor limits, compliance, or procurement needs. Does it take much to get started? No. Install a NuGet package and configure a key. Typical setup takes a few minutes. What is the difference between applications and messages? Messages are individual log entries. Applications are containers used to group messages. Why is elmah.io cheaper than some alternatives? Focus on .NET and targeted features reduces scope and cost versus multi-language platforms. How do I cancel? Cancel anytime from organization settings. Access continues until the end of the paid period. Where can I ask other questions? Open chat in the app or contact support. Responses come from developers.","title":"Frequently Asked Questions"},{"location":"frequently-asked-questions/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"frequently-asked-questions/#is-elmahio-highly-available","text":"Yes. The service runs on Azure with multi-datacenter redundancy. Data is stored in clustered backends for resilience.","title":"Is elmah.io highly available?"},{"location":"frequently-asked-questions/#is-elmahio-secure","text":"Yes. HTTPS in transit only. Operational security is reviewed with external specialists. Never share API keys or log IDs. See https://elmah.io/security/ for details.","title":"Is elmah.io secure?"},{"location":"frequently-asked-questions/#which-frameworks-and-languages-are-supported","text":"elmah.io support mosts web and logg frameworks. Official integrations exist for log4net, NLog, Serilog, Microsoft.Extensions.Logging, ASP.NET Core, JavaScript, and more. Other languages can send logs via the REST API.","title":"Which frameworks and languages are supported?"},{"location":"frequently-asked-questions/#can-i-browse-errors-without-opening-the-web-app","text":"Yes. Options include rules that email or call webhooks, install an app for Microsoft Teams, Slack, and more, the Visual Studio extension, and the public REST API.","title":"Can I browse errors without opening the web app?"},{"location":"frequently-asked-questions/#my-log-is-noisy-how-do-i-regain-control","text":"Hide or delete individual errors, clear the log from settings, and use Ignore Filters or Business Rules to suppress known noise.","title":"My log is noisy. How do I regain control?"},{"location":"frequently-asked-questions/#what-is-the-difference-between-elmah-and-elmahio","text":"ELMAH is the original open-source error logging library for .NET. elmah.io is a hosted logging and monitoring platform that integrates with ELMAH and many other frameworks.","title":"What is the difference between ELMAH and elmah.io?"},{"location":"frequently-asked-questions/#is-elmahio-built-by-the-elmah-maintainers","text":"No. Different teams. Collaboration exists on open-source components where relevant.","title":"Is elmah.io built by the ELMAH maintainers?"},{"location":"frequently-asked-questions/#is-elmahio-open-source","text":"The core platform and websites are closed-source. Client libraries and several components are open-sourced. Contributions to other OSS projects are ongoing.","title":"Is elmah.io open source?"},{"location":"frequently-asked-questions/#the-api-key-and-log-id-dialog-did-not-show-during-install-in-aspnet-why","text":"Likely causes: existing <errorlog> config already present, or PowerShell execution policy blocked the NuGet install.ps1 . Run Visual Studio as admin or adjust ExecutionPolicy.","title":"The API key and Log ID dialog did not show during install in ASP.NET. Why?"},{"location":"frequently-asked-questions/#can-i-try-elmahio-for-free","text":"Yes. 21-day free trial. No credit card required.","title":"Can I try elmah.io for free?"},{"location":"frequently-asked-questions/#can-i-upgrade-or-downgrade-later","text":"Yes. Upgrades prorate the difference. Downgrades take effect at the next billing cycle.","title":"Can I upgrade or downgrade later?"},{"location":"frequently-asked-questions/#do-you-offer-refunds","text":"Yes. Full refund within 14 days. Outside that window, subscriptions are prepaid and non-refundable for the remaining period. See https://elmah.io/legal/refund-policy/.","title":"Do you offer refunds?"},{"location":"frequently-asked-questions/#what-currency-do-you-charge-in","text":"USD. Taxes may apply depending on country.","title":"What currency do you charge in?"},{"location":"frequently-asked-questions/#do-you-support-invoicing-and-alternative-payments","text":"Manual invoices are available on annual Business+ and Enterprise plans. Card payments always produce downloadable/emailed invoices. Check support for wire transfer, PayPal, or checks on eligible plans.","title":"Do you support invoicing and alternative payments?"},{"location":"frequently-asked-questions/#do-you-provide-custom-plans","text":"Yes. Contact support to tailor limits, compliance, or procurement needs.","title":"Do you provide custom plans?"},{"location":"frequently-asked-questions/#does-it-take-much-to-get-started","text":"No. Install a NuGet package and configure a key. Typical setup takes a few minutes.","title":"Does it take much to get started?"},{"location":"frequently-asked-questions/#what-is-the-difference-between-applications-and-messages","text":"Messages are individual log entries. Applications are containers used to group messages.","title":"What is the difference between applications and messages?"},{"location":"frequently-asked-questions/#why-is-elmahio-cheaper-than-some-alternatives","text":"Focus on .NET and targeted features reduces scope and cost versus multi-language platforms.","title":"Why is elmah.io cheaper than some alternatives?"},{"location":"frequently-asked-questions/#how-do-i-cancel","text":"Cancel anytime from organization settings. Access continues until the end of the paid period.","title":"How do I cancel?"},{"location":"frequently-asked-questions/#where-can-i-ask-other-questions","text":"Open chat in the app or contact support. Responses come from developers.","title":"Where can I ask other questions?"},{"location":"handle-elmah-io-downtime/","text":"Handle elmah.io downtime Like every other SaaS product out there, we cannot promise you 100% uptime on elmah.io. We understand that your logging data is extremely important for your business, and we do everything in our power to ensure that elmah.io is running smoothly. To monitor our APIs and websites, check out status.elmah.io . It is our general recommendation to implement code that listens for communication errors with the elmah.io API and log errors elsewhere. How you do this depends on which elmah.io NuGet package you have installed. The documentation for each package will show how to subscribe to errors. For Elmah.Io.Client it would look similar to this: var elmahIo = ElmahioAPI.Create(\"API_KEY\"); elmahIo.Messages.OnMessageFail += (sender, args) => { var message = args.Message; var exception = args.Error; // TODO: log it }; For a logging framework like Serilog, it would look similar to this: Log.Logger = new LoggerConfiguration() .WriteTo.ElmahIo(new ElmahIoSinkOptions(\"API_KEY\", new Guid(\"LOG_ID\")) { OnError = (msg, ex) => { // TODO: log it } }) .CreateLogger(); It is important not to log errors in OnMessageFail and OnError callbacks to elmah.io, since that could cause an infinite loop. Check out the documentation for the package you are using for additional details. Response explanation Here's an overview of the types of errors you can experience from the API: Response Meaning Timeout Something is very wrong with our API or Azure. You can be sure that we are working 24/7 to fix it. 500 The API is reachable, but we have a problem communicating with Azure Service Bus. Azure has great uptime, and all of our resources are dedicated and replicated. Still, we experience short periods of downtime from time to time. 429 We allow a maximum (per API key) of 500 requests per minute and 3600 per hour. 429 means that you have crossed that line. This status code doesn't indicate that the API is down. 4xx Something is wrong with the request. Check out the API documentation for details. This status code doesn't indicate that the API is down.","title":"Handle elmah.io downtime"},{"location":"handle-elmah-io-downtime/#handle-elmahio-downtime","text":"Like every other SaaS product out there, we cannot promise you 100% uptime on elmah.io. We understand that your logging data is extremely important for your business, and we do everything in our power to ensure that elmah.io is running smoothly. To monitor our APIs and websites, check out status.elmah.io . It is our general recommendation to implement code that listens for communication errors with the elmah.io API and log errors elsewhere. How you do this depends on which elmah.io NuGet package you have installed. The documentation for each package will show how to subscribe to errors. For Elmah.Io.Client it would look similar to this: var elmahIo = ElmahioAPI.Create(\"API_KEY\"); elmahIo.Messages.OnMessageFail += (sender, args) => { var message = args.Message; var exception = args.Error; // TODO: log it }; For a logging framework like Serilog, it would look similar to this: Log.Logger = new LoggerConfiguration() .WriteTo.ElmahIo(new ElmahIoSinkOptions(\"API_KEY\", new Guid(\"LOG_ID\")) { OnError = (msg, ex) => { // TODO: log it } }) .CreateLogger(); It is important not to log errors in OnMessageFail and OnError callbacks to elmah.io, since that could cause an infinite loop. Check out the documentation for the package you are using for additional details.","title":"Handle elmah.io downtime"},{"location":"handle-elmah-io-downtime/#response-explanation","text":"Here's an overview of the types of errors you can experience from the API: Response Meaning Timeout Something is very wrong with our API or Azure. You can be sure that we are working 24/7 to fix it. 500 The API is reachable, but we have a problem communicating with Azure Service Bus. Azure has great uptime, and all of our resources are dedicated and replicated. Still, we experience short periods of downtime from time to time. 429 We allow a maximum (per API key) of 500 requests per minute and 3600 per hour. 429 means that you have crossed that line. This status code doesn't indicate that the API is down. 4xx Something is wrong with the request. Check out the API documentation for details. This status code doesn't indicate that the API is down.","title":"Response explanation"},{"location":"heartbeats-troubleshooting/","text":"Heartbeats Troubleshooting Common problems and how to fix them Here you will a list of common problems and how to solve them. Timeout when creating heartbeats through Elmah.Io.Client If you experience a timeout when calling the Healthy , Degraded , or Unhealthy method, you may want to adjust the default HTTP timeout. Elmah.Io.Client has a default timeout of 5 seconds to make sure that logging to elmah.io from a web application won't slow down the web app too much in case of slow response time from the elmah.io API. While 99.9% of the requests to the elmah.io API finish within this timeout, problems with Azure, the network connection, and a lot of other issues can happen. Since heartbeats typically run outside the scope of a web request, it's safe to increase the default HTTP timeout in this case: var api = ElmahioAPI.Create(\"API_KEY\", new ElmahIoOptions { Timeout = new TimeSpan(0, 0, 30) }); The example set a timeout of 30 seconds. SocketException when creating heartbeats through Elmah.Io.Client A System.Net.Sockets.SocketException when communicating with the elmah.io API can mean multiple things. The API can be down or there's network problems between your machine and the API. Increasing the timeout as shown in the previous section should be step one. If you still experience socket exceptions, it might help to implement retries. This can be done by setting up a custom HttpClient : builder.Services .AddHttpClient(\"elmahio\") .AddPolicyHandler(HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(3, i => TimeSpan.FromSeconds(i))); The AddPolicyHandler is available when installing the Microsoft.Extensions.Http.Polly NuGet package. Next, create the elmah.io client with the custom HttpClient : var httpClient = httpClientFactory.CreateClient(\"elmahio\"); var elmahIoClient = ElmahioAPI.Create(\"API_KEY\", options, httpClient);","title":"Heartbeats Troubleshooting"},{"location":"heartbeats-troubleshooting/#heartbeats-troubleshooting","text":"","title":"Heartbeats Troubleshooting"},{"location":"heartbeats-troubleshooting/#common-problems-and-how-to-fix-them","text":"Here you will a list of common problems and how to solve them.","title":"Common problems and how to fix them"},{"location":"heartbeats-troubleshooting/#timeout-when-creating-heartbeats-through-elmahioclient","text":"If you experience a timeout when calling the Healthy , Degraded , or Unhealthy method, you may want to adjust the default HTTP timeout. Elmah.Io.Client has a default timeout of 5 seconds to make sure that logging to elmah.io from a web application won't slow down the web app too much in case of slow response time from the elmah.io API. While 99.9% of the requests to the elmah.io API finish within this timeout, problems with Azure, the network connection, and a lot of other issues can happen. Since heartbeats typically run outside the scope of a web request, it's safe to increase the default HTTP timeout in this case: var api = ElmahioAPI.Create(\"API_KEY\", new ElmahIoOptions { Timeout = new TimeSpan(0, 0, 30) }); The example set a timeout of 30 seconds.","title":"Timeout when creating heartbeats through Elmah.Io.Client"},{"location":"heartbeats-troubleshooting/#socketexception-when-creating-heartbeats-through-elmahioclient","text":"A System.Net.Sockets.SocketException when communicating with the elmah.io API can mean multiple things. The API can be down or there's network problems between your machine and the API. Increasing the timeout as shown in the previous section should be step one. If you still experience socket exceptions, it might help to implement retries. This can be done by setting up a custom HttpClient : builder.Services .AddHttpClient(\"elmahio\") .AddPolicyHandler(HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(3, i => TimeSpan.FromSeconds(i))); The AddPolicyHandler is available when installing the Microsoft.Extensions.Http.Polly NuGet package. Next, create the elmah.io client with the custom HttpClient : var httpClient = httpClientFactory.CreateClient(\"elmahio\"); var elmahIoClient = ElmahioAPI.Create(\"API_KEY\", options, httpClient);","title":"SocketException when creating heartbeats through Elmah.Io.Client"},{"location":"how-can-i-search-or-create-rules-using-regex-query/","text":"How can I search or create rules using RegEx query The short answer is: you can't. elmah.io currently does not support RegEx in the full-text query fields on Log Search and when creating rules. Full-text search is based on Lucene Query Language which supports a limited form of wildcards (* and ?) and fuzzy matching (~), but not arbitrary regular expressions.","title":"How can I search or create rules using RegEx query"},{"location":"how-can-i-search-or-create-rules-using-regex-query/#how-can-i-search-or-create-rules-using-regex-query","text":"The short answer is: you can't. elmah.io currently does not support RegEx in the full-text query fields on Log Search and when creating rules. Full-text search is based on Lucene Query Language which supports a limited form of wildcards (* and ?) and fuzzy matching (~), but not arbitrary regular expressions.","title":"How can I search or create rules using RegEx query"},{"location":"how-do-i-log-out/","text":"How do I log out To log out from your current session on app.elmah.io, click the More... item in the left menu. Once expanded, there's a Log Out item in the bottom of the list:","title":"How do I log out"},{"location":"how-do-i-log-out/#how-do-i-log-out","text":"To log out from your current session on app.elmah.io, click the More... item in the left menu. Once expanded, there's a Log Out item in the bottom of the list:","title":"How do I log out"},{"location":"how-do-i-view-my-account-profile-information/","text":"How do I view my account/profile information Your elmah.io account consists of your personal user account and your organization account. You can access your personal account information available on the Profile page. You can update basic information about yourself, upload a profile photo, and configure how elmah.io should work for you. On the organization profile page, you can update information about your organization such as the company name, address, VAT number, etc. Organization information is used on generated quotes, invoices, and other organization-related information. The organization profile can be accessed by users with Admin access to the organization by clicking the gears icon next to the organization name on either the Dashboard or in the left menu.","title":"How do I view my account/profile information"},{"location":"how-do-i-view-my-account-profile-information/#how-do-i-view-my-accountprofile-information","text":"Your elmah.io account consists of your personal user account and your organization account. You can access your personal account information available on the Profile page. You can update basic information about yourself, upload a profile photo, and configure how elmah.io should work for you. On the organization profile page, you can update information about your organization such as the company name, address, VAT number, etc. Organization information is used on generated quotes, invoices, and other organization-related information. The organization profile can be accessed by users with Admin access to the organization by clicking the gears icon next to the organization name on either the Dashboard or in the left menu.","title":"How do I view my account/profile information"},{"location":"how-does-the-new-detection-work/","text":"How does the new detection work Being able to identify when a logged error is new or a duplicate of an already logged error is one of the most important features on elmah.io. Many other features are based on this mechanism to help you reduce the number of emails, Slack/Teams messages, and more. We often receive questions about how this works and how to tweak it. This article aims to bring some clarity to questions about this feature. When logging messages to elmah.io using either one of the integrations or through the API, we automatically set a flag named isNew on each log message. Calculating the value of this field is based on a rather complex algorithm. The implementation is closed-source but not a huge secret. Each message is assigned a hash value based on a range of fields like the message template, the severity, the URL, and more. Some values are normalized or modified before being sent as input to the hash function. An example of this is removing numbers from the log message, which will ensure that Error on product 1 and Error on product 2 will be considered the same log message. When receiving a new log message, we check if an existing message with the same hash is already stored in the log. If not, the new message will be marked as New by setting the isNew flag to true . If we already found one or more log messages with the same hash, the new message will have its isNew flag set to false . Messages and apps Most apps and features around sending messages from elmah.io are based on the isNew flag. This means that only new errors trigger the New Error Email , the Slack and Teams apps, etc. This is done to avoid flooding the recipient system with emails or messages. You typically don't want 1,000 emails if the same error occurs 1,000 times. Error occurrence is still important, why there are other features to help you deal with this like the Error Occurrence Email and spike-based machine learning features. Modifying the hash function We sometimes get requests to modify the hash function, but unfortunately, that's currently not possible. We change the implementation from time to time to improve the uniqueness detection over time. If you have an example of two log messages that should have been considered unique or not considered unique, feel free to reach out. This may or may not result in changes to the hash function. There are still some possibilities to force two log messages to not be unique. The obvious is to include different variables inside the log message. Remember that numbers are removed, why this must consist of letters. Another approach is to put individual values in the source field. This can be done in all integrations by implementing the OnMessage action. Some integrations also support setting the source field by including it as structured properties like Error from {source} . Setting recurring messages as New A common request is to get a notification if an error that you believed was fixed re-occur. This scenario is built into elmah.io's issue tracker. When marking a log message as fixed through the UI or API, elmah.io automatically marks all instances of the log message as fixed. If a new log message with the same hash is logged at some point, the isNew flag on this message will be set to true . This will trigger the New Error Email and most of the integrations again. Retention Depending on your current plan, each subscription provides x days of retention for log messages. This means that log messages are automatically deleted after x days in the database. Once all instances of a log message are deleted, a new log message generating the same hash as the deleted messages will be marked as new. To increase the chance of log messages being marked as new, you can lower the retention on each log on the Log Settings page.","title":"How does the new detection work"},{"location":"how-does-the-new-detection-work/#how-does-the-new-detection-work","text":"Being able to identify when a logged error is new or a duplicate of an already logged error is one of the most important features on elmah.io. Many other features are based on this mechanism to help you reduce the number of emails, Slack/Teams messages, and more. We often receive questions about how this works and how to tweak it. This article aims to bring some clarity to questions about this feature. When logging messages to elmah.io using either one of the integrations or through the API, we automatically set a flag named isNew on each log message. Calculating the value of this field is based on a rather complex algorithm. The implementation is closed-source but not a huge secret. Each message is assigned a hash value based on a range of fields like the message template, the severity, the URL, and more. Some values are normalized or modified before being sent as input to the hash function. An example of this is removing numbers from the log message, which will ensure that Error on product 1 and Error on product 2 will be considered the same log message. When receiving a new log message, we check if an existing message with the same hash is already stored in the log. If not, the new message will be marked as New by setting the isNew flag to true . If we already found one or more log messages with the same hash, the new message will have its isNew flag set to false .","title":"How does the new detection work"},{"location":"how-does-the-new-detection-work/#messages-and-apps","text":"Most apps and features around sending messages from elmah.io are based on the isNew flag. This means that only new errors trigger the New Error Email , the Slack and Teams apps, etc. This is done to avoid flooding the recipient system with emails or messages. You typically don't want 1,000 emails if the same error occurs 1,000 times. Error occurrence is still important, why there are other features to help you deal with this like the Error Occurrence Email and spike-based machine learning features.","title":"Messages and apps"},{"location":"how-does-the-new-detection-work/#modifying-the-hash-function","text":"We sometimes get requests to modify the hash function, but unfortunately, that's currently not possible. We change the implementation from time to time to improve the uniqueness detection over time. If you have an example of two log messages that should have been considered unique or not considered unique, feel free to reach out. This may or may not result in changes to the hash function. There are still some possibilities to force two log messages to not be unique. The obvious is to include different variables inside the log message. Remember that numbers are removed, why this must consist of letters. Another approach is to put individual values in the source field. This can be done in all integrations by implementing the OnMessage action. Some integrations also support setting the source field by including it as structured properties like Error from {source} .","title":"Modifying the hash function"},{"location":"how-does-the-new-detection-work/#setting-recurring-messages-as-new","text":"A common request is to get a notification if an error that you believed was fixed re-occur. This scenario is built into elmah.io's issue tracker. When marking a log message as fixed through the UI or API, elmah.io automatically marks all instances of the log message as fixed. If a new log message with the same hash is logged at some point, the isNew flag on this message will be set to true . This will trigger the New Error Email and most of the integrations again.","title":"Setting recurring messages as New"},{"location":"how-does-the-new-detection-work/#retention","text":"Depending on your current plan, each subscription provides x days of retention for log messages. This means that log messages are automatically deleted after x days in the database. Once all instances of a log message are deleted, a new log message generating the same hash as the deleted messages will be marked as new. To increase the chance of log messages being marked as new, you can lower the retention on each log on the Log Settings page.","title":"Retention"},{"location":"how-prices-are-calculated/","text":"How prices are calculated When using elmah.io, you may experience the need to switch plans, update your credit card, or do other tasks which will require changes to your subscription. This document explains the different upgrade/downgrade and payment paths. Switch to a higher plan You can switch to a larger plan at all times. If you purchased a Small Business ($29) on June 1 and want to upgrade to Business ($49) on June 15, we charge you ~ $35. You already paid $15 for half of June on the Small Business plan, so the remaining amount is deducted from the $49. Your next payment will be on July 15. Switch to a lower plan You can switch to a lower plan when your current subscription is renewed. If you purchased a Business plan ($49) on June 15. and downgrade to a Small Business plan ($29) on July 1, you would be charged $49 on June 15, and $29 on July 15. You commit to either a month or a year in advance. Update your credit card A new credit card can be inputted at any time during your subscription. The payment provider will automatically charge the new credit card on the next payment. Purchase a top-up If you need additional messages but don't want to upgrade to a larger plan permanently, you can purchase a top-up. The purchase is made on the credit card already configured on the subscription. If you want to buy the top-up on a different credit card, you will need to use the Update credit card feature first. The price of the top-up is always $19, and you can purchase as many top-ups as you want. Switch payment interval Switching from monthly to annual or annual to monthly is possible. If you switch from monthly to annual, you are charged the difference between the two plans as in Switch to a higher plan . If you switch from annual to monthly, one of two scenarios can happen. If you switch to the same plan or lower, your plan will automatically switch when your current subscription renews (like in Switch to a lower plan ). If you switch to a higher plan, your plan will switch immediately as in Switch to a higher plan . If the price of the remaining time on your current plan covers the price of the new plan, the exceeding amount will be credited to your balance and used to pay for the new plan and any upcoming invoices. Paying for top-ups with the balance is currently not supported. Purchase a subscription from Denmark We are based in Denmark, why selling services to another Danish company requires us to include 25% VAT (moms). The price on the various dialogs will automatically show the price including VAT as well as the VAT amount. Your invoices will include the amount in VAT to inform SKAT.","title":"How prices are calculated"},{"location":"how-prices-are-calculated/#how-prices-are-calculated","text":"When using elmah.io, you may experience the need to switch plans, update your credit card, or do other tasks which will require changes to your subscription. This document explains the different upgrade/downgrade and payment paths.","title":"How prices are calculated"},{"location":"how-prices-are-calculated/#switch-to-a-higher-plan","text":"You can switch to a larger plan at all times. If you purchased a Small Business ($29) on June 1 and want to upgrade to Business ($49) on June 15, we charge you ~ $35. You already paid $15 for half of June on the Small Business plan, so the remaining amount is deducted from the $49. Your next payment will be on July 15.","title":"Switch to a higher plan"},{"location":"how-prices-are-calculated/#switch-to-a-lower-plan","text":"You can switch to a lower plan when your current subscription is renewed. If you purchased a Business plan ($49) on June 15. and downgrade to a Small Business plan ($29) on July 1, you would be charged $49 on June 15, and $29 on July 15. You commit to either a month or a year in advance.","title":"Switch to a lower plan"},{"location":"how-prices-are-calculated/#update-your-credit-card","text":"A new credit card can be inputted at any time during your subscription. The payment provider will automatically charge the new credit card on the next payment.","title":"Update your credit card"},{"location":"how-prices-are-calculated/#purchase-a-top-up","text":"If you need additional messages but don't want to upgrade to a larger plan permanently, you can purchase a top-up. The purchase is made on the credit card already configured on the subscription. If you want to buy the top-up on a different credit card, you will need to use the Update credit card feature first. The price of the top-up is always $19, and you can purchase as many top-ups as you want.","title":"Purchase a top-up"},{"location":"how-prices-are-calculated/#switch-payment-interval","text":"Switching from monthly to annual or annual to monthly is possible. If you switch from monthly to annual, you are charged the difference between the two plans as in Switch to a higher plan . If you switch from annual to monthly, one of two scenarios can happen. If you switch to the same plan or lower, your plan will automatically switch when your current subscription renews (like in Switch to a lower plan ). If you switch to a higher plan, your plan will switch immediately as in Switch to a higher plan . If the price of the remaining time on your current plan covers the price of the new plan, the exceeding amount will be credited to your balance and used to pay for the new plan and any upcoming invoices. Paying for top-ups with the balance is currently not supported.","title":"Switch payment interval"},{"location":"how-prices-are-calculated/#purchase-a-subscription-from-denmark","text":"We are based in Denmark, why selling services to another Danish company requires us to include 25% VAT (moms). The price on the various dialogs will automatically show the price including VAT as well as the VAT amount. Your invoices will include the amount in VAT to inform SKAT.","title":"Purchase a subscription from Denmark"},{"location":"how-to-avoid-emails-getting-classified-as-spam/","text":"How to avoid emails getting classified as spam We do everything in our power to maintain a good email domain reputation. Sometimes emails sent from elmah.io may be classified as spam in your email client. The easiest way to avoid this is to inspect the sender in an email received from @elmah.io and add it to your contact list (we primarily send emails from info@elmah.io and noreply@elmah.io ). How you do this depends on your email client but all major clients have this option. In the sections below, there are alternatives to the contact list approach for various email clients. Gmail If you don't want to add elmah.io addresses to your contact list you can use Gmail's Filters feature to always classify *@elmah.io as not spam. To do so, go to Settings | Filters and create a new filter: Click Create filter and check the Never send it to Spam option: Finally, click the Create filter button, and emails from elmah.io will no longer be classified as spam.","title":"How to avoid emails getting classified as spam"},{"location":"how-to-avoid-emails-getting-classified-as-spam/#how-to-avoid-emails-getting-classified-as-spam","text":"We do everything in our power to maintain a good email domain reputation. Sometimes emails sent from elmah.io may be classified as spam in your email client. The easiest way to avoid this is to inspect the sender in an email received from @elmah.io and add it to your contact list (we primarily send emails from info@elmah.io and noreply@elmah.io ). How you do this depends on your email client but all major clients have this option. In the sections below, there are alternatives to the contact list approach for various email clients.","title":"How to avoid emails getting classified as spam"},{"location":"how-to-avoid-emails-getting-classified-as-spam/#gmail","text":"If you don't want to add elmah.io addresses to your contact list you can use Gmail's Filters feature to always classify *@elmah.io as not spam. To do so, go to Settings | Filters and create a new filter: Click Create filter and check the Never send it to Spam option: Finally, click the Create filter button, and emails from elmah.io will no longer be classified as spam.","title":"Gmail"},{"location":"how-to-configure-and-use-bugster/","text":"How to configure and use Bugster Bugster is the name of our friendly AI-powered bot. Bugster is currently available on this documentation site, as well as inside the elmah.io application. Depending on the context in which you communicate with Bugster, it can answer different kinds of questions. All users will have Bugster available to answer general questions about elmah.io, the documentation, and other topics not related to log data. In this help article, you will learn how to configure Bugster to be used on log data. This way, you can get help analyzing why errors are happening and how to fix them, directly in the elmah.io app. Note We don't use your log data to train Bugster. Log data is currently only shared with Bugster when clicking the Analyze with Bugster button. In case you are using an OpenAI-hosted model, your log data may be used to train OpenAI's models, unless you manually disable this in settings. More about that later in this article. Out of the box, Bugster is available in the top right corner of the elmah.io application. Here, you can ask general elmah.io questions, as known from this documentation site. To give Bugster access to your log data, navigate to the Bugster tab on the organization settings page. To open organization settings, click the gears icon next to your organization name on either the left menu or through the dashboard: As shown in the screenshot, Extended Access , which is required for Bugster to access your log data, is disabled by default. When enabling the Extended Access toggle, various settings can be configured: When Extended Access is enabled, Bugster will have access to messages in your logs. Basic information like the log message, severity, stack trace, etc., is included in this access. Using the toggles in the ACCESS section, you can include more information, as long as part of each log message, like source code and breadcrumbs. These toggles are currently used when you click the Analyze with Bugster button on the log message details: When clicking this button, the Bugster chat window will show up, with Bugster's analysis of why this error happened and what you can do to fix it. Depending on your choices in the ACCESS section of the configuration, more or fewer log message details will be shared, with the potential of improving the answer. On the Bugster configuration, you also need to pick a model. Extended Bugster is currently available on the Business, Business+, and Enterprise plans. Business and Business+ users need to provide their own OpenAI API key, while Enterprise users can choose between an OpenAI API key and a model hosted by us. By picking an elmah.io-hosted model, you make sure that log data doesn't leave our data center, while the OpenAI-hosted models will send log data to OpenAI. In the latter case, we recommend disabling the Improve the model for everyone in the settings of your OpenAI profile to avoid log data being used for training.","title":"How to configure and use Bugster"},{"location":"how-to-configure-and-use-bugster/#how-to-configure-and-use-bugster","text":"Bugster is the name of our friendly AI-powered bot. Bugster is currently available on this documentation site, as well as inside the elmah.io application. Depending on the context in which you communicate with Bugster, it can answer different kinds of questions. All users will have Bugster available to answer general questions about elmah.io, the documentation, and other topics not related to log data. In this help article, you will learn how to configure Bugster to be used on log data. This way, you can get help analyzing why errors are happening and how to fix them, directly in the elmah.io app. Note We don't use your log data to train Bugster. Log data is currently only shared with Bugster when clicking the Analyze with Bugster button. In case you are using an OpenAI-hosted model, your log data may be used to train OpenAI's models, unless you manually disable this in settings. More about that later in this article. Out of the box, Bugster is available in the top right corner of the elmah.io application. Here, you can ask general elmah.io questions, as known from this documentation site. To give Bugster access to your log data, navigate to the Bugster tab on the organization settings page. To open organization settings, click the gears icon next to your organization name on either the left menu or through the dashboard: As shown in the screenshot, Extended Access , which is required for Bugster to access your log data, is disabled by default. When enabling the Extended Access toggle, various settings can be configured: When Extended Access is enabled, Bugster will have access to messages in your logs. Basic information like the log message, severity, stack trace, etc., is included in this access. Using the toggles in the ACCESS section, you can include more information, as long as part of each log message, like source code and breadcrumbs. These toggles are currently used when you click the Analyze with Bugster button on the log message details: When clicking this button, the Bugster chat window will show up, with Bugster's analysis of why this error happened and what you can do to fix it. Depending on your choices in the ACCESS section of the configuration, more or fewer log message details will be shared, with the potential of improving the answer. On the Bugster configuration, you also need to pick a model. Extended Bugster is currently available on the Business, Business+, and Enterprise plans. Business and Business+ users need to provide their own OpenAI API key, while Enterprise users can choose between an OpenAI API key and a model hosted by us. By picking an elmah.io-hosted model, you make sure that log data doesn't leave our data center, while the OpenAI-hosted models will send log data to OpenAI. In the latter case, we recommend disabling the Improve the model for everyone in the settings of your OpenAI profile to avoid log data being used for training.","title":"How to configure and use Bugster"},{"location":"how-to-configure-api-key-permissions/","text":"How to configure API key permissions Security on the elmah.io API is handled through the use of API keys. All requests to the API must be accompanied by an API key. When creating your organization, a default API key was automatically created. API keys can be revoked and you can create multiple API keys for different purposes and projects. Much like a user can be awarded different levels of access on elmah.io, API keys also have a set of permissions. The default created API key for your organization, only have permission to write log messages to elmah.io. To configure permissions for a new or existing API key, either click the Edit or Add API Key button on the API Keys tab of your organization settings. This will show the API key editor view: As mentioned previously, new keys have the messages_write permission enabled only. This permission will cover logging from your application to elmah.io. If your application needs to browse messages from elmah.io, create new logs/applications, etc. you will need to enable the corresponding permission. Notice that read permissions don't need to be enabled, for you to browse logs and log messages on the elmah.io UI. API keys are used by the range of client integrations only. Warning Your API key shouldn't be shared outside your organization. In some situations, you will need to share your API key (like when logging from JavaScript). In these cases, it's essential that your API key only has the messages_write permission enabled. With all permissions enabled, everyone will be able to browse your logs.","title":"How to configure API key permissions"},{"location":"how-to-configure-api-key-permissions/#how-to-configure-api-key-permissions","text":"Security on the elmah.io API is handled through the use of API keys. All requests to the API must be accompanied by an API key. When creating your organization, a default API key was automatically created. API keys can be revoked and you can create multiple API keys for different purposes and projects. Much like a user can be awarded different levels of access on elmah.io, API keys also have a set of permissions. The default created API key for your organization, only have permission to write log messages to elmah.io. To configure permissions for a new or existing API key, either click the Edit or Add API Key button on the API Keys tab of your organization settings. This will show the API key editor view: As mentioned previously, new keys have the messages_write permission enabled only. This permission will cover logging from your application to elmah.io. If your application needs to browse messages from elmah.io, create new logs/applications, etc. you will need to enable the corresponding permission. Notice that read permissions don't need to be enabled, for you to browse logs and log messages on the elmah.io UI. API keys are used by the range of client integrations only. Warning Your API key shouldn't be shared outside your organization. In some situations, you will need to share your API key (like when logging from JavaScript). In these cases, it's essential that your API key only has the messages_write permission enabled. With all permissions enabled, everyone will be able to browse your logs.","title":"How to configure API key permissions"},{"location":"how-to-correlate-messages-across-services/","text":"How to correlate messages across services How to correlate messages across services CorrelationId explained Setting CorrelationId Elmah.Io.Client.Extensions.Correlation ASP.NET Core Microsoft.Extensions.Logging Serilog NLog log4net Durable Azure Functions W3C Trace Context A common architecture is to spread out code across multiple services. Some developers like to split up their code into microservices. Others have requirements for running code asynchronous behind a queue. The common theme here is that code often runs in multiple processes spread across multiple servers. While logging can be easily set up in different projects and services, being able to correlate log messages across multiple services isn't normally available when logging to individual log outputs. Imagine a console application making an HTTP request to your public API. The API calls an internal API, which again puts a message on a queue. A service consumes messages from the queue and ends up logging an error in the error log. Seeing the entire log trace from receiving the request on the API straight down the chain resulting in the error, highly increases the chance of figuring out what went wrong. With the Correlation feature on elmah.io, we want to help you achieve just that. In this article, you will learn how to set up Correlations. Note Correlation currently requires all of your applications to log to the same log on elmah.io. For you to separate log messages from each service, we recommend setting the Application property on all log messages. Filtering on log messages is available through the elmah.io UI. We may want to explore ways to use Correlation across multiple error logs in the future. CorrelationId explained The way log messages are correlated on elmah.io is based on a property on all log messages named correlationId . The field is available both when creating log messages through our API as well as in the Elmah.Io.Client NuGet package. The property is a string which means that you can use whatever schema you want for the correlation ID. To set the correlation ID using the client, use the following code: var myCorrelationId = \"42\"; var client = ElmahioAPI.Create(\"API_KEY\"); await client.Messages.CreateAndNotifyAsync(new Guid(\"LOG_ID\"), new CreateMessage { Title = \"Hello World\", // ... CorrelationId = myCorrelationId }); In a real-world scenario, myCorrelationId wouldn't be hardcoded but pulled from a shared header, message ID, or similar. As long as all services set CorrelationId to the same ID, log messages within a correlation can be searched on the elmah.io UI: Setting CorrelationId How you set the correlation ID depends on which integration you are using. In some cases, a correlation ID is set automatically while others will require a few lines of code. Elmah.Io.Client.Extensions.Correlation We have developed a NuGet package dedicated to setting the correlation ID from the current activity in an easy way. The package can be used together with all of the various client integrations we offer (like Elmah.Io.AspNetCore and Elmah.Io.NLog ). Start by installing the package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client.Extensions.Correlation Install-Package Elmah.Io.Client.Extensions.Correlation <PackageReference Include=\"Elmah.Io.Client.Extensions.Correlation\" Version=\"5.*\" /> paket add Elmah.Io.Client.Extensions.Correlation Next, call the WithCorrelationIdFromActivity method as part of the OnMessage action/event. How you do this depends on which of the client integrations you are using. For Elmah.Io.Client it can be done like this: var elmahIo = ElmahioAPI.Create(\"API_KEY\"); elmahIo.Messages.OnMessage += (sender, args) => { args.Message.WithCorrelationIdFromActivity(); }; For Elmah.Io.AspNetCore it can be done like this: builder.Services.AddElmahIo(options => { // ... options.OnMessage = msg => { msg.WithCorrelationIdFromActivity(); }; }); ASP.NET Core When logging uncaught errors using the Elmah.Io.AspNetCore package, we automatically pick up any traceparent header and put the trace ID as part of the error logged to elmah.io. For an overview of wrapping calls to your ASP.NET Core API in an Activity check out the section about W3C Trace Context. If you want to set the correlation ID manually, you can use the OnMessage action: builder.Services.Configure<ElmahIoOptions>(o => { o.OnMessage = msg => { msg.CorrelationId = \"42\"; }; }); When requested through the browser, a traceparent is not automatically added, unless you manually do so by using an extension as shown in the W3C section. In this case, you can either install the Elmah.Io.Client.Extensions.Correlation package as already explained, or set the correlationId manually by installing the System.Diagnostics.DiagnosticSource NuGet package and adding the following code to the OnMessage action: o.OnMessage = msg => { msg.CorrelationId = System.Diagnostics.Activity.Current?.TraceId.ToString(); }; Microsoft.Extensions.Logging To store a correlation ID when logging through Microsoft.Extensions.Logging you can either set the CorrelationId property (manually or using the Elmah.Io.Client.Extensions.Correlation NuGet package) or rely on the automatic behavior built into Microsoft.Extensions.Logging. To manually set the correlation you can include correlationId as part of the log message: logger.LogInformation(\"A log message with {correlationId}\", \"42\"); Or you can put the correlation ID as part of a logging scope: using (logger.BeginScope(new { CorrelationId = \"42\" })) { logger.LogInformation(\"A log message\"); } In some cases, a correlation ID will be set automatically. If there is a current active Activity (see later), Microsoft.Extensions.Logging automatically decorates all log messages with a custom property named TraceId . The elmah.io backend will pick up any value in the TraceId and use that as the correlation ID. Serilog When logging through Serilog a correlation ID can be added to one or more log messages in multiple ways. The most obvious being on the log message itself: Log.Information(\"A log message with {correlationId}\", \"42\"); If you don't want correlation ID as part of the log message, you can push the property using LogContext : using (LogContext.PushProperty(\"correlationId\", \"42\")) { Log.Information(\"A log message\"); } You will need to install the LogContext enricher for this to work: Log.Logger = new LoggerConfiguration() .Enrich.FromLogContext() // ... .CreateLogger(); The elmah.io sink for Serilog is an async batching sync. This means that log messages are not logged in the same millisecond as one of the logging methods on the Log class is called and the current activity is no longer set. When logging from a web application or other project types where the activity is short-lived, you either need to include the correlation ID as part of the message (as shown in the previous examples) or you need to store the correlation ID as part of the request. For ASP.NET Core this can be done using middleware: app.Use(async (ctx, next) => { IDisposable disposeMe = null; var activity = Activity.Current; if (activity != null) { disposeMe = LogContext.PushProperty(\"correlationid\", activity.TraceId.ToString()); } try { await next(); } finally { disposeMe?.Dispose(); } }); All calls to Serilog within the web request will have the correlation ID set to the TraceId of the current activity. Other frameworks support similar features for enriching the current request or invocation with custom properties. NLog Correlation ID can be set on log messages logged through NLog in multiple ways. The first approach is to include the ID directly in the log message: logger.Info(\"A log message with {correlationId}\", \"42\"); If you don't want the ID as part of the log message you can use either NLog's two context objects: using (MappedDiagnosticsLogicalContext.SetScoped(\"correlationId\", \"42\")) { logger.Info(\"A log message\"); } GlobalDiagnosticsContext.Set(\"correlationId\", \"42\"); You can also add the property manually to the log message using the log event builder API available in NLog: var infoMessage = new LogEventInfo(LogLevel.Info, \"\", \"A log message\"); infoMessage.Properties.Add(\"correlationid\", \"42\"); logger.Info(infoMessage); log4net Correlation ID can be set on log messages logged through log4net in multiple ways. You can include it directly on the LoggingEvent : var properties = new PropertiesDictionary(); properties[\"correlationid\"] = \"42\"; log.Logger.Log(new LoggingEvent(new LoggingEventData { Level = Level.Info, TimeStampUtc = DateTime.UtcNow, Properties = properties, Message = \"A log message\", })); You most likely use the Info , Warn , and similar helper methods to store log messages. In this case, you can set the correlation ID on the ThreadContext : ThreadContext.Properties[\"correlationid\"] = \"42\"; log.Info(\"A log message\"); Please notice that correlationid in both examples must be in all lowercase. Durable Azure Functions Both the in-process and out-of-process (Isolated) models for developing Azure Functions come with the option of Durable Functions. By default, each activity function (functions initiated by the orchestrator) starts its own Activity meaning that log messages sent across multiple functions will not be correlated. To make this work, Durable Functions support Distributed Tracing , which can be enabled in the host.json file: { \"extensions\": { \"durableTask\": { \"tracing\": { \"distributedTracingEnabled\": true, \"version\": \"V2\" } } } } Once enabled, you will need to install the Elmah.Io.Client.Extensions.Correlation NuGet package and call WithCorrelationIdFromActivity as shown previously: app.Services.AddLogging(logging => { logging.AddElmahIo(o => { // ... o.OnMessage = msg => { msg.WithCorrelationIdFromActivity(); }; }); }); Please note that when enabling Distributed Tracing without having configured Application Insights, the functions runtime will show a warning when launching the function app. We are trying to convince Microsoft to either remove this or change it to an information message, since Distributed Tracing doesn't require Application Insights. W3C Trace Context The class Activity has been mentioned a couple of times already. Let's take a look at what that is and how it relates to W3C Trace Context. Trace Context is a specification by W3C for implementing distributed tracing across multiple processes which are already widely adopted. If you generate a trace identifier in a client initiating a chain of events, different Microsoft technologies like ASP.NET Core already pick up the extended set of headers and include those as part of log messages logged through Microsoft.Extensions.Logging. Let's say we have a console application calling an API and we want to log messages in both the console app and in the API and correlate them in elmah.io. In both the console app and in the ASP.NET Core application, you would set up Elmah.Io.Extensions.Logging using the default configuration. Then in the console application, you will wrap the call to the API in an Activity : var httpClient = new HttpClient(); var activity = new Activity(\"ApiCall\").Start(); try { using (logger.BeginScope(new { TraceId = activity.TraceId, ParentId = activity.ParentSpanId, SpanId = activity.SpanId })) { logger.LogInformation(\"Fetching data from the API\"); var result = await httpClient.GetStreamAsync(\"https://localhost:44396/ping\"); // ... } } finally { activity.Stop(); } By creating and starting a new Activity before we call the API, log messages in the console app can be decorated with three additional properties: TraceId , ParentId , and SpanId . This will make sure that all log messages logged within this scope will get the correlation ID set on elmah.io. HttpClient automatically picks up the activity and decorates the request with additional headers. On the API we simply log as normal: [ApiController] [Route(\"[controller]\")] public class PingController : ControllerBase { private readonly ILogger<PingController> _logger; public PingController(ILogger<PingController> logger) { _logger = logger; } [HttpGet] public string Get() { _logger.LogInformation(\"Received a ping\"); return \"pong\"; } } Notice that we didn't have to decorate log messages with additional properties. ASP.NET Core automatically picks up the new headers and decorates all log messages with the correct trace ID. If you want to test this through a browser, you'll need to modify the request headers before the request is made to your web application. There is a range of extensions available to help with this. For the following example, we'll use ModHeader : The extension will enrich all requests with a header named traceparent in the format VERSION-TRACE_ID-SPAN_ID-TRACE_FLAGS . elmah.io will automatically pick up this header and set correlationId to the value of TRACE_ID . If you don't get a correlation ID set on your log messages, we recommend installing the Elmah.Io.Client.Extensions.Correlation NuGet package and calling the following method in the OnMessage event/action: msg.WithCorrelationIdFromActivity();","title":"How to correlate messages across services"},{"location":"how-to-correlate-messages-across-services/#how-to-correlate-messages-across-services","text":"How to correlate messages across services CorrelationId explained Setting CorrelationId Elmah.Io.Client.Extensions.Correlation ASP.NET Core Microsoft.Extensions.Logging Serilog NLog log4net Durable Azure Functions W3C Trace Context A common architecture is to spread out code across multiple services. Some developers like to split up their code into microservices. Others have requirements for running code asynchronous behind a queue. The common theme here is that code often runs in multiple processes spread across multiple servers. While logging can be easily set up in different projects and services, being able to correlate log messages across multiple services isn't normally available when logging to individual log outputs. Imagine a console application making an HTTP request to your public API. The API calls an internal API, which again puts a message on a queue. A service consumes messages from the queue and ends up logging an error in the error log. Seeing the entire log trace from receiving the request on the API straight down the chain resulting in the error, highly increases the chance of figuring out what went wrong. With the Correlation feature on elmah.io, we want to help you achieve just that. In this article, you will learn how to set up Correlations. Note Correlation currently requires all of your applications to log to the same log on elmah.io. For you to separate log messages from each service, we recommend setting the Application property on all log messages. Filtering on log messages is available through the elmah.io UI. We may want to explore ways to use Correlation across multiple error logs in the future.","title":"How to correlate messages across services"},{"location":"how-to-correlate-messages-across-services/#correlationid-explained","text":"The way log messages are correlated on elmah.io is based on a property on all log messages named correlationId . The field is available both when creating log messages through our API as well as in the Elmah.Io.Client NuGet package. The property is a string which means that you can use whatever schema you want for the correlation ID. To set the correlation ID using the client, use the following code: var myCorrelationId = \"42\"; var client = ElmahioAPI.Create(\"API_KEY\"); await client.Messages.CreateAndNotifyAsync(new Guid(\"LOG_ID\"), new CreateMessage { Title = \"Hello World\", // ... CorrelationId = myCorrelationId }); In a real-world scenario, myCorrelationId wouldn't be hardcoded but pulled from a shared header, message ID, or similar. As long as all services set CorrelationId to the same ID, log messages within a correlation can be searched on the elmah.io UI:","title":"CorrelationId explained"},{"location":"how-to-correlate-messages-across-services/#setting-correlationid","text":"How you set the correlation ID depends on which integration you are using. In some cases, a correlation ID is set automatically while others will require a few lines of code.","title":"Setting CorrelationId"},{"location":"how-to-correlate-messages-across-services/#elmahioclientextensionscorrelation","text":"We have developed a NuGet package dedicated to setting the correlation ID from the current activity in an easy way. The package can be used together with all of the various client integrations we offer (like Elmah.Io.AspNetCore and Elmah.Io.NLog ). Start by installing the package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client.Extensions.Correlation Install-Package Elmah.Io.Client.Extensions.Correlation <PackageReference Include=\"Elmah.Io.Client.Extensions.Correlation\" Version=\"5.*\" /> paket add Elmah.Io.Client.Extensions.Correlation Next, call the WithCorrelationIdFromActivity method as part of the OnMessage action/event. How you do this depends on which of the client integrations you are using. For Elmah.Io.Client it can be done like this: var elmahIo = ElmahioAPI.Create(\"API_KEY\"); elmahIo.Messages.OnMessage += (sender, args) => { args.Message.WithCorrelationIdFromActivity(); }; For Elmah.Io.AspNetCore it can be done like this: builder.Services.AddElmahIo(options => { // ... options.OnMessage = msg => { msg.WithCorrelationIdFromActivity(); }; });","title":"Elmah.Io.Client.Extensions.Correlation"},{"location":"how-to-correlate-messages-across-services/#aspnet-core","text":"When logging uncaught errors using the Elmah.Io.AspNetCore package, we automatically pick up any traceparent header and put the trace ID as part of the error logged to elmah.io. For an overview of wrapping calls to your ASP.NET Core API in an Activity check out the section about W3C Trace Context. If you want to set the correlation ID manually, you can use the OnMessage action: builder.Services.Configure<ElmahIoOptions>(o => { o.OnMessage = msg => { msg.CorrelationId = \"42\"; }; }); When requested through the browser, a traceparent is not automatically added, unless you manually do so by using an extension as shown in the W3C section. In this case, you can either install the Elmah.Io.Client.Extensions.Correlation package as already explained, or set the correlationId manually by installing the System.Diagnostics.DiagnosticSource NuGet package and adding the following code to the OnMessage action: o.OnMessage = msg => { msg.CorrelationId = System.Diagnostics.Activity.Current?.TraceId.ToString(); };","title":"ASP.NET Core"},{"location":"how-to-correlate-messages-across-services/#microsoftextensionslogging","text":"To store a correlation ID when logging through Microsoft.Extensions.Logging you can either set the CorrelationId property (manually or using the Elmah.Io.Client.Extensions.Correlation NuGet package) or rely on the automatic behavior built into Microsoft.Extensions.Logging. To manually set the correlation you can include correlationId as part of the log message: logger.LogInformation(\"A log message with {correlationId}\", \"42\"); Or you can put the correlation ID as part of a logging scope: using (logger.BeginScope(new { CorrelationId = \"42\" })) { logger.LogInformation(\"A log message\"); } In some cases, a correlation ID will be set automatically. If there is a current active Activity (see later), Microsoft.Extensions.Logging automatically decorates all log messages with a custom property named TraceId . The elmah.io backend will pick up any value in the TraceId and use that as the correlation ID.","title":"Microsoft.Extensions.Logging"},{"location":"how-to-correlate-messages-across-services/#serilog","text":"When logging through Serilog a correlation ID can be added to one or more log messages in multiple ways. The most obvious being on the log message itself: Log.Information(\"A log message with {correlationId}\", \"42\"); If you don't want correlation ID as part of the log message, you can push the property using LogContext : using (LogContext.PushProperty(\"correlationId\", \"42\")) { Log.Information(\"A log message\"); } You will need to install the LogContext enricher for this to work: Log.Logger = new LoggerConfiguration() .Enrich.FromLogContext() // ... .CreateLogger(); The elmah.io sink for Serilog is an async batching sync. This means that log messages are not logged in the same millisecond as one of the logging methods on the Log class is called and the current activity is no longer set. When logging from a web application or other project types where the activity is short-lived, you either need to include the correlation ID as part of the message (as shown in the previous examples) or you need to store the correlation ID as part of the request. For ASP.NET Core this can be done using middleware: app.Use(async (ctx, next) => { IDisposable disposeMe = null; var activity = Activity.Current; if (activity != null) { disposeMe = LogContext.PushProperty(\"correlationid\", activity.TraceId.ToString()); } try { await next(); } finally { disposeMe?.Dispose(); } }); All calls to Serilog within the web request will have the correlation ID set to the TraceId of the current activity. Other frameworks support similar features for enriching the current request or invocation with custom properties.","title":"Serilog"},{"location":"how-to-correlate-messages-across-services/#nlog","text":"Correlation ID can be set on log messages logged through NLog in multiple ways. The first approach is to include the ID directly in the log message: logger.Info(\"A log message with {correlationId}\", \"42\"); If you don't want the ID as part of the log message you can use either NLog's two context objects: using (MappedDiagnosticsLogicalContext.SetScoped(\"correlationId\", \"42\")) { logger.Info(\"A log message\"); } GlobalDiagnosticsContext.Set(\"correlationId\", \"42\"); You can also add the property manually to the log message using the log event builder API available in NLog: var infoMessage = new LogEventInfo(LogLevel.Info, \"\", \"A log message\"); infoMessage.Properties.Add(\"correlationid\", \"42\"); logger.Info(infoMessage);","title":"NLog"},{"location":"how-to-correlate-messages-across-services/#log4net","text":"Correlation ID can be set on log messages logged through log4net in multiple ways. You can include it directly on the LoggingEvent : var properties = new PropertiesDictionary(); properties[\"correlationid\"] = \"42\"; log.Logger.Log(new LoggingEvent(new LoggingEventData { Level = Level.Info, TimeStampUtc = DateTime.UtcNow, Properties = properties, Message = \"A log message\", })); You most likely use the Info , Warn , and similar helper methods to store log messages. In this case, you can set the correlation ID on the ThreadContext : ThreadContext.Properties[\"correlationid\"] = \"42\"; log.Info(\"A log message\"); Please notice that correlationid in both examples must be in all lowercase.","title":"log4net"},{"location":"how-to-correlate-messages-across-services/#durable-azure-functions","text":"Both the in-process and out-of-process (Isolated) models for developing Azure Functions come with the option of Durable Functions. By default, each activity function (functions initiated by the orchestrator) starts its own Activity meaning that log messages sent across multiple functions will not be correlated. To make this work, Durable Functions support Distributed Tracing , which can be enabled in the host.json file: { \"extensions\": { \"durableTask\": { \"tracing\": { \"distributedTracingEnabled\": true, \"version\": \"V2\" } } } } Once enabled, you will need to install the Elmah.Io.Client.Extensions.Correlation NuGet package and call WithCorrelationIdFromActivity as shown previously: app.Services.AddLogging(logging => { logging.AddElmahIo(o => { // ... o.OnMessage = msg => { msg.WithCorrelationIdFromActivity(); }; }); }); Please note that when enabling Distributed Tracing without having configured Application Insights, the functions runtime will show a warning when launching the function app. We are trying to convince Microsoft to either remove this or change it to an information message, since Distributed Tracing doesn't require Application Insights.","title":"Durable Azure Functions"},{"location":"how-to-correlate-messages-across-services/#w3c-trace-context","text":"The class Activity has been mentioned a couple of times already. Let's take a look at what that is and how it relates to W3C Trace Context. Trace Context is a specification by W3C for implementing distributed tracing across multiple processes which are already widely adopted. If you generate a trace identifier in a client initiating a chain of events, different Microsoft technologies like ASP.NET Core already pick up the extended set of headers and include those as part of log messages logged through Microsoft.Extensions.Logging. Let's say we have a console application calling an API and we want to log messages in both the console app and in the API and correlate them in elmah.io. In both the console app and in the ASP.NET Core application, you would set up Elmah.Io.Extensions.Logging using the default configuration. Then in the console application, you will wrap the call to the API in an Activity : var httpClient = new HttpClient(); var activity = new Activity(\"ApiCall\").Start(); try { using (logger.BeginScope(new { TraceId = activity.TraceId, ParentId = activity.ParentSpanId, SpanId = activity.SpanId })) { logger.LogInformation(\"Fetching data from the API\"); var result = await httpClient.GetStreamAsync(\"https://localhost:44396/ping\"); // ... } } finally { activity.Stop(); } By creating and starting a new Activity before we call the API, log messages in the console app can be decorated with three additional properties: TraceId , ParentId , and SpanId . This will make sure that all log messages logged within this scope will get the correlation ID set on elmah.io. HttpClient automatically picks up the activity and decorates the request with additional headers. On the API we simply log as normal: [ApiController] [Route(\"[controller]\")] public class PingController : ControllerBase { private readonly ILogger<PingController> _logger; public PingController(ILogger<PingController> logger) { _logger = logger; } [HttpGet] public string Get() { _logger.LogInformation(\"Received a ping\"); return \"pong\"; } } Notice that we didn't have to decorate log messages with additional properties. ASP.NET Core automatically picks up the new headers and decorates all log messages with the correct trace ID. If you want to test this through a browser, you'll need to modify the request headers before the request is made to your web application. There is a range of extensions available to help with this. For the following example, we'll use ModHeader : The extension will enrich all requests with a header named traceparent in the format VERSION-TRACE_ID-SPAN_ID-TRACE_FLAGS . elmah.io will automatically pick up this header and set correlationId to the value of TRACE_ID . If you don't get a correlation ID set on your log messages, we recommend installing the Elmah.Io.Client.Extensions.Correlation NuGet package and calling the following method in the OnMessage event/action: msg.WithCorrelationIdFromActivity();","title":"W3C Trace Context"},{"location":"how-to-create-a-new-log/","text":"How to create a new log New logs can be created from the dashboard. In the left menu, click the item with the name Dashboard or navigate to the /dashboard/ URL. When on the dashboard, you will see a large white button underneath your logs with the text Create log . Click the button and fill in the details. Finally, click the Save button, and you will be directed to the log settings page to configure your application to use the new log. If you don't see a button named Create log on the dashboard, it means that you are missing permissions. You will need to be an organization administrator to create new logs inside the organization.","title":"How to create a new log"},{"location":"how-to-create-a-new-log/#how-to-create-a-new-log","text":"New logs can be created from the dashboard. In the left menu, click the item with the name Dashboard or navigate to the /dashboard/ URL. When on the dashboard, you will see a large white button underneath your logs with the text Create log . Click the button and fill in the details. Finally, click the Save button, and you will be directed to the log settings page to configure your application to use the new log. If you don't see a button named Create log on the dashboard, it means that you are missing permissions. You will need to be an organization administrator to create new logs inside the organization.","title":"How to create a new log"},{"location":"how-to-delete-my-account/","text":"How to delete my account In case you no longer need your user account you can delete it. There are two different ways of doing that: Remove it from any paid organization and let it auto-delete one year after the last login. Remove it manually through the elmah.io UI. User accounts are automatically cleaned up when no longer used. You will receive an email one month before we delete your account to give you a chance to keep it. If you want to delete your account immediately, go to your profile and click the Actions tab: When clicking the Delete Account button your user account will be deleted and you will be signed out of elmah.io. You can sign up for a new account using the same email if you want a new account. Warning Deleted accounts cannot be restored. We hard delete to avoid keeping personal data longer than we have to. To delete a user account your user may not be part of any organization. Either delete any organizations shown in the left menu or ask an organization administrator to remove your user from the organization. Once the user is no longer part of any organization, it can be deleted.","title":"How to delete my account"},{"location":"how-to-delete-my-account/#how-to-delete-my-account","text":"In case you no longer need your user account you can delete it. There are two different ways of doing that: Remove it from any paid organization and let it auto-delete one year after the last login. Remove it manually through the elmah.io UI. User accounts are automatically cleaned up when no longer used. You will receive an email one month before we delete your account to give you a chance to keep it. If you want to delete your account immediately, go to your profile and click the Actions tab: When clicking the Delete Account button your user account will be deleted and you will be signed out of elmah.io. You can sign up for a new account using the same email if you want a new account. Warning Deleted accounts cannot be restored. We hard delete to avoid keeping personal data longer than we have to. To delete a user account your user may not be part of any organization. Either delete any organizations shown in the left menu or ask an organization administrator to remove your user from the organization. Once the user is no longer part of any organization, it can be deleted.","title":"How to delete my account"},{"location":"how-to-enable-two-factor-login/","text":"How to enable two-factor login How to enable two-factor login Two-factor with an elmah.io username and password Two-factor with a social provider Troubleshooting elmah.io supports two-factor login through either one of the social providers or a two-factor app like 1Password, Google Authenticator or Authy. Two-factor with an elmah.io username and password When signing into elmah.io with a username and password, two-factor authentication can be enabled on the Security tab on your profile: Click the Start setup button to initiate the process: Follow the instructions on the page to install an app like 1Password, Google Authenticator or Authy. Once you have the app installed, scan the on-screen QR code and input the generated token in the field in step 3. Once two-factor authentication has been successfully set up, the following screen is shown: Two-factor authentication can be disabled at any time by inputting a new code from the authenticator app in the text field and clicking the Deactivate two-factor login button. Tip Popular authenticator apps like Google Authenticator and Microsoft Authenticator support cloud backup. Make sure to enable this in case you lose your phone. When cloud backup is enabled, you can sign in with your main account when you get a new phone and all of your stored accounts will be automatically restored. Two-factor with a social provider When using one of the social providers to log in to elmah.io, two-factor authentication can be enabled through either Twitter, Facebook, Microsoft, or Google. Check out the documentation for each authentication mechanism for details on how to enable two-factor authentication. Troubleshooting When I input a code from the app, elmah.io says that it is invalid There can be a couple of reasons for that: A code can only be used once, so if you recently signed in using a code, you cannot use the same code to deactivate 2FA or similar. You are using an old account in your authenticator app. When setting up 2FA, you will need to scan the code again and create a new account in the authenticator app. Previous elmah.io accounts added to the app cannot be used, even though they share the same email address. The code is indeed invalid or changed since you copied it. Double-check the code and try again.","title":"How to enable two-factor login"},{"location":"how-to-enable-two-factor-login/#how-to-enable-two-factor-login","text":"How to enable two-factor login Two-factor with an elmah.io username and password Two-factor with a social provider Troubleshooting elmah.io supports two-factor login through either one of the social providers or a two-factor app like 1Password, Google Authenticator or Authy.","title":"How to enable two-factor login"},{"location":"how-to-enable-two-factor-login/#two-factor-with-an-elmahio-username-and-password","text":"When signing into elmah.io with a username and password, two-factor authentication can be enabled on the Security tab on your profile: Click the Start setup button to initiate the process: Follow the instructions on the page to install an app like 1Password, Google Authenticator or Authy. Once you have the app installed, scan the on-screen QR code and input the generated token in the field in step 3. Once two-factor authentication has been successfully set up, the following screen is shown: Two-factor authentication can be disabled at any time by inputting a new code from the authenticator app in the text field and clicking the Deactivate two-factor login button. Tip Popular authenticator apps like Google Authenticator and Microsoft Authenticator support cloud backup. Make sure to enable this in case you lose your phone. When cloud backup is enabled, you can sign in with your main account when you get a new phone and all of your stored accounts will be automatically restored.","title":"Two-factor with an elmah.io username and password"},{"location":"how-to-enable-two-factor-login/#two-factor-with-a-social-provider","text":"When using one of the social providers to log in to elmah.io, two-factor authentication can be enabled through either Twitter, Facebook, Microsoft, or Google. Check out the documentation for each authentication mechanism for details on how to enable two-factor authentication.","title":"Two-factor with a social provider"},{"location":"how-to-enable-two-factor-login/#troubleshooting","text":"When I input a code from the app, elmah.io says that it is invalid There can be a couple of reasons for that: A code can only be used once, so if you recently signed in using a code, you cannot use the same code to deactivate 2FA or similar. You are using an old account in your authenticator app. When setting up 2FA, you will need to scan the code again and create a new account in the authenticator app. Previous elmah.io accounts added to the app cannot be used, even though they share the same email address. The code is indeed invalid or changed since you copied it. Double-check the code and try again.","title":"Troubleshooting"},{"location":"how-to-export-log-messages-to-csv-or-json/","text":"How to export log messages to CSV or JSON Log messages can be exported from elmah.io in a few ways. Here's a range of options, depending on how much data you need and what tools you have available. Exporting using the elmah.io CLI To export multiple messages, the easiest approach is to use the elmah.io CLI . If you haven't installed it already, it can be done like this: dotnet tool install --global Elmah.Io.Cli Then call the export command: elmahio export --apiKey API_KEY --logId LOG_ID --dateFrom 2020-08-21 --dateTo 2020-08-28 --query \"statusCode: 404\" The command exports to JSON as a default, but you can export to CSV by including the --format Csv parameter. Exporting using the elmah.io CLI If you prefer making an HTTP request or need to integrate this in another tool that doesn't support calling the elmah.io CLI, you can export messages using the elmah.io API. To return messages, use the /messages/ endpoint: GET https://api.elmah.io/v3/messages/LOG_ID?query=statusCode:404 This will return matching log messages as JSON that you can further parse and process if you need it in another format. Exporting a single message If you want to export a single message, you can do it directly from the elmah.io UI. On the message details view, click the Export message icon in the toolbar on the right and then click Copy message . This will export the log message details in a key/value format that can be imported in various tools.","title":"How to export log messages to CSV or JSON"},{"location":"how-to-export-log-messages-to-csv-or-json/#how-to-export-log-messages-to-csv-or-json","text":"Log messages can be exported from elmah.io in a few ways. Here's a range of options, depending on how much data you need and what tools you have available.","title":"How to export log messages to CSV or JSON"},{"location":"how-to-export-log-messages-to-csv-or-json/#exporting-using-the-elmahio-cli","text":"To export multiple messages, the easiest approach is to use the elmah.io CLI . If you haven't installed it already, it can be done like this: dotnet tool install --global Elmah.Io.Cli Then call the export command: elmahio export --apiKey API_KEY --logId LOG_ID --dateFrom 2020-08-21 --dateTo 2020-08-28 --query \"statusCode: 404\" The command exports to JSON as a default, but you can export to CSV by including the --format Csv parameter.","title":"Exporting using the elmah.io CLI"},{"location":"how-to-export-log-messages-to-csv-or-json/#exporting-using-the-elmahio-cli_1","text":"If you prefer making an HTTP request or need to integrate this in another tool that doesn't support calling the elmah.io CLI, you can export messages using the elmah.io API. To return messages, use the /messages/ endpoint: GET https://api.elmah.io/v3/messages/LOG_ID?query=statusCode:404 This will return matching log messages as JSON that you can further parse and process if you need it in another format.","title":"Exporting using the elmah.io CLI"},{"location":"how-to-export-log-messages-to-csv-or-json/#exporting-a-single-message","text":"If you want to export a single message, you can do it directly from the elmah.io UI. On the message details view, click the Export message icon in the toolbar on the right and then click Copy message . This will export the log message details in a key/value format that can be imported in various tools.","title":"Exporting a single message"},{"location":"how-to-get-elmah-io-to-resolve-the-correct-client-ip/","text":"How to get elmah.io to resolve the correct client IP elmah.io try to resolve the IP of the client causing a log message, no matter what severity (Error, Information, etc.) and platform (browser, web-server, etc.) a log message is sent from. This is done by looking at multiple pieces of information provided by the sender. In some cases, elmah.io may not be able to resolve the IP or resolve a wrong IP address. In this document, you will find help getting the right client IP into elmah.io. Missing IP when using a proxy If you are using a proxy layer in between the client and your web server, you may experience log messages without a client IP. This is probably caused by the proxy hiding the original IP from your web server. Most proxies offer an alternative server variable like the X-Forwarded-For header. You can inspect the server variables on the Server Variables tab on elmah.io and check if your proxy includes the original IP in any of the variables. We support custom headers from a range of proxies (like Cloudflare). Most proxies support some kind of settings area where the X-Forwarded-For header can be enabled. If you are using a proxy that uses custom headers, please make sure to reach out and we may want to include the custom header to elmah.io. Wrong IP when using a proxy If the client IP is wrong when behind a proxy, it is typically because the proxy replaces the client IP when calling your server with the IP of its server. This is a poor practice and makes it very hard for elmah.io to figure out which IP belongs to the user and which one to the proxy. Luckily, this is configurable in a lot of proxies through their settings area. Missing IP This can be caused by several issues. In most instances, the client doesn't include any server variables that reveal the IP address. In this case, the client IP will not be available within the elmah.io UI. In some cases, you may know the user's IP from session variables or similar. To include an IP on messages logged to elmah.io, you can implement the OnMessage event or action, depending on which integration you are using. In this example, we use the OnMessage event on the Elmah.Io.Client package to include the user's IP manually: var userIp = \"1.1.1.1\"; // <-- just for the demo var client = ElmahioAPI.Create(\"API_KEY\"); client.Messages.OnMessage += (sender, args) => { var message = args.Message; if (message.ServerVariables == null) message.ServerVariables = new List<Item>(); message.ServerVariables.Add(new Item(\"X-FORWARDED-FOR\", userIp)); };","title":"How to get elmah.io to resolve the correct client IP"},{"location":"how-to-get-elmah-io-to-resolve-the-correct-client-ip/#how-to-get-elmahio-to-resolve-the-correct-client-ip","text":"elmah.io try to resolve the IP of the client causing a log message, no matter what severity (Error, Information, etc.) and platform (browser, web-server, etc.) a log message is sent from. This is done by looking at multiple pieces of information provided by the sender. In some cases, elmah.io may not be able to resolve the IP or resolve a wrong IP address. In this document, you will find help getting the right client IP into elmah.io.","title":"How to get elmah.io to resolve the correct client IP"},{"location":"how-to-get-elmah-io-to-resolve-the-correct-client-ip/#missing-ip-when-using-a-proxy","text":"If you are using a proxy layer in between the client and your web server, you may experience log messages without a client IP. This is probably caused by the proxy hiding the original IP from your web server. Most proxies offer an alternative server variable like the X-Forwarded-For header. You can inspect the server variables on the Server Variables tab on elmah.io and check if your proxy includes the original IP in any of the variables. We support custom headers from a range of proxies (like Cloudflare). Most proxies support some kind of settings area where the X-Forwarded-For header can be enabled. If you are using a proxy that uses custom headers, please make sure to reach out and we may want to include the custom header to elmah.io.","title":"Missing IP when using a proxy"},{"location":"how-to-get-elmah-io-to-resolve-the-correct-client-ip/#wrong-ip-when-using-a-proxy","text":"If the client IP is wrong when behind a proxy, it is typically because the proxy replaces the client IP when calling your server with the IP of its server. This is a poor practice and makes it very hard for elmah.io to figure out which IP belongs to the user and which one to the proxy. Luckily, this is configurable in a lot of proxies through their settings area.","title":"Wrong IP when using a proxy"},{"location":"how-to-get-elmah-io-to-resolve-the-correct-client-ip/#missing-ip","text":"This can be caused by several issues. In most instances, the client doesn't include any server variables that reveal the IP address. In this case, the client IP will not be available within the elmah.io UI. In some cases, you may know the user's IP from session variables or similar. To include an IP on messages logged to elmah.io, you can implement the OnMessage event or action, depending on which integration you are using. In this example, we use the OnMessage event on the Elmah.Io.Client package to include the user's IP manually: var userIp = \"1.1.1.1\"; // <-- just for the demo var client = ElmahioAPI.Create(\"API_KEY\"); client.Messages.OnMessage += (sender, args) => { var message = args.Message; if (message.ServerVariables == null) message.ServerVariables = new List<Item>(); message.ServerVariables.Add(new Item(\"X-FORWARDED-FOR\", userIp)); };","title":"Missing IP"},{"location":"how-to-get-the-sql-tab-to-show-up/","text":"How to get the SQL tab to show up The elmah.io UI can offer to show any SQL code part of the current context of logging a message. The code will show up in the log message details as a tab named SQL : The tab shows a formatted view of the SQL code including any parameters and/or syntax errors. This can help debug exceptions thrown while executing SQL code against a relational database. To make the SQL tab show up, custom information needs to be included in the Data dictionary of a log message. The following sections will go into detail on how to include the custom information in various ways. Entity Framework Core Entity Framework Core is easy since it already includes any SQL code as part of the messages logged through Microsoft.Extensions.Logging's ILogger . The SQL code and parameters are logged as two properties named commandText and parameters . elmah.io will automatically pick up these properties and show the SQL tab with the formatted results. As a default, all values in parameters are not logged as part of the message. You will see this from values being set to ? in the UI. To have the real values show up, you will need to enable sensitive data logging when setting up EF Core: services.AddDbContext<Context>(options => { // Other code like: options.UseSqlServer(connectionString); options.EnableSensitiveDataLogging(true); // \u2b05\ufe0f Set this to true }); This should not be set if you include sensitive details like social security numbers, passwords, and similar as SQL query parameters. Manually If you want to attach SQL to a log message made manually, you can go one of two ways. The first way is to fill in the commandText and parameters Data entries shown above. When creating a message on Elmah.Io.Client it could look like this: client.Messages.CreateAndNotify(logId, new CreateMessage { Title = \"Log message with SQL attached\", Severity = Severity.Error.ToString(), Data = new List<Item> { new Item { Key = \"commandText\", Value = \"SELECT * FROM USERS WHERE Name = @columnValue OR Name = @columnTwoValue\" }, new Item { Key = \"parameters\", Value = \"columnValue='Eduard' (Nullable = false) (Size = 6), columnTwoValue='Thomas' (Nullable = false) (Size = 6)\" }, }, }); The value of the parameters item needs to correspond to the format of that Entity Framework and the System.Data namespace uses. The second approach is to provide elmah.io with a single Data item named X-ELMAHIO-SQL . The value of this item should be a JSON format as seen in the following example: var sql = new { Raw = \"SELECT * FROM USERS WHERE Name = @columnValue OR Name = @columnTwoValue\", Parameters = new[] { new { IsNullable = false, Size = 6, Name = \"columnValue\", Value = \"Eduard\" }, new { IsNullable = false, Size = 6, Name = \"columnTwoValue\", Value = \"Thomas\" }, }, }; client.Messages.CreateAndNotify(logId, new CreateMessage { Title = \"Log message with SQL attached\", Severity = Severity.Error.ToString(), Data = new List<Item> { new Item { Key = \"X-ELMAHIO-SQL\", Value = JsonConvert.SerializeObject(sql) }, }, }); The JSON generated by serializing the anonymous object will look like this: { \"Raw\": \"SELECT * FROM USERS WHERE Name = @columnValue OR Name = @columnTwoValue\", \"Parameters\": [ { \"IsNullable\": false, \"Size\": 6, \"Name\": \"columnValue\", \"Value\": \"Eduard\" }, { \"IsNullable\": false, \"Size\": 6, \"Name\": \"columnTwoValue\", \"Value\": \"Thomas\" } ] }","title":"How to get the SQL tab to show up"},{"location":"how-to-get-the-sql-tab-to-show-up/#how-to-get-the-sql-tab-to-show-up","text":"The elmah.io UI can offer to show any SQL code part of the current context of logging a message. The code will show up in the log message details as a tab named SQL : The tab shows a formatted view of the SQL code including any parameters and/or syntax errors. This can help debug exceptions thrown while executing SQL code against a relational database. To make the SQL tab show up, custom information needs to be included in the Data dictionary of a log message. The following sections will go into detail on how to include the custom information in various ways.","title":"How to get the SQL tab to show up"},{"location":"how-to-get-the-sql-tab-to-show-up/#entity-framework-core","text":"Entity Framework Core is easy since it already includes any SQL code as part of the messages logged through Microsoft.Extensions.Logging's ILogger . The SQL code and parameters are logged as two properties named commandText and parameters . elmah.io will automatically pick up these properties and show the SQL tab with the formatted results. As a default, all values in parameters are not logged as part of the message. You will see this from values being set to ? in the UI. To have the real values show up, you will need to enable sensitive data logging when setting up EF Core: services.AddDbContext<Context>(options => { // Other code like: options.UseSqlServer(connectionString); options.EnableSensitiveDataLogging(true); // \u2b05\ufe0f Set this to true }); This should not be set if you include sensitive details like social security numbers, passwords, and similar as SQL query parameters.","title":"Entity Framework Core"},{"location":"how-to-get-the-sql-tab-to-show-up/#manually","text":"If you want to attach SQL to a log message made manually, you can go one of two ways. The first way is to fill in the commandText and parameters Data entries shown above. When creating a message on Elmah.Io.Client it could look like this: client.Messages.CreateAndNotify(logId, new CreateMessage { Title = \"Log message with SQL attached\", Severity = Severity.Error.ToString(), Data = new List<Item> { new Item { Key = \"commandText\", Value = \"SELECT * FROM USERS WHERE Name = @columnValue OR Name = @columnTwoValue\" }, new Item { Key = \"parameters\", Value = \"columnValue='Eduard' (Nullable = false) (Size = 6), columnTwoValue='Thomas' (Nullable = false) (Size = 6)\" }, }, }); The value of the parameters item needs to correspond to the format of that Entity Framework and the System.Data namespace uses. The second approach is to provide elmah.io with a single Data item named X-ELMAHIO-SQL . The value of this item should be a JSON format as seen in the following example: var sql = new { Raw = \"SELECT * FROM USERS WHERE Name = @columnValue OR Name = @columnTwoValue\", Parameters = new[] { new { IsNullable = false, Size = 6, Name = \"columnValue\", Value = \"Eduard\" }, new { IsNullable = false, Size = 6, Name = \"columnTwoValue\", Value = \"Thomas\" }, }, }; client.Messages.CreateAndNotify(logId, new CreateMessage { Title = \"Log message with SQL attached\", Severity = Severity.Error.ToString(), Data = new List<Item> { new Item { Key = \"X-ELMAHIO-SQL\", Value = JsonConvert.SerializeObject(sql) }, }, }); The JSON generated by serializing the anonymous object will look like this: { \"Raw\": \"SELECT * FROM USERS WHERE Name = @columnValue OR Name = @columnTwoValue\", \"Parameters\": [ { \"IsNullable\": false, \"Size\": 6, \"Name\": \"columnValue\", \"Value\": \"Eduard\" }, { \"IsNullable\": false, \"Size\": 6, \"Name\": \"columnTwoValue\", \"Value\": \"Thomas\" } ] }","title":"Manually"},{"location":"how-to-include-source-code-in-log-messages/","text":"How to include source code in log messages How to include source code in log messages From the file system From the PDB file Manually Include source code Troubleshooting Sometimes, being able to see the exact code causing an error, is much more helpful than looking at other details around the current HTTP context and similar. If you often find yourself opening Visual Studio or Code to inspect the failing line, embedding source code in errors and log messages will speed up the process. In this article, you will learn how to configure elmah.io to include source code when logging messages using the Elmah.Io.Client.Extensions.SourceCode NuGet package. Note The Elmah.Io.Client.Extensions.SourceCode package requires Elmah.Io.Client version 4.0 or newer. No matter what integration you are using (with a few exceptions) you are using the Elmah.Io.Client NuGet package to communicate with the elmah.io API. We have built a range of extensions for this package, to avoid including too many features not related to communicating with the API into the client package. One of them is for including source code when logging messages. Start by installing the Elmah.Io.Client.Extensions.SourceCode NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client.Extensions.SourceCode Install-Package Elmah.Io.Client.Extensions.SourceCode <PackageReference Include=\"Elmah.Io.Client.Extensions.SourceCode\" Version=\"5.*\" /> paket add Elmah.Io.Client.Extensions.SourceCode There are currently three ways of including source code with log messages. The first two ways require the Elmah.Io.Client.Extensions.SourceCode package, while the third one can be done manually. From the file system This is the most simple approach meant for local development. When logging a stack trace from your local machine, the trace includes the absolute path to the file on your file system, as well as the line causing a log message (typically an error). To set this up, you will need to implement the OnMessage event through the Elmah.Io.Client package. Depending on which integration you are using, the name of that event or action can vary. What you are looking to do is to call the WithSourceCodeFromFileSystem method on log messages you want to include source code. This is an example when using the Elmah.Io.Client directly: var elmahIoClient = ElmahioAPI.Create(\"API_KEY\"); elmahIoClient.Messages.OnMessage += (sender, e) => e.Message.WithSourceCodeFromFileSystem(); Using an integration like Elmah.Io.AspNetCore uses the same method: services.AddElmahIo(options => { options.OnMessage = msg => msg.WithSourceCodeFromFileSystem(); }); This will automatically instruct Elmah.Io.Client.Extensions.Source to try and parse any stack trace in the details property and embed the source code. For an example of how to use the WithSourceCodeFromFileSystem method, check out the following sample: Elmah.Io.Client.Extensions.SourceCode.FileSystem . From the PDB file When deploying your code on another environment, you typically don't have the original code available. If you copy your source code to the same absolute path as when building, you can use the file-system approach shown above. If not, embedding the source code in the PDB file can be the option. Before doing so, make sure you include filename and line numbers in stack traces on all environments as shown here: Include filename and line number in stack traces . For the old project template the Debugging information field needs a value of Portable . For the new project template the Debug symbols field needs a value of PDB file, portable across platforms . To embed source code in the PDB file built alongside your DLL files, include the following property in your csproj file: <PropertyGroup> <EmbedAllSources>true</EmbedAllSources> </PropertyGroup> Be aware that this will include your original source code in your deployment which may not be a good approach if other people have access to the environment or binary files. Next, call the WithSourceCodeFromPdb method: var elmahIoClient = ElmahioAPI.Create(\"API_KEY\"); elmahIoClient.Messages.OnMessage += (sender, e) => e.Message.WithSourceCodeFromPdb(); For an example of how to do this from ASP.NET Core, you can use the same approach as specified in the previous section: services.AddElmahIo(options => { options.OnMessage = msg => msg.WithSourceCodeFromPdb(); }); All of our integrations support a message callback somehow. For an example of how to use the WithSourceCodeFromPdb method, check out the following sample: Elmah.Io.Client.Extensions.SourceCode.PdbSample for .NET and Elmah.Io.Client.Extensions.SourceCode.NetFrameworkPdb for .NET Framework. Manually In case you want to include source code manually, you can use the OnMessage event and the Code property on the CreateMessage class: var elmahIoClient = ElmahioAPI.Create(\"API_KEY\"); elmahIoClient.Messages.OnMessage += (sender, e) => { e.Message.Code = FetchCode(); } You will need to implement the FetchCode method to return the source code to include. Only 21 lines of code are supported for now. In case you want elmah.io to show the correct line numbers, you will need to tell us how the first line number in the provided code matches your original source file as well as the line number causing the error. This is done by adding two Item s to the Data dictionary on CreateMessage : var elmahIoClient = ElmahioAPI.Create(\"API_KEY\"); elmahIoClient.Messages.OnMessage += (sender, e) => { e.Message.Code = FetchCode(); if (e.Message.Data == null) e.Message.Data = new List<Item>(); e.Message.Data.Add(new Item(\"X-ELMAHIO-CODESTARTLINE\", \"42\")); e.Message.Data.Add(new Item(\"X-ELMAHIO-CODELINE\", \"51\")); } This will show line number 42 next to the first code line and highlight line number 51 in the elmah.io UI. Include source code Troubleshooting If no source code shows up on elmah.io log messages, you can start by running through the following checks: Make sure that the log message contains a stack trace in the details field. Make sure that the stack trace contains absolute path filenames and line numbers for the code causing the stack trace. Make sure that you are calling the WithSourceCodeFromPdb or WithSourceCodeFromFileSystem method. Make sure that the Elmah.Io.Client.Extensions.SourceCode.dll file is in your deployed application. Make sure that your project has Portable set in Debugging information or PDB File, portable across platforms set in Debug symbols . For PDB files, make sure that you have included the EmbedAllSources element in your csproj file. Look inside the Data tab on the logged message. It may contain a key named X-ELMAHIO-CODEERROR with a value explaining what went wrong.","title":"How to include source code in log messages"},{"location":"how-to-include-source-code-in-log-messages/#how-to-include-source-code-in-log-messages","text":"How to include source code in log messages From the file system From the PDB file Manually Include source code Troubleshooting Sometimes, being able to see the exact code causing an error, is much more helpful than looking at other details around the current HTTP context and similar. If you often find yourself opening Visual Studio or Code to inspect the failing line, embedding source code in errors and log messages will speed up the process. In this article, you will learn how to configure elmah.io to include source code when logging messages using the Elmah.Io.Client.Extensions.SourceCode NuGet package. Note The Elmah.Io.Client.Extensions.SourceCode package requires Elmah.Io.Client version 4.0 or newer. No matter what integration you are using (with a few exceptions) you are using the Elmah.Io.Client NuGet package to communicate with the elmah.io API. We have built a range of extensions for this package, to avoid including too many features not related to communicating with the API into the client package. One of them is for including source code when logging messages. Start by installing the Elmah.Io.Client.Extensions.SourceCode NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client.Extensions.SourceCode Install-Package Elmah.Io.Client.Extensions.SourceCode <PackageReference Include=\"Elmah.Io.Client.Extensions.SourceCode\" Version=\"5.*\" /> paket add Elmah.Io.Client.Extensions.SourceCode There are currently three ways of including source code with log messages. The first two ways require the Elmah.Io.Client.Extensions.SourceCode package, while the third one can be done manually.","title":"How to include source code in log messages"},{"location":"how-to-include-source-code-in-log-messages/#from-the-file-system","text":"This is the most simple approach meant for local development. When logging a stack trace from your local machine, the trace includes the absolute path to the file on your file system, as well as the line causing a log message (typically an error). To set this up, you will need to implement the OnMessage event through the Elmah.Io.Client package. Depending on which integration you are using, the name of that event or action can vary. What you are looking to do is to call the WithSourceCodeFromFileSystem method on log messages you want to include source code. This is an example when using the Elmah.Io.Client directly: var elmahIoClient = ElmahioAPI.Create(\"API_KEY\"); elmahIoClient.Messages.OnMessage += (sender, e) => e.Message.WithSourceCodeFromFileSystem(); Using an integration like Elmah.Io.AspNetCore uses the same method: services.AddElmahIo(options => { options.OnMessage = msg => msg.WithSourceCodeFromFileSystem(); }); This will automatically instruct Elmah.Io.Client.Extensions.Source to try and parse any stack trace in the details property and embed the source code. For an example of how to use the WithSourceCodeFromFileSystem method, check out the following sample: Elmah.Io.Client.Extensions.SourceCode.FileSystem .","title":"From the file system"},{"location":"how-to-include-source-code-in-log-messages/#from-the-pdb-file","text":"When deploying your code on another environment, you typically don't have the original code available. If you copy your source code to the same absolute path as when building, you can use the file-system approach shown above. If not, embedding the source code in the PDB file can be the option. Before doing so, make sure you include filename and line numbers in stack traces on all environments as shown here: Include filename and line number in stack traces . For the old project template the Debugging information field needs a value of Portable . For the new project template the Debug symbols field needs a value of PDB file, portable across platforms . To embed source code in the PDB file built alongside your DLL files, include the following property in your csproj file: <PropertyGroup> <EmbedAllSources>true</EmbedAllSources> </PropertyGroup> Be aware that this will include your original source code in your deployment which may not be a good approach if other people have access to the environment or binary files. Next, call the WithSourceCodeFromPdb method: var elmahIoClient = ElmahioAPI.Create(\"API_KEY\"); elmahIoClient.Messages.OnMessage += (sender, e) => e.Message.WithSourceCodeFromPdb(); For an example of how to do this from ASP.NET Core, you can use the same approach as specified in the previous section: services.AddElmahIo(options => { options.OnMessage = msg => msg.WithSourceCodeFromPdb(); }); All of our integrations support a message callback somehow. For an example of how to use the WithSourceCodeFromPdb method, check out the following sample: Elmah.Io.Client.Extensions.SourceCode.PdbSample for .NET and Elmah.Io.Client.Extensions.SourceCode.NetFrameworkPdb for .NET Framework.","title":"From the PDB file"},{"location":"how-to-include-source-code-in-log-messages/#manually","text":"In case you want to include source code manually, you can use the OnMessage event and the Code property on the CreateMessage class: var elmahIoClient = ElmahioAPI.Create(\"API_KEY\"); elmahIoClient.Messages.OnMessage += (sender, e) => { e.Message.Code = FetchCode(); } You will need to implement the FetchCode method to return the source code to include. Only 21 lines of code are supported for now. In case you want elmah.io to show the correct line numbers, you will need to tell us how the first line number in the provided code matches your original source file as well as the line number causing the error. This is done by adding two Item s to the Data dictionary on CreateMessage : var elmahIoClient = ElmahioAPI.Create(\"API_KEY\"); elmahIoClient.Messages.OnMessage += (sender, e) => { e.Message.Code = FetchCode(); if (e.Message.Data == null) e.Message.Data = new List<Item>(); e.Message.Data.Add(new Item(\"X-ELMAHIO-CODESTARTLINE\", \"42\")); e.Message.Data.Add(new Item(\"X-ELMAHIO-CODELINE\", \"51\")); } This will show line number 42 next to the first code line and highlight line number 51 in the elmah.io UI.","title":"Manually"},{"location":"how-to-include-source-code-in-log-messages/#include-source-code-troubleshooting","text":"If no source code shows up on elmah.io log messages, you can start by running through the following checks: Make sure that the log message contains a stack trace in the details field. Make sure that the stack trace contains absolute path filenames and line numbers for the code causing the stack trace. Make sure that you are calling the WithSourceCodeFromPdb or WithSourceCodeFromFileSystem method. Make sure that the Elmah.Io.Client.Extensions.SourceCode.dll file is in your deployed application. Make sure that your project has Portable set in Debugging information or PDB File, portable across platforms set in Debug symbols . For PDB files, make sure that you have included the EmbedAllSources element in your csproj file. Look inside the Data tab on the logged message. It may contain a key named X-ELMAHIO-CODEERROR with a value explaining what went wrong.","title":"Include source code Troubleshooting"},{"location":"how-to-log-to-elmah-io-from-net-4-5/","text":"How to log to elmah.io from .NET 4.5 elmah.io is being hosted on Microsoft Azure. Azure is getting ready to phase out support for security protocols lower than TLS 1.2. The support for earlier versions like SSL, TLS, and TLS 1.1 will be removed by 31 August 2025. This means that our API will not accept connections with settings lower than TLS 1.2 from that date. If you are running on .NET 4.6 or newer, you don't need to change anything since TLS 1.2 is the default from that version and forward. Since our clients don't support .NET versions earlier than .NET 4.5, this only leaves out .NET 4.5. So, if your application is running on .NET 4.5, you will need to do one of two things before August 2025 to continue logging errors to elmah.io: Upgrade your application to use a minimum of .NET 4.6 (recommended). Include the following code during startup in your application (like in the Global.asax.cs file for ASP.NET applications and Program.cs for other types of applications): ServicePointManager.SecurityProtocol |= SecurityProtocolType.Tls12; This will include TLS 1.2 as a supported security protocol in your application.","title":"How to log to elmah.io from .NET 4.5"},{"location":"how-to-log-to-elmah-io-from-net-4-5/#how-to-log-to-elmahio-from-net-45","text":"elmah.io is being hosted on Microsoft Azure. Azure is getting ready to phase out support for security protocols lower than TLS 1.2. The support for earlier versions like SSL, TLS, and TLS 1.1 will be removed by 31 August 2025. This means that our API will not accept connections with settings lower than TLS 1.2 from that date. If you are running on .NET 4.6 or newer, you don't need to change anything since TLS 1.2 is the default from that version and forward. Since our clients don't support .NET versions earlier than .NET 4.5, this only leaves out .NET 4.5. So, if your application is running on .NET 4.5, you will need to do one of two things before August 2025 to continue logging errors to elmah.io: Upgrade your application to use a minimum of .NET 4.6 (recommended). Include the following code during startup in your application (like in the Global.asax.cs file for ASP.NET applications and Program.cs for other types of applications): ServicePointManager.SecurityProtocol |= SecurityProtocolType.Tls12; This will include TLS 1.2 as a supported security protocol in your application.","title":"How to log to elmah.io from .NET 4.5"},{"location":"how-to-manage-subscriptions-update-credit-cards-etc/","text":"How to manage subscriptions, update credit cards, etc. Your subscription is managed from the organization settings page. To open organization settings, click the gears icon next to your organization name on either the left menu or through the dashboard: When on the organization settings page, click the Subscription tab. Your subscription can be managed by scrolling to the bottom of the page and looking for the currently active subscription: In the following sections, we will go through each button. Purchase top-up If getting near your monthly log message limit you can purchase a top-up to avoid having to permanently upgrade to a larger plan. Top-ups are priced at $19 and will add 25,000 messages and 1,000 emails to your subscription for the rest of the calendar month. Update Credit Card If your recent payment failed or you received a new credit card from your bank, you can use this button to input the new credit card. Cancel Subscription To cancel your current subscription you can click the Cancel Subscription button. This will open the chat where we will guide you through the process. We don't use a manual offboarding process to try and convince your to stay or to make it hard for you to leave. When leaving a system like elmah.io, we need additional details from you like when you want to cancel (mostly geared towards annual subscriptions) and to make sure that you have backed up all data from elmah.io before it is cleaned up.","title":"How to manage subscriptions, update credit cards, etc."},{"location":"how-to-manage-subscriptions-update-credit-cards-etc/#how-to-manage-subscriptions-update-credit-cards-etc","text":"Your subscription is managed from the organization settings page. To open organization settings, click the gears icon next to your organization name on either the left menu or through the dashboard: When on the organization settings page, click the Subscription tab. Your subscription can be managed by scrolling to the bottom of the page and looking for the currently active subscription: In the following sections, we will go through each button.","title":"How to manage subscriptions, update credit cards, etc."},{"location":"how-to-manage-subscriptions-update-credit-cards-etc/#purchase-top-up","text":"If getting near your monthly log message limit you can purchase a top-up to avoid having to permanently upgrade to a larger plan. Top-ups are priced at $19 and will add 25,000 messages and 1,000 emails to your subscription for the rest of the calendar month.","title":"Purchase top-up"},{"location":"how-to-manage-subscriptions-update-credit-cards-etc/#update-credit-card","text":"If your recent payment failed or you received a new credit card from your bank, you can use this button to input the new credit card.","title":"Update Credit Card"},{"location":"how-to-manage-subscriptions-update-credit-cards-etc/#cancel-subscription","text":"To cancel your current subscription you can click the Cancel Subscription button. This will open the chat where we will guide you through the process. We don't use a manual offboarding process to try and convince your to stay or to make it hard for you to leave. When leaving a system like elmah.io, we need additional details from you like when you want to cancel (mostly geared towards annual subscriptions) and to make sure that you have backed up all data from elmah.io before it is cleaned up.","title":"Cancel Subscription"},{"location":"how-to-rename-a-log/","text":"How to rename a log Logs can be renamed from the Dashboard by anyone with Administrator access to the log. To rename a log, click the small icon in the lower right corner: When clicking the icon the log box will flip and you will be able to input a new name. The edit log box also lets you assign the log to an environment, subscribe/unsubscribe from emails, as well as change the color of the log. Be aware that changing the name, environment, or color will be visible to all users with access to the log.","title":"How to rename a log"},{"location":"how-to-rename-a-log/#how-to-rename-a-log","text":"Logs can be renamed from the Dashboard by anyone with Administrator access to the log. To rename a log, click the small icon in the lower right corner: When clicking the icon the log box will flip and you will be able to input a new name. The edit log box also lets you assign the log to an environment, subscribe/unsubscribe from emails, as well as change the color of the log. Be aware that changing the name, environment, or color will be visible to all users with access to the log.","title":"How to rename a log"},{"location":"how-to-run-elmah-io-in-dark-mode/","text":"How to run elmah.io in dark mode Some developers prefer applications with a dark mode either full-time or when working those late hours. The elmah.io application (app.elmah.io) has a light theme but can be run in dark mode using a browser extension. We recommend the following extensions for running elmah.io in dark mode: Dark Mode - Night Eye - Chrome - Edge - Firefox Dark Reader - Chrome - Edge - Firefox","title":"How to run elmah.io in dark mode"},{"location":"how-to-run-elmah-io-in-dark-mode/#how-to-run-elmahio-in-dark-mode","text":"Some developers prefer applications with a dark mode either full-time or when working those late hours. The elmah.io application (app.elmah.io) has a light theme but can be run in dark mode using a browser extension. We recommend the following extensions for running elmah.io in dark mode: Dark Mode - Night Eye - Chrome - Edge - Firefox Dark Reader - Chrome - Edge - Firefox","title":"How to run elmah.io in dark mode"},{"location":"how-to-search-custom-data/","text":"How to search custom data Custom data is not searchable by default. Sometimes it makes sense that errors can be searched from values logged as part of custom data. For now, this feature is supported through the use of variable naming, but we may extend this to a configuration option through the API or UI as well. To make a custom variable and its value searchable through the UI (as well as through the API), name the variable with the prefix X-ELMAHIO-SEARCH- . The variable will become searchable through the name added after the prefix. Examples: ASP.NET ASP.NET Core Serilog NLog log4net Microsoft.Extensions.Logging Elmah.ErrorLog.GetDefault(null); var logger = Elmah.Io.ErrorLog.Client; logger.OnMessage += (sender, args) => { if (args.Message.Data == null) args.Message.Data = new List<Item>(); args.Message.Data.Add(new Item { Key = \"X-ELMAHIO-SEARCH-author\", Value = \"Walter Sobchak\" }); }; builder.Services.AddElmahIo(o => { o.OnMessage = message => { if (message.Data == null) message.Data = new List<Item>(); message.Data.Add(new Item { Key = \"X-ELMAHIO-SEARCH-author\", Value = \"Walter Sobchak\" }); }; }); using (LogContext.PushProperty(\"X-ELMAHIO-SEARCH-author\", \"Walter Sobchak\")) { logger.Error(\"You see what happens, Larry?\"); } var errorMessage = new LogEventInfo(LogLevel.Error, \"\", \"You see what happens, Larry?\"); errorMessage.Properties.Add(\"X-ELMAHIO-SEARCH-author\", \"Walter Sobchak\"); log.Error(errorMessage); var properties = new PropertiesDictionary(); properties[\"X-ELMAHIO-SEARCH-author\"] = \"Walter Sobchak\"; log.Logger.Log(new LoggingEvent(new LoggingEventData { Level = Level.Error, TimeStampUtc = DateTime.UtcNow, Properties = properties, Message = \"You see what happens, Larry?\", })); var scope = new Dictionary<string, object> { { \"X-ELMAHIO-SEARCH-author\", \"Walter Sobchak\" } }; using (logger.BeginScope(scope})) { logger.LogError(\"You see what happens, Larry?\"); } The examples will make author searchable using this query: data.author:\"Walter Sobchak\" Observe how X-ELMAHIO-SEARCH- is replaced with the data. prefix when indexed in elmah.io. Adding searchable properties is available when logging exceptions too: try { // ... } catch (NullReferenceException e) { e.Data.Add(\"X-ELMAHIO-SEARCH-author\", \"Walter Sobchak\"); // Log the exception or throw e to use this catch for decorating the exception } To avoid someone filling up our cluster with custom data, only the first three variables containing X-ELMAHIO-SEARCH- are made searchable. Also, variables with a value containing more than 256 characters are not indexed.","title":"How to search custom data"},{"location":"how-to-search-custom-data/#how-to-search-custom-data","text":"Custom data is not searchable by default. Sometimes it makes sense that errors can be searched from values logged as part of custom data. For now, this feature is supported through the use of variable naming, but we may extend this to a configuration option through the API or UI as well. To make a custom variable and its value searchable through the UI (as well as through the API), name the variable with the prefix X-ELMAHIO-SEARCH- . The variable will become searchable through the name added after the prefix. Examples: ASP.NET ASP.NET Core Serilog NLog log4net Microsoft.Extensions.Logging Elmah.ErrorLog.GetDefault(null); var logger = Elmah.Io.ErrorLog.Client; logger.OnMessage += (sender, args) => { if (args.Message.Data == null) args.Message.Data = new List<Item>(); args.Message.Data.Add(new Item { Key = \"X-ELMAHIO-SEARCH-author\", Value = \"Walter Sobchak\" }); }; builder.Services.AddElmahIo(o => { o.OnMessage = message => { if (message.Data == null) message.Data = new List<Item>(); message.Data.Add(new Item { Key = \"X-ELMAHIO-SEARCH-author\", Value = \"Walter Sobchak\" }); }; }); using (LogContext.PushProperty(\"X-ELMAHIO-SEARCH-author\", \"Walter Sobchak\")) { logger.Error(\"You see what happens, Larry?\"); } var errorMessage = new LogEventInfo(LogLevel.Error, \"\", \"You see what happens, Larry?\"); errorMessage.Properties.Add(\"X-ELMAHIO-SEARCH-author\", \"Walter Sobchak\"); log.Error(errorMessage); var properties = new PropertiesDictionary(); properties[\"X-ELMAHIO-SEARCH-author\"] = \"Walter Sobchak\"; log.Logger.Log(new LoggingEvent(new LoggingEventData { Level = Level.Error, TimeStampUtc = DateTime.UtcNow, Properties = properties, Message = \"You see what happens, Larry?\", })); var scope = new Dictionary<string, object> { { \"X-ELMAHIO-SEARCH-author\", \"Walter Sobchak\" } }; using (logger.BeginScope(scope})) { logger.LogError(\"You see what happens, Larry?\"); } The examples will make author searchable using this query: data.author:\"Walter Sobchak\" Observe how X-ELMAHIO-SEARCH- is replaced with the data. prefix when indexed in elmah.io. Adding searchable properties is available when logging exceptions too: try { // ... } catch (NullReferenceException e) { e.Data.Add(\"X-ELMAHIO-SEARCH-author\", \"Walter Sobchak\"); // Log the exception or throw e to use this catch for decorating the exception } To avoid someone filling up our cluster with custom data, only the first three variables containing X-ELMAHIO-SEARCH- are made searchable. Also, variables with a value containing more than 256 characters are not indexed.","title":"How to search custom data"},{"location":"how-to-send-invoices-to-more-than-one-email-address/","text":"How to send invoices to more than one email address elmah.io currently only supports sending invoices to a single email address. You can have it delivered to multiple email addresses in one of the following ways (and probably more): Set up an email group covering multiple email addresses and use the group's email as the Accountant Email in elmah.io. Set up an automated forward rule on the email address registered as Accountant Email in elmah.io.","title":"How to send invoices to more than one email address"},{"location":"how-to-send-invoices-to-more-than-one-email-address/#how-to-send-invoices-to-more-than-one-email-address","text":"elmah.io currently only supports sending invoices to a single email address. You can have it delivered to multiple email addresses in one of the following ways (and probably more): Set up an email group covering multiple email addresses and use the group's email as the Accountant Email in elmah.io. Set up an automated forward rule on the email address registered as Accountant Email in elmah.io.","title":"How to send invoices to more than one email address"},{"location":"how-to-show-elmah-io-dashboards-on-a-big-screen/","text":"How to show elmah.io dashboards on a big screen There are several dashboards available on elmah.io that you'd want to put on a big screen. Showing live data from your production environment can be a good way to show when things start breaking. The following pages support kiosk mode with auto-refresh built-in: Dashboard Organization Overview Log Overview Kiosk mode and auto-refresh can be enabled from the buttons in the top right corner of each screen: When enabling one or more buttons, the URL of the page will change to include those choices. We recommend building this URL locally and then copying the exact URL to the external system handling the output on the shared monitor. When loading a URL with kiosk mode enabled, elmah.io will automatically hide content from the page that you wouldn't need on a big screen like the cookie popup. FAQ Can I show a dashboard without logging in? It is currently not possible to show dashboards in elmah.io without signing in. You can create a separate user for the shared monitor with read permissions only. This means that the technology you use to display the output on the shared monitor needs to be able to log into elmah.io somehow. The session keeps expiring on the external monitor You can enable the STAY SIGNED IN toggle on the profile page of the user showing the elmah.io dashboard on the external monitor.","title":"How to show elmah.io dashboards on a big screen"},{"location":"how-to-show-elmah-io-dashboards-on-a-big-screen/#how-to-show-elmahio-dashboards-on-a-big-screen","text":"There are several dashboards available on elmah.io that you'd want to put on a big screen. Showing live data from your production environment can be a good way to show when things start breaking. The following pages support kiosk mode with auto-refresh built-in: Dashboard Organization Overview Log Overview Kiosk mode and auto-refresh can be enabled from the buttons in the top right corner of each screen: When enabling one or more buttons, the URL of the page will change to include those choices. We recommend building this URL locally and then copying the exact URL to the external system handling the output on the shared monitor. When loading a URL with kiosk mode enabled, elmah.io will automatically hide content from the page that you wouldn't need on a big screen like the cookie popup.","title":"How to show elmah.io dashboards on a big screen"},{"location":"how-to-show-elmah-io-dashboards-on-a-big-screen/#faq","text":"","title":"FAQ"},{"location":"how-to-show-elmah-io-dashboards-on-a-big-screen/#can-i-show-a-dashboard-without-logging-in","text":"It is currently not possible to show dashboards in elmah.io without signing in. You can create a separate user for the shared monitor with read permissions only. This means that the technology you use to display the output on the shared monitor needs to be able to log into elmah.io somehow.","title":"Can I show a dashboard without logging in?"},{"location":"how-to-show-elmah-io-dashboards-on-a-big-screen/#the-session-keeps-expiring-on-the-external-monitor","text":"You can enable the STAY SIGNED IN toggle on the profile page of the user showing the elmah.io dashboard on the external monitor.","title":"The session keeps expiring on the external monitor"},{"location":"include-filename-and-line-number-in-stacktraces/","text":"Include filename and line number in stack traces Note If you are running .NET Core/.NET 5 you no longer need to enable filenames and line numbers manually. When deploying your application to the test and production environment, you normally want to use the Release configuration. When doing so, your code is optimized, web.config transformation is running, and a few additional things. But, part of running on a Release build is, that you lose the ability to see filenames and line numbers in the stack traces produced by your system. .NET offers the concept of PDB files, which are automatically generated when building your code. The PDB file contains information for the debugger to work, like which file to look up when a breakpoint is reached in your code. Unless you have changed the default settings inside Visual Studio, both the Debug and Release configuration generates a PDB file. So, if both Debug and Release produce a PDB file, why do Debug builds include file name and line number in stack traces, while the Release build doesn't? The reason is most often caused by the fact that PDB files aren't published as part of the deployment. To do so, right-click your project in Visual Studio and select Properties . Click the Package/Publish Web tab and make sure that the Release configuration is selected in the dropdown. Next, remove the checkmark in Exclude generated debug symbols : Also, make sure that the PDB file is generated as part of Release builds. Select the Build tab and click Advanced... . In Debug Info you want to make sure that either Pdb-only or Portable is selected ( Pdb-only being the default): On your next deployment, PDB files are published as part of the build. Note Depending on who you talk to, deploying PDB files as part of your build may be considered a hack. Since PDB files can contain sensitive information about your implementation, publishing these files should only be done, if you have full control of the environment you are deploying to. When releasing software to external users/customers, you don't want to include your PDB files. In this case, you should store the PDB files internally, in a symbol server or similar.","title":"Include filename and line number in stack traces"},{"location":"include-filename-and-line-number-in-stacktraces/#include-filename-and-line-number-in-stack-traces","text":"Note If you are running .NET Core/.NET 5 you no longer need to enable filenames and line numbers manually. When deploying your application to the test and production environment, you normally want to use the Release configuration. When doing so, your code is optimized, web.config transformation is running, and a few additional things. But, part of running on a Release build is, that you lose the ability to see filenames and line numbers in the stack traces produced by your system. .NET offers the concept of PDB files, which are automatically generated when building your code. The PDB file contains information for the debugger to work, like which file to look up when a breakpoint is reached in your code. Unless you have changed the default settings inside Visual Studio, both the Debug and Release configuration generates a PDB file. So, if both Debug and Release produce a PDB file, why do Debug builds include file name and line number in stack traces, while the Release build doesn't? The reason is most often caused by the fact that PDB files aren't published as part of the deployment. To do so, right-click your project in Visual Studio and select Properties . Click the Package/Publish Web tab and make sure that the Release configuration is selected in the dropdown. Next, remove the checkmark in Exclude generated debug symbols : Also, make sure that the PDB file is generated as part of Release builds. Select the Build tab and click Advanced... . In Debug Info you want to make sure that either Pdb-only or Portable is selected ( Pdb-only being the default): On your next deployment, PDB files are published as part of the build. Note Depending on who you talk to, deploying PDB files as part of your build may be considered a hack. Since PDB files can contain sensitive information about your implementation, publishing these files should only be done, if you have full control of the environment you are deploying to. When releasing software to external users/customers, you don't want to include your PDB files. In this case, you should store the PDB files internally, in a symbol server or similar.","title":"Include filename and line number in stack traces"},{"location":"integrate-elmah-io-with-pipedream/","text":"Integrate with Pipedream Pipedream is a service similar to Zapier and IFTTT to help integrate systems without having to write code. In this article, we use an integration point provided by elmah.io and Pipedream called a trigger. A trigger is something that triggers an action in Pipedream. In the case of elmah.io, the trigger available is when new errors are logged to your log. Actions exist on the other side of the integration and tell Pipedream what to do every time a trigger is fired. This guide will show you how to set up the trigger. What action you want to execute when new errors are logged will depend on the tools and workflows used in your organization. Create a new account on pipedream.com. Then click the New button on the Workflows page. The create new workflow page is shown: Search for elmah.io in the search field and select the app and the New Error trigger: Click the Connect new account button and input an API key with permission to both get logs and messages in the api_key field: Click the Save button and select the log to integrate with in the Log ID dropdown: Click the Create source button and wait for: If no events are shown, force an error from the application integrated with the chosen log or create a test error through the API. Remember that only errors marked with the new flag are shown as events in Pipedream. Select an event and click the Continue button. The elmah.io trigger is now configured. Select an app and event of your choice to create actions on the newly created trigger.","title":"Pipedream"},{"location":"integrate-elmah-io-with-pipedream/#integrate-with-pipedream","text":"Pipedream is a service similar to Zapier and IFTTT to help integrate systems without having to write code. In this article, we use an integration point provided by elmah.io and Pipedream called a trigger. A trigger is something that triggers an action in Pipedream. In the case of elmah.io, the trigger available is when new errors are logged to your log. Actions exist on the other side of the integration and tell Pipedream what to do every time a trigger is fired. This guide will show you how to set up the trigger. What action you want to execute when new errors are logged will depend on the tools and workflows used in your organization. Create a new account on pipedream.com. Then click the New button on the Workflows page. The create new workflow page is shown: Search for elmah.io in the search field and select the app and the New Error trigger: Click the Connect new account button and input an API key with permission to both get logs and messages in the api_key field: Click the Save button and select the log to integrate with in the Log ID dropdown: Click the Create source button and wait for: If no events are shown, force an error from the application integrated with the chosen log or create a test error through the API. Remember that only errors marked with the new flag are shown as events in Pipedream. Select an event and click the Continue button. The elmah.io trigger is now configured. Select an app and event of your choice to create actions on the newly created trigger.","title":"Integrate with Pipedream"},{"location":"integrate-elmah-io-with-zapier/","text":"Integrate with Zapier Zapier is the place to go if you need to integrate two or more online systems. In this article, we use an integration point provided by elmah.io and Zapier called a trigger. A trigger is (as the name suggest) something that triggers an action in Zapier. In the case of elmah.io, the trigger available is when new errors are logged to your log. Actions exist on the other side of the integration and tell Zapier what to do every time a trigger is fired. This guide will show you how to set up the trigger. What action you want to execute when new errors are logged will depend on the tools and workflows used in your organization. Create a new account on zapier.com. Then click the Make a Zap button. The create new Zap page is shown: Search for elmah.io in the search field and select the app and the New Error trigger: Click Continue and you will be presented with the following screen: Click the Sign in to elmah.io button or select an existing account if you have already set up other zaps using elmah.io. Adding a new account will show a popup asking you to sign in to elmah.io: Sign in with your elmah.io username/password or social provider. On the following screen you will be asked to authorize elmah.io to notify Zapier every time a new error is logged in a log selected on a later stage: Click the Authorize button and your account will be added to the account list on Zapier: Click Continue . In the following step you will select the elmah.io log that you want to integrate with Zapier: The dropdown contains all of the logs you have access to within your organization. Select a log and click Continue . In the following step you will test the trigger: Click Test trigger and Zapier will pull recent errors from the chosen log. Select the error the represents how a typical error in the chosen log looks like. The values from the chosen error will be used when filling in the action, why selecting a good example in this step can make it easier to configure later on. When you are done, click the Continue button. The elmah.io trigger is now configured. Select an app and event of your choice to create actions on the newly created trigger.","title":"Zapier"},{"location":"integrate-elmah-io-with-zapier/#integrate-with-zapier","text":"Zapier is the place to go if you need to integrate two or more online systems. In this article, we use an integration point provided by elmah.io and Zapier called a trigger. A trigger is (as the name suggest) something that triggers an action in Zapier. In the case of elmah.io, the trigger available is when new errors are logged to your log. Actions exist on the other side of the integration and tell Zapier what to do every time a trigger is fired. This guide will show you how to set up the trigger. What action you want to execute when new errors are logged will depend on the tools and workflows used in your organization. Create a new account on zapier.com. Then click the Make a Zap button. The create new Zap page is shown: Search for elmah.io in the search field and select the app and the New Error trigger: Click Continue and you will be presented with the following screen: Click the Sign in to elmah.io button or select an existing account if you have already set up other zaps using elmah.io. Adding a new account will show a popup asking you to sign in to elmah.io: Sign in with your elmah.io username/password or social provider. On the following screen you will be asked to authorize elmah.io to notify Zapier every time a new error is logged in a log selected on a later stage: Click the Authorize button and your account will be added to the account list on Zapier: Click Continue . In the following step you will select the elmah.io log that you want to integrate with Zapier: The dropdown contains all of the logs you have access to within your organization. Select a log and click Continue . In the following step you will test the trigger: Click Test trigger and Zapier will pull recent errors from the chosen log. Select the error the represents how a typical error in the chosen log looks like. The values from the chosen error will be used when filling in the action, why selecting a good example in this step can make it easier to configure later on. When you are done, click the Continue button. The elmah.io trigger is now configured. Select an app and event of your choice to create actions on the newly created trigger.","title":"Integrate with Zapier"},{"location":"integrations-high-level-overview/","text":"Integrations high-level overview elmah.io offers integration with an extensive list of logging and web frameworks. Get the full overview here. The table below shows all of the frameworks with official support. The Async column contains a checkmark if the integration is logging asynchronously. The Bulk column contains a checkmark if the integration is logging to elmah.io in bulk. In addition, elmah.io can be installed in a range of different products and services not mentioned (using the integrations below). Look through the menu to the left to see all of the possible integrations. Framework Stable Build Source Samples Async Bulk ASP.NET \u2714\ufe0f ASP.NET MVC \ufe0f\u2714\ufe0f ASP.NET Web API \u2714\ufe0f ASP.NET Core \u2714\ufe0f Blazor \u2714\ufe0f Microsoft.Extensions.Logging \u2714\ufe0f \u2714\ufe0f Serilog \u2714\ufe0f \u2714\ufe0f NLog \u2714\ufe0f \u2714\ufe0f log4net \u2714\ufe0f Umbraco \u2714\ufe0f Azure Websites \u2714\ufe0f Azure Functions \u2714\ufe0f Isolated Azure Functions \u2714\ufe0f JavaScript \u2714\ufe0f Xamarin \u2714\ufe0f Uno \u2714\ufe0f WPF \u2714\ufe0f WinUI \u2714\ufe0f OpenTelemetry","title":"Integrations high level overview"},{"location":"integrations-high-level-overview/#integrations-high-level-overview","text":"elmah.io offers integration with an extensive list of logging and web frameworks. Get the full overview here. The table below shows all of the frameworks with official support. The Async column contains a checkmark if the integration is logging asynchronously. The Bulk column contains a checkmark if the integration is logging to elmah.io in bulk. In addition, elmah.io can be installed in a range of different products and services not mentioned (using the integrations below). Look through the menu to the left to see all of the possible integrations. Framework Stable Build Source Samples Async Bulk ASP.NET \u2714\ufe0f ASP.NET MVC \ufe0f\u2714\ufe0f ASP.NET Web API \u2714\ufe0f ASP.NET Core \u2714\ufe0f Blazor \u2714\ufe0f Microsoft.Extensions.Logging \u2714\ufe0f \u2714\ufe0f Serilog \u2714\ufe0f \u2714\ufe0f NLog \u2714\ufe0f \u2714\ufe0f log4net \u2714\ufe0f Umbraco \u2714\ufe0f Azure Websites \u2714\ufe0f Azure Functions \u2714\ufe0f Isolated Azure Functions \u2714\ufe0f JavaScript \u2714\ufe0f Xamarin \u2714\ufe0f Uno \u2714\ufe0f WPF \u2714\ufe0f WinUI \u2714\ufe0f OpenTelemetry","title":"Integrations high-level overview"},{"location":"javascript-troubleshooting/","text":"JavaScript Troubleshooting Errors aren't logged If errors aren't logged from JavaScript, here's a list of things to try out: Make sure that the log with the specified ID exists. Make sure that the log isn't disabled and/or contains any ignore filters that could ignore client-side errors. Make sure that the API key is valid and contains the Messages | Write permission. Enable debugging when initializing elmah.io.javascript to get additional debug and error messages from within the script printed to the browser console: new Elmahio({ apiKey: 'API_KEY', logId: 'LOG_ID', debug: true }); If your webserver includes the Content-Security-Policy header make sure to include api.elmah.io as an allowed domain. Missing information on log messages When logging uncaught errors with elmah.io.javascript you get a lot of additional information stored as part of the log messages. Like the client IP and browser details. If you don't see this information on the messages logged from your application, it's probably because you are using the log function: logger.log({ title: 'This is a custom log message', severity: 'Error' }); The log function only logs what you tell it to log. To include the additional information, switch to use the message builder: var msg = logger.message(); // Get a prefilled message msg.title = 'This is a custom log message'; msg.severity = 'Error'; logger.log(msg); Missing stack trace on errors If errors logged through elmah.io.javascript have a stack trace, it is logged as part of the error on elmah.io. If errors don't include a stack trace, the following actions may fix it: Not all errors include a stack trace. Make sure that the thrown error does include a stack trace by inspecting: e.stack Move the elmahio.js script import to the top of the list of all referenced JavaScript files. Remove any defer or async attributes from the elmahio.js script import. The elmahio.js script import can include those attributes, but errors during initialization may not include stack trace or even be omitted if elmah.io.javascript hasn't been loaded yet. CORS problems when running on localhost When running with elmah.io.javascript on localhost you may see errors in the console like this: Access to XMLHttpRequest at 'https://api.elmah.io/v3/messages/...' from origin 'http://localhost' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. Browsers like Chrome don't allow CORS when running locally. There are three ways to fix this: Run Chrome with the --disable-web-security switch. Run your website on a hostname like https://mymachine . Allow CORS on localhost with extensions like CORS Unblock for Chrome or Allow CORS: Access-Control-Allow-Origin for Firefox.","title":"JavaScript troubleshooting"},{"location":"javascript-troubleshooting/#javascript-troubleshooting","text":"","title":"JavaScript Troubleshooting"},{"location":"javascript-troubleshooting/#errors-arent-logged","text":"If errors aren't logged from JavaScript, here's a list of things to try out: Make sure that the log with the specified ID exists. Make sure that the log isn't disabled and/or contains any ignore filters that could ignore client-side errors. Make sure that the API key is valid and contains the Messages | Write permission. Enable debugging when initializing elmah.io.javascript to get additional debug and error messages from within the script printed to the browser console: new Elmahio({ apiKey: 'API_KEY', logId: 'LOG_ID', debug: true }); If your webserver includes the Content-Security-Policy header make sure to include api.elmah.io as an allowed domain.","title":"Errors aren't logged"},{"location":"javascript-troubleshooting/#missing-information-on-log-messages","text":"When logging uncaught errors with elmah.io.javascript you get a lot of additional information stored as part of the log messages. Like the client IP and browser details. If you don't see this information on the messages logged from your application, it's probably because you are using the log function: logger.log({ title: 'This is a custom log message', severity: 'Error' }); The log function only logs what you tell it to log. To include the additional information, switch to use the message builder: var msg = logger.message(); // Get a prefilled message msg.title = 'This is a custom log message'; msg.severity = 'Error'; logger.log(msg);","title":"Missing information on log messages"},{"location":"javascript-troubleshooting/#missing-stack-trace-on-errors","text":"If errors logged through elmah.io.javascript have a stack trace, it is logged as part of the error on elmah.io. If errors don't include a stack trace, the following actions may fix it: Not all errors include a stack trace. Make sure that the thrown error does include a stack trace by inspecting: e.stack Move the elmahio.js script import to the top of the list of all referenced JavaScript files. Remove any defer or async attributes from the elmahio.js script import. The elmahio.js script import can include those attributes, but errors during initialization may not include stack trace or even be omitted if elmah.io.javascript hasn't been loaded yet.","title":"Missing stack trace on errors"},{"location":"javascript-troubleshooting/#cors-problems-when-running-on-localhost","text":"When running with elmah.io.javascript on localhost you may see errors in the console like this: Access to XMLHttpRequest at 'https://api.elmah.io/v3/messages/...' from origin 'http://localhost' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. Browsers like Chrome don't allow CORS when running locally. There are three ways to fix this: Run Chrome with the --disable-web-security switch. Run your website on a hostname like https://mymachine . Allow CORS on localhost with extensions like CORS Unblock for Chrome or Allow CORS: Access-Control-Allow-Origin for Firefox.","title":"CORS problems when running on localhost"},{"location":"logging-breadcrumbs-from-asp-net-core/","text":"Logging breadcrumbs from ASP.NET Core Logging breadcrumbs from ASP.NET Core Manually logging breadcrumbs Logging breadcrumbs from Microsoft.Extensions.Logging Filtering breadcrumbs You can log one or more breadcrumbs as part of both automatic and manually logged errors. Breadcrumbs indicate steps happening just before a message logged by Elmah.Io.AspNetCore . Breadcrumbs with elmah.io and ASP.NET Core are supported in two ways: manual and through Microsoft.Extensions.Logging. Manually logging breadcrumbs If you want to log a breadcrumb manually as part of an MVC controller action or similar, you can use the ElmahIoApi class: ElmahIoApi.AddBreadcrumb( new Breadcrumb(DateTime.UtcNow, message: \"Requesting the front page\"), HttpContext); Notice that the Breadcrumb class is located in the Elmah.Io.Client package that will be automatically installed when installing Elmah.Io.AspNetCore . The Breadcrumb class is either in the Elmah.Io.Client or Elmah.Io.Client.Models namespace, depending on which version of Elmah.Io.Client you have installed. The best example of a helpful breadcrumb is logging the input model to all endpoints as a breadcrumb. This will show you exactly which parameters the user sends to your website. The following example is created for ASP.NET Core MVC, but similar solutions can be built for other MVC features as well. Create a new class named BreadcrumbFilterAttribute and place it somewhere inside your MVC project: public class BreadcrumbFilterAttribute : ActionFilterAttribute { public override void OnActionExecuting(ActionExecutingContext context) { var arguments = context.ActionArguments; if (arguments.Count == 0) return; ElmahIoApi.AddBreadcrumb( new Breadcrumb( DateTime.UtcNow, \"Information\", \"Request\", string.Join(\", \", arguments.Select(a => $\"{a.Key} = {JsonSerializer.Serialize(a.Value)}\"))), context.HttpContext); } } The action filter converts the action arguments to a comma-separated string and logs it as a breadcrumb. You can either decorate each controller with the BreadcrumbFilterAttribute or add it globally: builder.Services.AddControllersWithViews(options => { options.Filters.Add(new BreadcrumbFilterAttribute()); }); Logging breadcrumbs from Microsoft.Extensions.Logging We also provide an automatic generation of breadcrumbs using Microsoft.Extensions.Logging. This will pick up all log messages logged through the ILogger and include those as part of an error logged. This behavior is currently in opt-in mode, meaning that you will need to enable it in options: builder.Services.AddElmahIo(options => { // ... options.TreatLoggingAsBreadcrumbs = true; }); The boolean can also be configured through appsettings.json : { // ... \"ElmahIo\": { // ... \"TreatLoggingAsBreadcrumbs\": true } } When enabling this automatic behavior, you may need to adjust the log level included as breadcrumbs. This is done in the appsettings.json file by including the following JSON: { \"Logging\": { // ... \"ElmahIoBreadcrumbs\": { \"LogLevel\": { \"Default\": \"Information\" } } } } Filtering breadcrumbs Breadcrumbs can be filtered using one or more rules as well: builder.Services.AddElmahIo(options => { // ... options.OnFilterBreadcrumb = breadcrumb => breadcrumb.Message == \"A message we don't want as a breadcrumb\"; });","title":"Logging breadcrumbs from ASP.NET Core"},{"location":"logging-breadcrumbs-from-asp-net-core/#logging-breadcrumbs-from-aspnet-core","text":"Logging breadcrumbs from ASP.NET Core Manually logging breadcrumbs Logging breadcrumbs from Microsoft.Extensions.Logging Filtering breadcrumbs You can log one or more breadcrumbs as part of both automatic and manually logged errors. Breadcrumbs indicate steps happening just before a message logged by Elmah.Io.AspNetCore . Breadcrumbs with elmah.io and ASP.NET Core are supported in two ways: manual and through Microsoft.Extensions.Logging.","title":"Logging breadcrumbs from ASP.NET Core"},{"location":"logging-breadcrumbs-from-asp-net-core/#manually-logging-breadcrumbs","text":"If you want to log a breadcrumb manually as part of an MVC controller action or similar, you can use the ElmahIoApi class: ElmahIoApi.AddBreadcrumb( new Breadcrumb(DateTime.UtcNow, message: \"Requesting the front page\"), HttpContext); Notice that the Breadcrumb class is located in the Elmah.Io.Client package that will be automatically installed when installing Elmah.Io.AspNetCore . The Breadcrumb class is either in the Elmah.Io.Client or Elmah.Io.Client.Models namespace, depending on which version of Elmah.Io.Client you have installed. The best example of a helpful breadcrumb is logging the input model to all endpoints as a breadcrumb. This will show you exactly which parameters the user sends to your website. The following example is created for ASP.NET Core MVC, but similar solutions can be built for other MVC features as well. Create a new class named BreadcrumbFilterAttribute and place it somewhere inside your MVC project: public class BreadcrumbFilterAttribute : ActionFilterAttribute { public override void OnActionExecuting(ActionExecutingContext context) { var arguments = context.ActionArguments; if (arguments.Count == 0) return; ElmahIoApi.AddBreadcrumb( new Breadcrumb( DateTime.UtcNow, \"Information\", \"Request\", string.Join(\", \", arguments.Select(a => $\"{a.Key} = {JsonSerializer.Serialize(a.Value)}\"))), context.HttpContext); } } The action filter converts the action arguments to a comma-separated string and logs it as a breadcrumb. You can either decorate each controller with the BreadcrumbFilterAttribute or add it globally: builder.Services.AddControllersWithViews(options => { options.Filters.Add(new BreadcrumbFilterAttribute()); });","title":"Manually logging breadcrumbs"},{"location":"logging-breadcrumbs-from-asp-net-core/#logging-breadcrumbs-from-microsoftextensionslogging","text":"We also provide an automatic generation of breadcrumbs using Microsoft.Extensions.Logging. This will pick up all log messages logged through the ILogger and include those as part of an error logged. This behavior is currently in opt-in mode, meaning that you will need to enable it in options: builder.Services.AddElmahIo(options => { // ... options.TreatLoggingAsBreadcrumbs = true; }); The boolean can also be configured through appsettings.json : { // ... \"ElmahIo\": { // ... \"TreatLoggingAsBreadcrumbs\": true } } When enabling this automatic behavior, you may need to adjust the log level included as breadcrumbs. This is done in the appsettings.json file by including the following JSON: { \"Logging\": { // ... \"ElmahIoBreadcrumbs\": { \"LogLevel\": { \"Default\": \"Information\" } } } }","title":"Logging breadcrumbs from Microsoft.Extensions.Logging"},{"location":"logging-breadcrumbs-from-asp-net-core/#filtering-breadcrumbs","text":"Breadcrumbs can be filtered using one or more rules as well: builder.Services.AddElmahIo(options => { // ... options.OnFilterBreadcrumb = breadcrumb => breadcrumb.Message == \"A message we don't want as a breadcrumb\"; });","title":"Filtering breadcrumbs"},{"location":"logging-custom-data/","text":"Logging custom data ELMAH stores a lot of contextual information when an error occurs. Things like cookies, stack trace, server variables, and much more are stored to ease debugging the error at a later point in time. Most error log implementations for ELMAH doesn't support custom variables. Luckily, this is not the case for the elmah.io client. Let's look at some code. You have two options for decorating your errors with custom variables. Use the Data dictionary on .NET's Exception type All exceptions in .NET contain a property named Data and of type IDictionary . The Data dictionary is intended for user-defined information about the exception. The elmah.io client iterates through key/values in this dictionary and ships it off to elmah.io's API . To log custom data using Data , just add a new key/value pair to the Data dictionary: try { CallSomeBusinessLogic(inputValue); } catch (Exception e) { e.Data.Add(\"InputValueWas\", inputValue); ErrorSignal.FromCurrentContext().Raise(e); } In the example, a custom variable named InputValueWas with the value of the inputValue variable is added. This way you will be able to see which input value caused the exception. Use the OnMessage hook in the elmah.io client You may not use ELMAH's ErrorSignal feature but rely on ELMAH to log uncaught exceptions only. In this scenario, you probably don't have access to the thrown exception. The elmah.io client offers a hook for you to be able to execute code every time something is logged: Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client var logger = Elmah.Io.ErrorLog.Client; logger.OnMessage += (sender, args) => { if (args.Message.Data == null) args.Message.Data = new List<Item>(); args.Message.Data.Add(new Item { Key = \"SomeOtherVariable\", Value = someVariable }); }; You may not have seen the Logger type of elmah.io before, but what's important to know right now is, that Logger is responsible for logging messages to the elmah.io API. Another new term here is Message. A message is the type encapsulating all of the information about the thrown exception. In the code example, a new event handler is subscribed to the OnMessage event. This tells the elmah.io client to execute your event handler, before actually logging an exception to elmah.io. The event is used to add a custom variable to the Data dictionary of the message logged to elmah.io. Looking at your custom data Custom data are shown on the Data tab on the extended messages details page. To open inspect custom data go to the log search page, extend a log message, click the three bars (hamburger) icon in the upper right corner. The custom data is beneath the Data tab. As the content in the other tabs of the message details, you will be able to filter results by the variable key.","title":"Logging custom data"},{"location":"logging-custom-data/#logging-custom-data","text":"ELMAH stores a lot of contextual information when an error occurs. Things like cookies, stack trace, server variables, and much more are stored to ease debugging the error at a later point in time. Most error log implementations for ELMAH doesn't support custom variables. Luckily, this is not the case for the elmah.io client. Let's look at some code. You have two options for decorating your errors with custom variables.","title":"Logging custom data"},{"location":"logging-custom-data/#use-the-data-dictionary-on-nets-exception-type","text":"All exceptions in .NET contain a property named Data and of type IDictionary . The Data dictionary is intended for user-defined information about the exception. The elmah.io client iterates through key/values in this dictionary and ships it off to elmah.io's API . To log custom data using Data , just add a new key/value pair to the Data dictionary: try { CallSomeBusinessLogic(inputValue); } catch (Exception e) { e.Data.Add(\"InputValueWas\", inputValue); ErrorSignal.FromCurrentContext().Raise(e); } In the example, a custom variable named InputValueWas with the value of the inputValue variable is added. This way you will be able to see which input value caused the exception.","title":"Use the Data dictionary on .NET's Exception type"},{"location":"logging-custom-data/#use-the-onmessage-hook-in-the-elmahio-client","text":"You may not use ELMAH's ErrorSignal feature but rely on ELMAH to log uncaught exceptions only. In this scenario, you probably don't have access to the thrown exception. The elmah.io client offers a hook for you to be able to execute code every time something is logged: Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client var logger = Elmah.Io.ErrorLog.Client; logger.OnMessage += (sender, args) => { if (args.Message.Data == null) args.Message.Data = new List<Item>(); args.Message.Data.Add(new Item { Key = \"SomeOtherVariable\", Value = someVariable }); }; You may not have seen the Logger type of elmah.io before, but what's important to know right now is, that Logger is responsible for logging messages to the elmah.io API. Another new term here is Message. A message is the type encapsulating all of the information about the thrown exception. In the code example, a new event handler is subscribed to the OnMessage event. This tells the elmah.io client to execute your event handler, before actually logging an exception to elmah.io. The event is used to add a custom variable to the Data dictionary of the message logged to elmah.io.","title":"Use the OnMessage hook in the elmah.io client"},{"location":"logging-custom-data/#looking-at-your-custom-data","text":"Custom data are shown on the Data tab on the extended messages details page. To open inspect custom data go to the log search page, extend a log message, click the three bars (hamburger) icon in the upper right corner. The custom data is beneath the Data tab. As the content in the other tabs of the message details, you will be able to filter results by the variable key.","title":"Looking at your custom data"},{"location":"logging-errors-programmatically/","text":"Logging errors programmatically So you've set up a shiny new ELMAH log and all of your unhandled errors are logged to ELMAH. Now you're wondering: \"How do I log my handled errors to ELMAH programmatically?\" You are in luck! ELMAH provides a nice API to do just that through error signaling. Consider the following code: try { int i = 0; int result = 42 / i; } catch (DivideByZeroException e) { // What to do? } In this example, a System.DivideByZeroException is thrown when trying to divide by zero, but what if we want to catch (and log) that exception instead of throwing it back through the call stack? With ELMAH's ErrorSignal class we can log the error: try { int i = 0; int result = 42 / i; } catch (DivideByZeroException e) { ErrorSignal.FromCurrentContext().Raise(e); } We call the static method FromCurrentContext on the ErrorSignal class, which returns a new object for doing the actual logging. Logging happens through the Raise method, which logs the exception to the configured ELMAH storage endpoint. In the example above, I use the FromCurrentContext helper to create a new instance of ErrorSignal . ELMAH also works outside the context of a webserver and in this case, you would simply use the default logger with null as the HTTP context: ErrorLog.GetDefault(null).Log(new Error(e)); If you simply want to log text messages and don't need all of the HTTP context information, consider using one of our integrations for popular logging frameworks like log4net , NLog , or Serilog . Also, the Elmah.Io.Client package contains a logging API documented here .","title":"Logging errors programmatically"},{"location":"logging-errors-programmatically/#logging-errors-programmatically","text":"So you've set up a shiny new ELMAH log and all of your unhandled errors are logged to ELMAH. Now you're wondering: \"How do I log my handled errors to ELMAH programmatically?\" You are in luck! ELMAH provides a nice API to do just that through error signaling. Consider the following code: try { int i = 0; int result = 42 / i; } catch (DivideByZeroException e) { // What to do? } In this example, a System.DivideByZeroException is thrown when trying to divide by zero, but what if we want to catch (and log) that exception instead of throwing it back through the call stack? With ELMAH's ErrorSignal class we can log the error: try { int i = 0; int result = 42 / i; } catch (DivideByZeroException e) { ErrorSignal.FromCurrentContext().Raise(e); } We call the static method FromCurrentContext on the ErrorSignal class, which returns a new object for doing the actual logging. Logging happens through the Raise method, which logs the exception to the configured ELMAH storage endpoint. In the example above, I use the FromCurrentContext helper to create a new instance of ErrorSignal . ELMAH also works outside the context of a webserver and in this case, you would simply use the default logger with null as the HTTP context: ErrorLog.GetDefault(null).Log(new Error(e)); If you simply want to log text messages and don't need all of the HTTP context information, consider using one of our integrations for popular logging frameworks like log4net , NLog , or Serilog . Also, the Elmah.Io.Client package contains a logging API documented here .","title":"Logging errors programmatically"},{"location":"logging-from-a-custom-http-module/","text":"Logging from a custom HTTP module Some developers like to gather all logging into a single module. An example of this would be to log to multiple log destinations and maybe even enrich log messages to multiple loggers with the same info. We always recommend using the modules and handlers that come with ELMAH. But in case you want to log from a module manually, here's the recipe: public class CustomLoggingModule : IHttpModule { public void Init(HttpApplication context) { context.Error += Application_Error; } public void Application_Error(object sender, EventArgs messageData) { HttpApplication application = (HttpApplication)sender; var context = application.Context; var error = new Error(application.Server.GetLastError(), context); var log = ErrorLog.GetDefault(context); log.Log(error); } public void Dispose() { } } In the example, I've created a new module named CustomLoggingModule . The module needs to be configured in web.config as explained here . When starting up the application, ASP.NET calls the Init -method. In this method, an Error event handler is set. Every time a new error is happening in your web application, ASP.NET now calls the Application_Error -method. In this method, I wrap the last thrown error in ELMAH's Error object and log it through the ErrorLog class. Warning Be aware that logging errors this way, disables ELMAH's built-in events like filtering.","title":"Logging from a custom HTTP module"},{"location":"logging-from-a-custom-http-module/#logging-from-a-custom-http-module","text":"Some developers like to gather all logging into a single module. An example of this would be to log to multiple log destinations and maybe even enrich log messages to multiple loggers with the same info. We always recommend using the modules and handlers that come with ELMAH. But in case you want to log from a module manually, here's the recipe: public class CustomLoggingModule : IHttpModule { public void Init(HttpApplication context) { context.Error += Application_Error; } public void Application_Error(object sender, EventArgs messageData) { HttpApplication application = (HttpApplication)sender; var context = application.Context; var error = new Error(application.Server.GetLastError(), context); var log = ErrorLog.GetDefault(context); log.Log(error); } public void Dispose() { } } In the example, I've created a new module named CustomLoggingModule . The module needs to be configured in web.config as explained here . When starting up the application, ASP.NET calls the Init -method. In this method, an Error event handler is set. Every time a new error is happening in your web application, ASP.NET now calls the Application_Error -method. In this method, I wrap the last thrown error in ELMAH's Error object and log it through the ErrorLog class. Warning Be aware that logging errors this way, disables ELMAH's built-in events like filtering.","title":"Logging from a custom HTTP module"},{"location":"logging-heartbeats-from-asp-net-core/","text":"Logging heartbeats from ASP.NET Core Logging heartbeats from ASP.NET Core Additional options Application name Callbacks Period Ignoring heartbeats on localhost, staging, etc. ASP.NET Core Troubleshooting ASP.NET Core offers a feature called Health Checks from version 2.2 and forward. For more information about health checks, check out our blog post: ASP.NET Core 2.2 Health Checks Explained . The Heartbeats feature on elmah.io supports health checks too, by publishing health check results as heartbeats. To publish health checks as elmah.io heartbeats, install the Elmah.Io.AspNetCore.HealthChecks NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.AspNetCore.HealthChecks Install-Package Elmah.Io.AspNetCore.HealthChecks <PackageReference Include=\"Elmah.Io.AspNetCore.HealthChecks\" Version=\"5.*\" /> paket add Elmah.Io.AspNetCore.HealthChecks Then configure the elmah.io health check publisher: builder .Services .AddHealthChecks() .AddElmahIoPublisher(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); options.HeartbeatId = \"HEARTBEAT_ID\"; }); Replace the variables with the correct values as explained in Set up Heartbeats . Remember to use an API key that includes the Heartbeats - Write permission. Additional options Application name Much like the error logging integration with ASP.NET Core, you can set an application name on log messages produced by Heartbeats. To do so, set the Application property when adding the publisher: .AddElmahIoPublisher(options => { ... options.Application = \"My app\"; }); If Application is not set, log messages will receive a default value of Heartbeats to make the messages distinguishable from other messages. Callbacks The elmah.io publisher offer callbacks already known from Elmah.Io.AspNetCore . OnHeartbeat The OnHeartbeat callback can be used to set a version number on all log messages produced by a heartbeat and/or trigger custom code every time a heartbeat is logged to elmah.io: .AddElmahIoPublisher(options => { ... options.OnHeartbeat = hb => { hb.Version = \"1.0.0\"; }; }); OnFilter The OnFilter callback can used to ignore one or more heartbeats: .AddElmahIoPublisher(options => { ... options.OnFilter = hb => { return hb.Result == \"Degraded\"; }; }); The example ignores any Degraded heartbeats. OnError The OnError callback can be used to listen for errors communicating with the elmah.io API: .AddElmahIoPublisher(options => { ... options.OnError = (hb, ex) => { // Do something }; }); The elmah.io publisher already logs any internal errors through Microsoft.Extensions.Logging, why you don't need to do that in the OnError handler. If you are using another logging framework and don't have that hooked up on Microsoft.Extensions.Logging, the OnError is a good place to add some additional logging. Period As default, ASP.NET Core runs health checks every 30 seconds when setting up a publisher. To change this interval, add the following code: builder.Services.Configure<HealthCheckPublisherOptions>(options => { options.Period = TimeSpan.FromMinutes(5); }); There's a bug in ASP.NET Core 2.2 that requires you to use reflection when setting Period : builder.Services.Configure<HealthCheckPublisherOptions>(options => { var prop = options.GetType().GetField(\"_period\", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance); prop.SetValue(options, TimeSpan.FromMinutes(5)); }); If setting Period to 5 minutes, you should set the heartbeat interval on elmah.io to 5 minutes and grace to 1 minute. Ignoring heartbeats on localhost, staging, etc. Monitoring heartbeats is important in your production environment. When running locally or even on staging, you probably don't want to monitor heartbeats. ASP.NET Core health checks doesn't seem to support a great deal of configuration through appsettings.json , Azure app settings, etc. The easiest way to tell ASP.NET Core to log heartbeats to elmah.io is to avoid setting up health checks unless a heartbeat id is configured: if (!string.IsNullOrWhiteSpace(Configuration[\"ElmahIo:HeartbeatId\"])) { builder.Services.AddHealthChecks().AddElmahIoPublisher(); } In this example, we only configure health checks and the elmah.io publisher if the ElmahIo:HeartbeatId setting is defined in config. ASP.NET Core Troubleshooting Here's a list of things to check for if no heartbeats are registered: Did you include both API_KEY , LOG_ID , and HEARTBEAT_ID ? The publisher needs to be called before the AddElmahIo call from Elmah.Io.AspNetCore : builder .Services .AddHealthChecks() .AddElmahIoPublisher(); builder.Services.AddElmahIo(); If you are using Health Checks UI, it needs to be configured after the AddElmahIoPublisher -method: builder .Services .AddHealthChecks() .AddElmahIoPublisher(); builder .Services .AddHealthChecksUI();","title":"Logging heartbeats from ASP.NET Core"},{"location":"logging-heartbeats-from-asp-net-core/#logging-heartbeats-from-aspnet-core","text":"Logging heartbeats from ASP.NET Core Additional options Application name Callbacks Period Ignoring heartbeats on localhost, staging, etc. ASP.NET Core Troubleshooting ASP.NET Core offers a feature called Health Checks from version 2.2 and forward. For more information about health checks, check out our blog post: ASP.NET Core 2.2 Health Checks Explained . The Heartbeats feature on elmah.io supports health checks too, by publishing health check results as heartbeats. To publish health checks as elmah.io heartbeats, install the Elmah.Io.AspNetCore.HealthChecks NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.AspNetCore.HealthChecks Install-Package Elmah.Io.AspNetCore.HealthChecks <PackageReference Include=\"Elmah.Io.AspNetCore.HealthChecks\" Version=\"5.*\" /> paket add Elmah.Io.AspNetCore.HealthChecks Then configure the elmah.io health check publisher: builder .Services .AddHealthChecks() .AddElmahIoPublisher(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); options.HeartbeatId = \"HEARTBEAT_ID\"; }); Replace the variables with the correct values as explained in Set up Heartbeats . Remember to use an API key that includes the Heartbeats - Write permission.","title":"Logging heartbeats from ASP.NET Core"},{"location":"logging-heartbeats-from-asp-net-core/#additional-options","text":"","title":"Additional options"},{"location":"logging-heartbeats-from-asp-net-core/#application-name","text":"Much like the error logging integration with ASP.NET Core, you can set an application name on log messages produced by Heartbeats. To do so, set the Application property when adding the publisher: .AddElmahIoPublisher(options => { ... options.Application = \"My app\"; }); If Application is not set, log messages will receive a default value of Heartbeats to make the messages distinguishable from other messages.","title":"Application name"},{"location":"logging-heartbeats-from-asp-net-core/#callbacks","text":"The elmah.io publisher offer callbacks already known from Elmah.Io.AspNetCore . OnHeartbeat The OnHeartbeat callback can be used to set a version number on all log messages produced by a heartbeat and/or trigger custom code every time a heartbeat is logged to elmah.io: .AddElmahIoPublisher(options => { ... options.OnHeartbeat = hb => { hb.Version = \"1.0.0\"; }; }); OnFilter The OnFilter callback can used to ignore one or more heartbeats: .AddElmahIoPublisher(options => { ... options.OnFilter = hb => { return hb.Result == \"Degraded\"; }; }); The example ignores any Degraded heartbeats. OnError The OnError callback can be used to listen for errors communicating with the elmah.io API: .AddElmahIoPublisher(options => { ... options.OnError = (hb, ex) => { // Do something }; }); The elmah.io publisher already logs any internal errors through Microsoft.Extensions.Logging, why you don't need to do that in the OnError handler. If you are using another logging framework and don't have that hooked up on Microsoft.Extensions.Logging, the OnError is a good place to add some additional logging.","title":"Callbacks"},{"location":"logging-heartbeats-from-asp-net-core/#period","text":"As default, ASP.NET Core runs health checks every 30 seconds when setting up a publisher. To change this interval, add the following code: builder.Services.Configure<HealthCheckPublisherOptions>(options => { options.Period = TimeSpan.FromMinutes(5); }); There's a bug in ASP.NET Core 2.2 that requires you to use reflection when setting Period : builder.Services.Configure<HealthCheckPublisherOptions>(options => { var prop = options.GetType().GetField(\"_period\", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance); prop.SetValue(options, TimeSpan.FromMinutes(5)); }); If setting Period to 5 minutes, you should set the heartbeat interval on elmah.io to 5 minutes and grace to 1 minute.","title":"Period"},{"location":"logging-heartbeats-from-asp-net-core/#ignoring-heartbeats-on-localhost-staging-etc","text":"Monitoring heartbeats is important in your production environment. When running locally or even on staging, you probably don't want to monitor heartbeats. ASP.NET Core health checks doesn't seem to support a great deal of configuration through appsettings.json , Azure app settings, etc. The easiest way to tell ASP.NET Core to log heartbeats to elmah.io is to avoid setting up health checks unless a heartbeat id is configured: if (!string.IsNullOrWhiteSpace(Configuration[\"ElmahIo:HeartbeatId\"])) { builder.Services.AddHealthChecks().AddElmahIoPublisher(); } In this example, we only configure health checks and the elmah.io publisher if the ElmahIo:HeartbeatId setting is defined in config.","title":"Ignoring heartbeats on localhost, staging, etc."},{"location":"logging-heartbeats-from-asp-net-core/#aspnet-core-troubleshooting","text":"Here's a list of things to check for if no heartbeats are registered: Did you include both API_KEY , LOG_ID , and HEARTBEAT_ID ? The publisher needs to be called before the AddElmahIo call from Elmah.Io.AspNetCore : builder .Services .AddHealthChecks() .AddElmahIoPublisher(); builder.Services.AddElmahIo(); If you are using Health Checks UI, it needs to be configured after the AddElmahIoPublisher -method: builder .Services .AddHealthChecks() .AddElmahIoPublisher(); builder .Services .AddHealthChecksUI();","title":"ASP.NET Core Troubleshooting"},{"location":"logging-heartbeats-from-aws-lambdas/","text":"Logging heartbeats from AWS Lambdas AWS Lambdas running on a schedule are great candidates for logging heartbeats to elmah.io. To send a healthy heartbeat when the Lambda runs successfully and an unhealthy heartbeat when an error happens, start by installing the Elmah.Io.Client NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client Install-Package Elmah.Io.Client <PackageReference Include=\"Elmah.Io.Client\" Version=\"5.*\" /> paket add Elmah.Io.Client Include elmah.io API key, log ID, and heartbeat ID in your code. In this example, they are added as static fields: private const string ApiKey = \"API_KEY\"; private const string HeartbeatId = \"HEARTBEAT_ID\"; private static Guid LogId = new Guid(\"LOG_ID\"); Replace API_KEY with an API key with the Heartbeats | Write permission ( Where is my API key? ), HEARTBEAT_ID with the ID of the heartbeat available on the elmah.io UI, and LOG_ID with the ID of the log containing the heartbeat ( Where is my log ID? ). Create the elmah.io client and store the IHeartbeat object somewhere. In the following example, it is initialized in the Main method and stored in a static field: private static IHeartbeats heartbeats; private static async Task Main(string[] args) { heartbeats = ElmahioAPI.Create(ApiKey).Heartbeats; // ... } In the function handler, wrap your code in try/catch and call either the Healthy or Unhealthy method: public static string FunctionHandler(string input, ILambdaContext context) { try { // Lambda code goes here heartbeats.Healthy(LogId, HeartbeatId); return input?.ToUpper(); } catch (Exception e) { heartbeats.Unhealthy(LogId, HeartbeatId, e.ToString()); throw; } } When the lambda code runs (replace the Lambda code goes here comment with your code) without exceptions, a healthy heartbeat is logged to elmah.io. In case of an exception, an unhealthy heartbeat is logged to elmah.io. In case your Lambda doesn't run at all, elmah.io automatically logs a missing heartbeat.","title":"Logging heartbeats from AWS Lambdas"},{"location":"logging-heartbeats-from-aws-lambdas/#logging-heartbeats-from-aws-lambdas","text":"AWS Lambdas running on a schedule are great candidates for logging heartbeats to elmah.io. To send a healthy heartbeat when the Lambda runs successfully and an unhealthy heartbeat when an error happens, start by installing the Elmah.Io.Client NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client Install-Package Elmah.Io.Client <PackageReference Include=\"Elmah.Io.Client\" Version=\"5.*\" /> paket add Elmah.Io.Client Include elmah.io API key, log ID, and heartbeat ID in your code. In this example, they are added as static fields: private const string ApiKey = \"API_KEY\"; private const string HeartbeatId = \"HEARTBEAT_ID\"; private static Guid LogId = new Guid(\"LOG_ID\"); Replace API_KEY with an API key with the Heartbeats | Write permission ( Where is my API key? ), HEARTBEAT_ID with the ID of the heartbeat available on the elmah.io UI, and LOG_ID with the ID of the log containing the heartbeat ( Where is my log ID? ). Create the elmah.io client and store the IHeartbeat object somewhere. In the following example, it is initialized in the Main method and stored in a static field: private static IHeartbeats heartbeats; private static async Task Main(string[] args) { heartbeats = ElmahioAPI.Create(ApiKey).Heartbeats; // ... } In the function handler, wrap your code in try/catch and call either the Healthy or Unhealthy method: public static string FunctionHandler(string input, ILambdaContext context) { try { // Lambda code goes here heartbeats.Healthy(LogId, HeartbeatId); return input?.ToUpper(); } catch (Exception e) { heartbeats.Unhealthy(LogId, HeartbeatId, e.ToString()); throw; } } When the lambda code runs (replace the Lambda code goes here comment with your code) without exceptions, a healthy heartbeat is logged to elmah.io. In case of an exception, an unhealthy heartbeat is logged to elmah.io. In case your Lambda doesn't run at all, elmah.io automatically logs a missing heartbeat.","title":"Logging heartbeats from AWS Lambdas"},{"location":"logging-heartbeats-from-azure-functions/","text":"Logging heartbeats from Azure Functions Logging heartbeats from Azure Functions Using a filter in Elmah.Io.Functions Manually using Elmah.Io.Client Using a separate heartbeat function Azure Functions are great candidates for adding heartbeats. For web APIs implemented with Azure Functions, you should create a /health endpoint and ping that using Uptime Monitoring . But for timer triggered, queue triggers, and similar function apps, heartbeats are a great way to verify that your function is successfully running. The rest of this document is split into different ways of adding heartbeats to one or more functions. Using a filter in Elmah.Io.Functions The easiest way of including a heartbeat is to include the ElmahIoHeartbeatFilter available in the Elmah.Io.Functions package. This will automatically publish a Healthy or Unhealthy heartbeat, depending on if your functions execute successfully. This option is great for timer-triggered functions like nightly batch jobs. Start by installing the Elmah.Io.Functions package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Functions Install-Package Elmah.Io.Functions <PackageReference Include=\"Elmah.Io.Functions\" Version=\"5.*\" /> paket add Elmah.Io.Functions Elmah.Io.Functions requires dependency injection part of the Microsoft.Azure.Functions.Extensions package, why you will need this package if not already added. Extend the Startup.cs (or whatever you named your function startup class) file with the following code: using Microsoft.Azure.Functions.Extensions.DependencyInjection; using Microsoft.Azure.WebJobs.Host; using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection; using Elmah.Io.Functions; [assembly: FunctionsStartup(typeof(My.FunctionApp.Startup))] namespace My.FunctionApp { public class Startup : FunctionsStartup { public override void Configure(IFunctionsHostBuilder builder) { var config = new ConfigurationBuilder() .AddJsonFile(\"local.settings.json\", optional: true, reloadOnChange: true) .AddEnvironmentVariables() .Build(); builder.Services.Configure<ElmahIoFunctionOptions>(o => { o.ApiKey = config[\"apiKey\"]; o.LogId = new Guid(config[\"logId\"]); o.HeartbeatId = config[\"heartbeatId\"]; }); builder.Services.AddSingleton<IFunctionFilter, ElmahIoHeartbeatFilter>(); } } } The code installs the ElmahIoHeartbeatFilter class, which will handle all of the communication with the elmah.io API. Finally, add the config variables ( apiKey , logId , and heartbeatId ) to the local.settings.json file, environment variables, Azure configuration settings, or in whatever way you specify settings for your function app. Manually using Elmah.Io.Client The example above installs the heartbeat filter for all functions. If you have multiple functions inside your function app, or you want greater control of when and how to send heartbeats, you can use Elmah.Io.Client to create heartbeats. Start by installing the Elmah.Io.Client NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client Install-Package Elmah.Io.Client <PackageReference Include=\"Elmah.Io.Client\" Version=\"5.*\" /> paket add Elmah.Io.Client Extend the Startup.cs file with the following code: using Microsoft.Azure.Functions.Extensions.DependencyInjection; using Microsoft.Azure.WebJobs.Host; using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection; using Elmah.Io.Client; [assembly: FunctionsStartup(typeof(My.FunctionApp.Startup))] namespace My.FunctionApp { public class Startup : FunctionsStartup { public override void Configure(IFunctionsHostBuilder builder) { var config = new ConfigurationBuilder() .AddJsonFile(\"local.settings.json\", optional: true, reloadOnChange: true) .AddEnvironmentVariables() .Build(); builder.Services.AddSingleton(config); var elmahIo = ElmahioAPI.Create(config[\"apiKey\"]); builder.Services.AddSingleton(elmahIo.Heartbeats); } } } Inside your function, wrap all of the code in try/catch and add code to create either a Healthy or Unhealthy heartbeat: using System; using System.Threading.Tasks; using Elmah.Io.Client; using Microsoft.Azure.WebJobs; using Microsoft.Extensions.Configuration; namespace My.FunctionApp { public class TimedFunction { private readonly IHeartbeats heartbeats; private readonly IConfiguration configuration; public TimedFunction(IHeartbeats heartbeats, IConfiguration configuration) { this.heartbeats = heartbeats; this.configuration = configuration; } [FunctionName(\"TimedFunction\")] public async Task Run([TimerTrigger(\"0 0 * * * *\")]TimerInfo myTimer) { var heartbeatId = configuration[\"heartbeatId\"]; var logId = configuration[\"logId\"]; try { // Your function code goes here await heartbeats.CreateAsync(heartbeatId, logId, new CreateHeartbeat { Result = \"Healthy\" }); } catch (Exception e) { await heartbeats.CreateAsync(heartbeatId, logId, new CreateHeartbeat { Result = \"Unhealthy\", Reason = e.ToString(), }); } } } } If your function code executes successfully, a Healthy heartbeat is created. If an exception is thrown, an Unhealthy heartbeat with the thrown exception in Reason is created. Be aware that configuring a function to run in an internal (like every hour for the example above) does not ensure that the function is executed exactly on the hour. We recommend to set the grace period for these types of heartbeats to 15-30 minutes to avoid heartbeat errors when the timed function is past due. Using a separate heartbeat function You may want a single heartbeat representing your entire function app consisting of multiple functions. This is a good option if you want to create heartbeats from queue-triggered functions or similar. In these cases, you don't want to create a heartbeat every time a message from the queue is handled, but you will want to notify elmah.io if dependencies like database connection suddenly aren't available. We recommend creating a new heartbeat function for this kind of Function. Like in the previous example, make sure to extend your Startup.cs file like this: using Microsoft.Azure.Functions.Extensions.DependencyInjection; using Microsoft.Azure.WebJobs.Host; using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection; using Elmah.Io.Client; [assembly: FunctionsStartup(typeof(My.FunctionApp.Startup))] namespace My.FunctionApp { public class Startup : FunctionsStartup { public override void Configure(IFunctionsHostBuilder builder) { var config = new ConfigurationBuilder() .AddJsonFile(\"local.settings.json\", optional: true, reloadOnChange: true) .AddEnvironmentVariables() .Build(); builder.Services.AddSingleton(config); var elmahIo = ElmahioAPI.Create(config[\"apiKey\"]); builder.Services.AddSingleton(elmahIo.Heartbeats); } } } Then create a new timed function with the following code: using System; using System.Threading.Tasks; using Elmah.Io.Client; using Microsoft.Azure.WebJobs; using Microsoft.Extensions.Configuration; namespace My.FunctionApp { public class Heartbeat { private readonly IConfiguration config; private readonly IHeartbeats heartbeats; public Heartbeat(IHeartbeats heartbeats, IConfiguration config) { this.heartbeats = heartbeats; this.config = config; } [FunctionName(\"Heartbeat\")] public async Task Run([TimerTrigger(\"0 */5 * * * *\")]TimerInfo myTimer) { var result = \"Healthy\"; var reason = (string)null; try { // Check your dependencies here } catch (Exception e) { result = \"Unhealthy\"; reason = e.ToString(); } await heartbeats.CreateAsync(config[\"heartbeatId\"], config[\"logId\"], new CreateHeartbeat { Result = result, Reason = reason, }); } } } In the example above, the new function named Heartbeat (the name is entirely up to you) executes every 5 minutes. Replace the comment with your checks like opening a connection to the database. If everything works as it should, a Healthy heartbeat is logged to elmah.io. If an exception is thrown while checking your dependencies, an Unhealthy heartbeat is created. When running locally, you may want to disable heartbeats. You can use the Disable attribute for that by including the following code: #if DEBUG [Disable] #endif public class Heartbeat { // ... } or add the following to local.settings.json : { // ... \"Values\": { \"AzureWebJobs.Heartbeat.Disabled\": true, // ... } }","title":"Logging heartbeats from Azure Functions"},{"location":"logging-heartbeats-from-azure-functions/#logging-heartbeats-from-azure-functions","text":"Logging heartbeats from Azure Functions Using a filter in Elmah.Io.Functions Manually using Elmah.Io.Client Using a separate heartbeat function Azure Functions are great candidates for adding heartbeats. For web APIs implemented with Azure Functions, you should create a /health endpoint and ping that using Uptime Monitoring . But for timer triggered, queue triggers, and similar function apps, heartbeats are a great way to verify that your function is successfully running. The rest of this document is split into different ways of adding heartbeats to one or more functions.","title":"Logging heartbeats from Azure Functions"},{"location":"logging-heartbeats-from-azure-functions/#using-a-filter-in-elmahiofunctions","text":"The easiest way of including a heartbeat is to include the ElmahIoHeartbeatFilter available in the Elmah.Io.Functions package. This will automatically publish a Healthy or Unhealthy heartbeat, depending on if your functions execute successfully. This option is great for timer-triggered functions like nightly batch jobs. Start by installing the Elmah.Io.Functions package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Functions Install-Package Elmah.Io.Functions <PackageReference Include=\"Elmah.Io.Functions\" Version=\"5.*\" /> paket add Elmah.Io.Functions Elmah.Io.Functions requires dependency injection part of the Microsoft.Azure.Functions.Extensions package, why you will need this package if not already added. Extend the Startup.cs (or whatever you named your function startup class) file with the following code: using Microsoft.Azure.Functions.Extensions.DependencyInjection; using Microsoft.Azure.WebJobs.Host; using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection; using Elmah.Io.Functions; [assembly: FunctionsStartup(typeof(My.FunctionApp.Startup))] namespace My.FunctionApp { public class Startup : FunctionsStartup { public override void Configure(IFunctionsHostBuilder builder) { var config = new ConfigurationBuilder() .AddJsonFile(\"local.settings.json\", optional: true, reloadOnChange: true) .AddEnvironmentVariables() .Build(); builder.Services.Configure<ElmahIoFunctionOptions>(o => { o.ApiKey = config[\"apiKey\"]; o.LogId = new Guid(config[\"logId\"]); o.HeartbeatId = config[\"heartbeatId\"]; }); builder.Services.AddSingleton<IFunctionFilter, ElmahIoHeartbeatFilter>(); } } } The code installs the ElmahIoHeartbeatFilter class, which will handle all of the communication with the elmah.io API. Finally, add the config variables ( apiKey , logId , and heartbeatId ) to the local.settings.json file, environment variables, Azure configuration settings, or in whatever way you specify settings for your function app.","title":"Using a filter in Elmah.Io.Functions"},{"location":"logging-heartbeats-from-azure-functions/#manually-using-elmahioclient","text":"The example above installs the heartbeat filter for all functions. If you have multiple functions inside your function app, or you want greater control of when and how to send heartbeats, you can use Elmah.Io.Client to create heartbeats. Start by installing the Elmah.Io.Client NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client Install-Package Elmah.Io.Client <PackageReference Include=\"Elmah.Io.Client\" Version=\"5.*\" /> paket add Elmah.Io.Client Extend the Startup.cs file with the following code: using Microsoft.Azure.Functions.Extensions.DependencyInjection; using Microsoft.Azure.WebJobs.Host; using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection; using Elmah.Io.Client; [assembly: FunctionsStartup(typeof(My.FunctionApp.Startup))] namespace My.FunctionApp { public class Startup : FunctionsStartup { public override void Configure(IFunctionsHostBuilder builder) { var config = new ConfigurationBuilder() .AddJsonFile(\"local.settings.json\", optional: true, reloadOnChange: true) .AddEnvironmentVariables() .Build(); builder.Services.AddSingleton(config); var elmahIo = ElmahioAPI.Create(config[\"apiKey\"]); builder.Services.AddSingleton(elmahIo.Heartbeats); } } } Inside your function, wrap all of the code in try/catch and add code to create either a Healthy or Unhealthy heartbeat: using System; using System.Threading.Tasks; using Elmah.Io.Client; using Microsoft.Azure.WebJobs; using Microsoft.Extensions.Configuration; namespace My.FunctionApp { public class TimedFunction { private readonly IHeartbeats heartbeats; private readonly IConfiguration configuration; public TimedFunction(IHeartbeats heartbeats, IConfiguration configuration) { this.heartbeats = heartbeats; this.configuration = configuration; } [FunctionName(\"TimedFunction\")] public async Task Run([TimerTrigger(\"0 0 * * * *\")]TimerInfo myTimer) { var heartbeatId = configuration[\"heartbeatId\"]; var logId = configuration[\"logId\"]; try { // Your function code goes here await heartbeats.CreateAsync(heartbeatId, logId, new CreateHeartbeat { Result = \"Healthy\" }); } catch (Exception e) { await heartbeats.CreateAsync(heartbeatId, logId, new CreateHeartbeat { Result = \"Unhealthy\", Reason = e.ToString(), }); } } } } If your function code executes successfully, a Healthy heartbeat is created. If an exception is thrown, an Unhealthy heartbeat with the thrown exception in Reason is created. Be aware that configuring a function to run in an internal (like every hour for the example above) does not ensure that the function is executed exactly on the hour. We recommend to set the grace period for these types of heartbeats to 15-30 minutes to avoid heartbeat errors when the timed function is past due.","title":"Manually using Elmah.Io.Client"},{"location":"logging-heartbeats-from-azure-functions/#using-a-separate-heartbeat-function","text":"You may want a single heartbeat representing your entire function app consisting of multiple functions. This is a good option if you want to create heartbeats from queue-triggered functions or similar. In these cases, you don't want to create a heartbeat every time a message from the queue is handled, but you will want to notify elmah.io if dependencies like database connection suddenly aren't available. We recommend creating a new heartbeat function for this kind of Function. Like in the previous example, make sure to extend your Startup.cs file like this: using Microsoft.Azure.Functions.Extensions.DependencyInjection; using Microsoft.Azure.WebJobs.Host; using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection; using Elmah.Io.Client; [assembly: FunctionsStartup(typeof(My.FunctionApp.Startup))] namespace My.FunctionApp { public class Startup : FunctionsStartup { public override void Configure(IFunctionsHostBuilder builder) { var config = new ConfigurationBuilder() .AddJsonFile(\"local.settings.json\", optional: true, reloadOnChange: true) .AddEnvironmentVariables() .Build(); builder.Services.AddSingleton(config); var elmahIo = ElmahioAPI.Create(config[\"apiKey\"]); builder.Services.AddSingleton(elmahIo.Heartbeats); } } } Then create a new timed function with the following code: using System; using System.Threading.Tasks; using Elmah.Io.Client; using Microsoft.Azure.WebJobs; using Microsoft.Extensions.Configuration; namespace My.FunctionApp { public class Heartbeat { private readonly IConfiguration config; private readonly IHeartbeats heartbeats; public Heartbeat(IHeartbeats heartbeats, IConfiguration config) { this.heartbeats = heartbeats; this.config = config; } [FunctionName(\"Heartbeat\")] public async Task Run([TimerTrigger(\"0 */5 * * * *\")]TimerInfo myTimer) { var result = \"Healthy\"; var reason = (string)null; try { // Check your dependencies here } catch (Exception e) { result = \"Unhealthy\"; reason = e.ToString(); } await heartbeats.CreateAsync(config[\"heartbeatId\"], config[\"logId\"], new CreateHeartbeat { Result = result, Reason = reason, }); } } } In the example above, the new function named Heartbeat (the name is entirely up to you) executes every 5 minutes. Replace the comment with your checks like opening a connection to the database. If everything works as it should, a Healthy heartbeat is logged to elmah.io. If an exception is thrown while checking your dependencies, an Unhealthy heartbeat is created. When running locally, you may want to disable heartbeats. You can use the Disable attribute for that by including the following code: #if DEBUG [Disable] #endif public class Heartbeat { // ... } or add the following to local.settings.json : { // ... \"Values\": { \"AzureWebJobs.Heartbeat.Disabled\": true, // ... } }","title":"Using a separate heartbeat function"},{"location":"logging-heartbeats-from-coravel/","text":"Logging heartbeats from Coravel Coravel supports scheduled tasks similar to Quartz and Hangfire. With elmah.io Heartbeats, monitoring if and when Coraval tasks are running is easy. To publish heartbeats from Coravel, install the Elmah.Io.Client NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client Install-Package Elmah.Io.Client <PackageReference Include=\"Elmah.Io.Client\" Version=\"5.*\" /> paket add Elmah.Io.Client For this example, we'll schedule a job named MyJob to execute every minute: builder.Services.AddTransient<MyJob>(); builder.Services.AddScheduler(); // ... app.Services.UseScheduler(scheduler => { scheduler.Schedule<MyJob>().EveryMinute(); }); To automatically publish a heartbeat when the job is executed, add the following code to the same file where you configure Coravel: var elmahIoClient = ElmahioAPI.Create(\"API_KEY\", new ElmahIoOptions { Timeout = TimeSpan.FromSeconds(30) }); builder.Services.AddSingleton(elmahIoClient.Heartbeats); Replace API_KEY ( Where is my API key? ) with an API key containing permission to create heartbeats. In the MyJob class, you can inject the IHeartbeatsClient and wrap the job code in a try/catch block: public class MyJob : IInvocable { private readonly IHeartbeatsClient heartbeats; public MyJob(IHeartbeatsClient heartbeats) { this.heartbeats = heartbeats; } public async Task Invoke() { var logId = new Guid(\"LOG_ID\"); var heartbeatId = \"HEARTBEAT_ID\"; var stopwatch = new Stopwatch(); try { stopwatch.Start(); // Execute your job await heartbeats.HealthyAsync(logId, heartbeatId, took: stopwatch.ElapsedMilliseconds); } catch (Exception e) { await heartbeats.UnhealthyAsync(logId, heartbeatId, e.ToString(), took: stopwatch.ElapsedMilliseconds); throw; } } } Replace LOG_ID ( Where is my log ID? ) and HEARTBEAT_ID with the correct values from elmah.io. When the job successfully runs, a Healthy heartbeat is logged to elmah.io. If an exception is thrown an Unhealthy heartbeat is logged. elmah.io will automatically create an error if a heartbeat is missing, as long as the heartbeat is correctly configured as explained in Set up Heartbeats .","title":"Logging heartbeats from Coravel"},{"location":"logging-heartbeats-from-coravel/#logging-heartbeats-from-coravel","text":"Coravel supports scheduled tasks similar to Quartz and Hangfire. With elmah.io Heartbeats, monitoring if and when Coraval tasks are running is easy. To publish heartbeats from Coravel, install the Elmah.Io.Client NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client Install-Package Elmah.Io.Client <PackageReference Include=\"Elmah.Io.Client\" Version=\"5.*\" /> paket add Elmah.Io.Client For this example, we'll schedule a job named MyJob to execute every minute: builder.Services.AddTransient<MyJob>(); builder.Services.AddScheduler(); // ... app.Services.UseScheduler(scheduler => { scheduler.Schedule<MyJob>().EveryMinute(); }); To automatically publish a heartbeat when the job is executed, add the following code to the same file where you configure Coravel: var elmahIoClient = ElmahioAPI.Create(\"API_KEY\", new ElmahIoOptions { Timeout = TimeSpan.FromSeconds(30) }); builder.Services.AddSingleton(elmahIoClient.Heartbeats); Replace API_KEY ( Where is my API key? ) with an API key containing permission to create heartbeats. In the MyJob class, you can inject the IHeartbeatsClient and wrap the job code in a try/catch block: public class MyJob : IInvocable { private readonly IHeartbeatsClient heartbeats; public MyJob(IHeartbeatsClient heartbeats) { this.heartbeats = heartbeats; } public async Task Invoke() { var logId = new Guid(\"LOG_ID\"); var heartbeatId = \"HEARTBEAT_ID\"; var stopwatch = new Stopwatch(); try { stopwatch.Start(); // Execute your job await heartbeats.HealthyAsync(logId, heartbeatId, took: stopwatch.ElapsedMilliseconds); } catch (Exception e) { await heartbeats.UnhealthyAsync(logId, heartbeatId, e.ToString(), took: stopwatch.ElapsedMilliseconds); throw; } } } Replace LOG_ID ( Where is my log ID? ) and HEARTBEAT_ID with the correct values from elmah.io. When the job successfully runs, a Healthy heartbeat is logged to elmah.io. If an exception is thrown an Unhealthy heartbeat is logged. elmah.io will automatically create an error if a heartbeat is missing, as long as the heartbeat is correctly configured as explained in Set up Heartbeats .","title":"Logging heartbeats from Coravel"},{"location":"logging-heartbeats-from-curl/","text":"Logging heartbeats from cURL Sometimes is just easier to use cURL when needing to call a REST API. Creating elmah.io heartbeats is easy using cURL and fits well into scripts, scheduled tasks, and similar. To create a new heartbeat, include the following cURL command in your script: curl -X POST \"https://api.elmah.io/v3/heartbeats/LOG_ID/HEARTBEAT_ID?api_key=API_KEY\" -H \"accept: application/json\" -H \"Content-Type: application/json-patch+json\" -d \"{ \\\"result\\\": \\\"Healthy\\\"}\" Remember to place LOG_ID , HEARTBEAT_ID , and API_KEY with the values found on the Heartbeats tab in elmah.io. To create an Unhealthy heartbeat, change the result in the body and include a reason : curl -X POST \"https://api.elmah.io/v3/heartbeats/LOG_ID/HEARTBEAT_ID?api_key=API_KEY\" -H \"accept: application/json\" -H \"Content-Type: application/json-patch+json\" -d \"{ \\\"result\\\": \\\"Unhealthy\\\", \\\"reason\\\": \\\"Something isn't working\\\" }\"","title":"Logging heartbeats from cURL"},{"location":"logging-heartbeats-from-curl/#logging-heartbeats-from-curl","text":"Sometimes is just easier to use cURL when needing to call a REST API. Creating elmah.io heartbeats is easy using cURL and fits well into scripts, scheduled tasks, and similar. To create a new heartbeat, include the following cURL command in your script: curl -X POST \"https://api.elmah.io/v3/heartbeats/LOG_ID/HEARTBEAT_ID?api_key=API_KEY\" -H \"accept: application/json\" -H \"Content-Type: application/json-patch+json\" -d \"{ \\\"result\\\": \\\"Healthy\\\"}\" Remember to place LOG_ID , HEARTBEAT_ID , and API_KEY with the values found on the Heartbeats tab in elmah.io. To create an Unhealthy heartbeat, change the result in the body and include a reason : curl -X POST \"https://api.elmah.io/v3/heartbeats/LOG_ID/HEARTBEAT_ID?api_key=API_KEY\" -H \"accept: application/json\" -H \"Content-Type: application/json-patch+json\" -d \"{ \\\"result\\\": \\\"Unhealthy\\\", \\\"reason\\\": \\\"Something isn't working\\\" }\"","title":"Logging heartbeats from cURL"},{"location":"logging-heartbeats-from-hangfire/","text":"Logging heartbeats from Hangfire Scheduling recurring tasks with Hangfire is easy. Monitoring if tasks are successfully executed or even run can be a challenge. With elmah.io Heartbeats, we provide native monitoring of Hangfire recurring tasks. To publish heartbeats from Hangifre, install the Elmah.Io.Heartbeats.Hangfire NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Heartbeats.Hangfire Install-Package Elmah.Io.Heartbeats.Hangfire <PackageReference Include=\"Elmah.Io.Heartbeats.Hangfire\" Version=\"5.*\" /> paket add Elmah.Io.Heartbeats.Hangfire For this example, we'll schedule a method named Test to execute every minute: RecurringJob.AddOrUpdate(() => Test(), Cron.Minutely); To automatically publish a heartbeat when the job is executed, add the following using : using Elmah.Io.Heartbeats.Hangfire; And decorate the Test -method with the ElmahIoHeartbeat attribute: [ElmahIoHeartbeat(\"API_KEY\", \"LOG_ID\", \"HEARTBEAT_ID\")] public void Test() { // ... } Replace API_KEY ( Where is my API key? ), LOG_ID ( Where is my log ID? ), and HEARTBEAT_ID with the correct variables from elmah.io. When the job successfully runs, a Healthy heartbeat is logged to elmah.io. If an exception is thrown an Unhealthy heartbeat is logged. elmah.io will automatically create an error if a heartbeat is missing, as long as the heartbeat is correctly configured as explained in Set up Heartbeats . Move configuration to config files You normally don't include your API key, log ID, and heartbeat ID in C# code as shown in the example above. Unfortunately, Hangfire attributes doesn't support dependency injection or configuration from config files. There's a small \"hack\" that you can use to move the configuration to a configuration file by creating a custom attribute: using Elmah.Io.Heartbeats.Hangfire; using Hangfire.Common; using Hangfire.Server; using System.Configuration; public class AppSettingsElmahIoHeartbeatAttribute : JobFilterAttribute, IServerFilter { private readonly ElmahIoHeartbeatAttribute _inner; public AppSettingsElmahIoHeartbeatAttribute() { var apiKey = ConfigurationManager.AppSettings[\"apiKey\"]; var logId = ConfigurationManager.AppSettings[\"logId\"]; var heartbeatId = ConfigurationManager.AppSettings[\"heartbeatId\"]; _inner = new ElmahIoHeartbeatAttribute(apiKey, logId, heartbeatId); } public void OnPerformed(PerformedContext filterContext) { _inner.OnPerformed(filterContext); } public void OnPerforming(PerformingContext filterContext) { _inner.OnPerforming(filterContext); } } In the example the AppSettingsElmahIoHeartbeatAttribute class wrap ElmahIoHeartbeatAttribute . By doing so, it is possible to fetch configuration from application settings as part of the constructor. The approach would be similar when using IConfiguration (like in ASP.NET Core), but you will need to share a reference to the configuration object somehow. To use AppSettingsElmahIoHeartbeatAttribute simply add it to the method: [AppSettingsElmahIoHeartbeat] public void Test() { // ... } As an alternative, you can register the ElmahIoHeartbeatAttribute as a global attribute. In this example we use IConfiguration in ASP.NET Core to fetch configuration from the appsettings.json file: public class Startup { public Startup(IConfiguration configuration) { Configuration = configuration; } public IConfiguration Configuration { get; } // This method gets called by the runtime. Use this method to add services to the container. public void ConfigureServices(IServiceCollection services) { services.AddHangfire(config => config // ... .UseFilter(new ElmahIoHeartbeatAttribute( Configuration[\"ElmahIo:ApiKey\"], Configuration[\"ElmahIo:LogId\"], Configuration[\"ElmahIo:HeartbeatId\"]))); } // ... } This will execute the ElmahIoHeartbeat filter for every Hangfire job which isn't ideal if running multiple jobs within the same project.","title":"Logging heartbeats from Hangfire"},{"location":"logging-heartbeats-from-hangfire/#logging-heartbeats-from-hangfire","text":"Scheduling recurring tasks with Hangfire is easy. Monitoring if tasks are successfully executed or even run can be a challenge. With elmah.io Heartbeats, we provide native monitoring of Hangfire recurring tasks. To publish heartbeats from Hangifre, install the Elmah.Io.Heartbeats.Hangfire NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Heartbeats.Hangfire Install-Package Elmah.Io.Heartbeats.Hangfire <PackageReference Include=\"Elmah.Io.Heartbeats.Hangfire\" Version=\"5.*\" /> paket add Elmah.Io.Heartbeats.Hangfire For this example, we'll schedule a method named Test to execute every minute: RecurringJob.AddOrUpdate(() => Test(), Cron.Minutely); To automatically publish a heartbeat when the job is executed, add the following using : using Elmah.Io.Heartbeats.Hangfire; And decorate the Test -method with the ElmahIoHeartbeat attribute: [ElmahIoHeartbeat(\"API_KEY\", \"LOG_ID\", \"HEARTBEAT_ID\")] public void Test() { // ... } Replace API_KEY ( Where is my API key? ), LOG_ID ( Where is my log ID? ), and HEARTBEAT_ID with the correct variables from elmah.io. When the job successfully runs, a Healthy heartbeat is logged to elmah.io. If an exception is thrown an Unhealthy heartbeat is logged. elmah.io will automatically create an error if a heartbeat is missing, as long as the heartbeat is correctly configured as explained in Set up Heartbeats .","title":"Logging heartbeats from Hangfire"},{"location":"logging-heartbeats-from-hangfire/#move-configuration-to-config-files","text":"You normally don't include your API key, log ID, and heartbeat ID in C# code as shown in the example above. Unfortunately, Hangfire attributes doesn't support dependency injection or configuration from config files. There's a small \"hack\" that you can use to move the configuration to a configuration file by creating a custom attribute: using Elmah.Io.Heartbeats.Hangfire; using Hangfire.Common; using Hangfire.Server; using System.Configuration; public class AppSettingsElmahIoHeartbeatAttribute : JobFilterAttribute, IServerFilter { private readonly ElmahIoHeartbeatAttribute _inner; public AppSettingsElmahIoHeartbeatAttribute() { var apiKey = ConfigurationManager.AppSettings[\"apiKey\"]; var logId = ConfigurationManager.AppSettings[\"logId\"]; var heartbeatId = ConfigurationManager.AppSettings[\"heartbeatId\"]; _inner = new ElmahIoHeartbeatAttribute(apiKey, logId, heartbeatId); } public void OnPerformed(PerformedContext filterContext) { _inner.OnPerformed(filterContext); } public void OnPerforming(PerformingContext filterContext) { _inner.OnPerforming(filterContext); } } In the example the AppSettingsElmahIoHeartbeatAttribute class wrap ElmahIoHeartbeatAttribute . By doing so, it is possible to fetch configuration from application settings as part of the constructor. The approach would be similar when using IConfiguration (like in ASP.NET Core), but you will need to share a reference to the configuration object somehow. To use AppSettingsElmahIoHeartbeatAttribute simply add it to the method: [AppSettingsElmahIoHeartbeat] public void Test() { // ... } As an alternative, you can register the ElmahIoHeartbeatAttribute as a global attribute. In this example we use IConfiguration in ASP.NET Core to fetch configuration from the appsettings.json file: public class Startup { public Startup(IConfiguration configuration) { Configuration = configuration; } public IConfiguration Configuration { get; } // This method gets called by the runtime. Use this method to add services to the container. public void ConfigureServices(IServiceCollection services) { services.AddHangfire(config => config // ... .UseFilter(new ElmahIoHeartbeatAttribute( Configuration[\"ElmahIo:ApiKey\"], Configuration[\"ElmahIo:LogId\"], Configuration[\"ElmahIo:HeartbeatId\"]))); } // ... } This will execute the ElmahIoHeartbeat filter for every Hangfire job which isn't ideal if running multiple jobs within the same project.","title":"Move configuration to config files"},{"location":"logging-heartbeats-from-isolated-azure-functions/","text":"Logging heartbeats from Isolated Azure Functions Logging heartbeats from Isolated Azure Functions Using middleware in Elmah.Io.Functions.Isolated Manually using Elmah.Io.Client Using a separate heartbeat function Isolated Azure Functions are great candidates for adding heartbeats. For web APIs implemented with Isolated Azure Functions, you should create a /health endpoint and ping that using Uptime Monitoring . But for timer triggered, queue triggers, and similar function apps, heartbeats are a great way to verify that your function is successfully running. The rest of this document is split into different ways of adding heartbeats to one or more functions. Using middleware in Elmah.Io.Functions.Isolated Scheduled functions or functions not running often can use the heartbeat middleware part of the Elmah.Io.Functions.Isolated package. This will log a Healthy or Unhealthy endpoint every time a function is running. All functions within the same function app uses the same middleware, why this is primarily inteded for function apps with one scheduled function. Start by installing the Elmah.Io.Functions.Isolated package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Functions.Isolated Install-Package Elmah.Io.Functions.Isolated <PackageReference Include=\"Elmah.Io.Functions.Isolated\" Version=\"5.*\" /> paket add Elmah.Io.Functions.Isolated Extend the Program.cs file with the following code: .ConfigureFunctionsWorkerDefaults((context, app) => { app.AddHeartbeat(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); options.HeartbeatId = \"HEARTBEAT_ID\"; }); }) The code installs the heartbeat middleware, which will handle all of the communication with the elmah.io API. Manually using Elmah.Io.Client The example above installs the heartbeat filter for all functions. If you have multiple functions inside your function app, or you want greater control of when and how to send heartbeats, you can use Elmah.Io.Client to create heartbeats. Start by installing the Elmah.Io.Client NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client Install-Package Elmah.Io.Client <PackageReference Include=\"Elmah.Io.Client\" Version=\"5.*\" /> paket add Elmah.Io.Client Extend the Program.cs file with the following code: .ConfigureServices((ctx, services) => { var elmahIo = ElmahioAPI.Create(\"API_KEY\"); services.AddSingleton(elmahIo.Heartbeats); }); Inside your function, wrap all of the code in try/catch and add code to create either a Healthy or Unhealthy heartbeat: public class TimedFunction { private readonly IHeartbeats heartbeats; private readonly IConfiguration configuration; public TimedFunction(IHeartbeats heartbeats, IConfiguration configuration) { this.heartbeats = heartbeats; this.configuration = configuration; } [FunctionName(\"TimedFunction\")] public async Task Run([TimerTrigger(\"0 0 * * * *\")]TimerInfo myTimer) { var heartbeatId = configuration[\"heartbeatId\"]; var logId = configuration[\"logId\"]; try { // Your function code goes here await heartbeats.CreateAsync(heartbeatId, logId, new CreateHeartbeat { Result = \"Healthy\" }); } catch (Exception e) { await heartbeats.CreateAsync(heartbeatId, logId, new CreateHeartbeat { Result = \"Unhealthy\", Reason = e.ToString(), }); } } } If your function code executes successfully, a Healthy heartbeat is created. If an exception is thrown, an Unhealthy heartbeat with the thrown exception in Reason is created. Be aware that configuring a function to run in an internal (like every hour for the example above) does not ensure that the function is executed exactly on the hour. We recommend to set the grace period for these types of heartbeats to 15-30 minutes to avoid heartbeat errors when the timed function is past due. Using a separate heartbeat function You may want a single heartbeat representing your entire function app consisting of multiple functions. This is a good option if you want to create heartbeats from queue-triggered functions or similar. In these cases, you don't want to create a heartbeat every time a message from the queue is handled, but you will want to notify elmah.io if dependencies like database connection suddenly aren't available. We recommend creating a new heartbeat function for this kind of Function. Like in the previous example, make sure to extend your Program.cs file like this: .ConfigureServices((ctx, services) => { var elmahIo = ElmahioAPI.Create(\"API_KEY\"); services.AddSingleton(elmahIo.Heartbeats); }); Then create a new timed function with the following code: using System; using System.Threading.Tasks; using Elmah.Io.Client; using Microsoft.Azure.WebJobs; using Microsoft.Extensions.Configuration; namespace My.FunctionApp { public class Heartbeat { private readonly IConfiguration config; private readonly IHeartbeats heartbeats; public Heartbeat(IHeartbeats heartbeats, IConfiguration config) { this.heartbeats = heartbeats; this.config = config; } [FunctionName(\"Heartbeat\")] public async Task Run([TimerTrigger(\"0 */5 * * * *\")]TimerInfo myTimer) { var result = \"Healthy\"; var reason = (string)null; try { // Check your dependencies here } catch (Exception e) { result = \"Unhealthy\"; reason = e.ToString(); } await heartbeats.CreateAsync(config[\"heartbeatId\"], config[\"logId\"], new CreateHeartbeat { Result = result, Reason = reason, }); } } } In the example above, the new function named Heartbeat (the name is entirely up to you) executes every 5 minutes. Replace the comment with your checks like opening a connection to the database. If everything works as it should, a Healthy heartbeat is logged to elmah.io. If an exception is thrown while checking your dependencies, an Unhealthy heartbeat is created. When running locally, you may want to disable heartbeats: #if DEBUG [FunctionName(\"Heartbeat\")] #endif public async Task Run([TimerTrigger(\"0 */5 * * * *\")]TimerInfo myTimer) { // ... }","title":"Logging heartbeats from Isolated Azure Functions"},{"location":"logging-heartbeats-from-isolated-azure-functions/#logging-heartbeats-from-isolated-azure-functions","text":"Logging heartbeats from Isolated Azure Functions Using middleware in Elmah.Io.Functions.Isolated Manually using Elmah.Io.Client Using a separate heartbeat function Isolated Azure Functions are great candidates for adding heartbeats. For web APIs implemented with Isolated Azure Functions, you should create a /health endpoint and ping that using Uptime Monitoring . But for timer triggered, queue triggers, and similar function apps, heartbeats are a great way to verify that your function is successfully running. The rest of this document is split into different ways of adding heartbeats to one or more functions.","title":"Logging heartbeats from Isolated Azure Functions"},{"location":"logging-heartbeats-from-isolated-azure-functions/#using-middleware-in-elmahiofunctionsisolated","text":"Scheduled functions or functions not running often can use the heartbeat middleware part of the Elmah.Io.Functions.Isolated package. This will log a Healthy or Unhealthy endpoint every time a function is running. All functions within the same function app uses the same middleware, why this is primarily inteded for function apps with one scheduled function. Start by installing the Elmah.Io.Functions.Isolated package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Functions.Isolated Install-Package Elmah.Io.Functions.Isolated <PackageReference Include=\"Elmah.Io.Functions.Isolated\" Version=\"5.*\" /> paket add Elmah.Io.Functions.Isolated Extend the Program.cs file with the following code: .ConfigureFunctionsWorkerDefaults((context, app) => { app.AddHeartbeat(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); options.HeartbeatId = \"HEARTBEAT_ID\"; }); }) The code installs the heartbeat middleware, which will handle all of the communication with the elmah.io API.","title":"Using middleware in Elmah.Io.Functions.Isolated"},{"location":"logging-heartbeats-from-isolated-azure-functions/#manually-using-elmahioclient","text":"The example above installs the heartbeat filter for all functions. If you have multiple functions inside your function app, or you want greater control of when and how to send heartbeats, you can use Elmah.Io.Client to create heartbeats. Start by installing the Elmah.Io.Client NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client Install-Package Elmah.Io.Client <PackageReference Include=\"Elmah.Io.Client\" Version=\"5.*\" /> paket add Elmah.Io.Client Extend the Program.cs file with the following code: .ConfigureServices((ctx, services) => { var elmahIo = ElmahioAPI.Create(\"API_KEY\"); services.AddSingleton(elmahIo.Heartbeats); }); Inside your function, wrap all of the code in try/catch and add code to create either a Healthy or Unhealthy heartbeat: public class TimedFunction { private readonly IHeartbeats heartbeats; private readonly IConfiguration configuration; public TimedFunction(IHeartbeats heartbeats, IConfiguration configuration) { this.heartbeats = heartbeats; this.configuration = configuration; } [FunctionName(\"TimedFunction\")] public async Task Run([TimerTrigger(\"0 0 * * * *\")]TimerInfo myTimer) { var heartbeatId = configuration[\"heartbeatId\"]; var logId = configuration[\"logId\"]; try { // Your function code goes here await heartbeats.CreateAsync(heartbeatId, logId, new CreateHeartbeat { Result = \"Healthy\" }); } catch (Exception e) { await heartbeats.CreateAsync(heartbeatId, logId, new CreateHeartbeat { Result = \"Unhealthy\", Reason = e.ToString(), }); } } } If your function code executes successfully, a Healthy heartbeat is created. If an exception is thrown, an Unhealthy heartbeat with the thrown exception in Reason is created. Be aware that configuring a function to run in an internal (like every hour for the example above) does not ensure that the function is executed exactly on the hour. We recommend to set the grace period for these types of heartbeats to 15-30 minutes to avoid heartbeat errors when the timed function is past due.","title":"Manually using Elmah.Io.Client"},{"location":"logging-heartbeats-from-isolated-azure-functions/#using-a-separate-heartbeat-function","text":"You may want a single heartbeat representing your entire function app consisting of multiple functions. This is a good option if you want to create heartbeats from queue-triggered functions or similar. In these cases, you don't want to create a heartbeat every time a message from the queue is handled, but you will want to notify elmah.io if dependencies like database connection suddenly aren't available. We recommend creating a new heartbeat function for this kind of Function. Like in the previous example, make sure to extend your Program.cs file like this: .ConfigureServices((ctx, services) => { var elmahIo = ElmahioAPI.Create(\"API_KEY\"); services.AddSingleton(elmahIo.Heartbeats); }); Then create a new timed function with the following code: using System; using System.Threading.Tasks; using Elmah.Io.Client; using Microsoft.Azure.WebJobs; using Microsoft.Extensions.Configuration; namespace My.FunctionApp { public class Heartbeat { private readonly IConfiguration config; private readonly IHeartbeats heartbeats; public Heartbeat(IHeartbeats heartbeats, IConfiguration config) { this.heartbeats = heartbeats; this.config = config; } [FunctionName(\"Heartbeat\")] public async Task Run([TimerTrigger(\"0 */5 * * * *\")]TimerInfo myTimer) { var result = \"Healthy\"; var reason = (string)null; try { // Check your dependencies here } catch (Exception e) { result = \"Unhealthy\"; reason = e.ToString(); } await heartbeats.CreateAsync(config[\"heartbeatId\"], config[\"logId\"], new CreateHeartbeat { Result = result, Reason = reason, }); } } } In the example above, the new function named Heartbeat (the name is entirely up to you) executes every 5 minutes. Replace the comment with your checks like opening a connection to the database. If everything works as it should, a Healthy heartbeat is logged to elmah.io. If an exception is thrown while checking your dependencies, an Unhealthy heartbeat is created. When running locally, you may want to disable heartbeats: #if DEBUG [FunctionName(\"Heartbeat\")] #endif public async Task Run([TimerTrigger(\"0 */5 * * * *\")]TimerInfo myTimer) { // ... }","title":"Using a separate heartbeat function"},{"location":"logging-heartbeats-from-net-core-worker-services/","text":"Logging heartbeats from .NET (Core) Worker Services .NET (Core) offers Worker Services as a way to schedule recurring tasks either hosted inside an ASP.NET Core website or as a Windows Service. Monitoring that Worker Services run successfully, can be easily set up with elmah.io Heartbeats. To register heartbeats from a worker service, start by creating a new heartbeat on the elmah.io UI. For this example, we want to monitor that a Service Worker is running every 5 minutes, why we set Interval to 5 minutes and Grace to 1 minute. Next, install the Elmah.Io.Client NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client Install-Package Elmah.Io.Client <PackageReference Include=\"Elmah.Io.Client\" Version=\"5.*\" /> paket add Elmah.Io.Client In the Program.cs or Startup.cs file (depending on where you register dependencies), register IHeartbeats from the elmah.io client: .ConfigureServices((hostContext, services) => { var elmahIoApi = ElmahioAPI.Create(hostContext.Configuration[\"ElmahIo:ApiKey\"]); services.AddSingleton(elmahIoApi.Heartbeats); // ... services.AddHostedService<Worker>(); }); In the example, the configuration should be made available in the appsettings.json file as shown later in this article. In the service class ( Worker ) you can inject the IHeartbeats object, as well as additional configuration needed to create heartbeats: public class Worker : BackgroundService { private readonly IHeartbeats heartbeats; private readonly Guid logId; private readonly string heartbeatId; public Worker(IHeartbeats heartbeats, IConfiguration configuration) { this.heartbeats = heartbeats; this.logId = new Guid(configuration[\"ElmahIo:LogId\"]); this.heartbeatId = configuration[\"ElmahIo:HeartbeatId\"]; } } Inside the ExecuteAsync method, wrap the worker code in try-catch and call the HealthyAsync method when the worker successfully run and the UnhealthyAsync method when an exception occurs: protected override async Task ExecuteAsync(CancellationToken stoppingToken) { while (!stoppingToken.IsCancellationRequested) { try { // Do work await heartbeats.HealthyAsync(logId, heartbeatId); } catch (Exception e) { await heartbeats.UnhealthyAsync(logId, heartbeatId, e.ToString()); } await Task.Delay(TimeSpan.FromMinutes(5), stoppingToken); } } In the appsettings.json file, add the elmah.io configuration: { \"ElmahIo\": { \"ApiKey\": \"API_KEY\", \"LogId\": \"LOG_ID\", \"HeartbeatId\": \"HEARTBEAT_ID\" } } Replace the values with values found in the elmah.io UI. Remember to enable the Heartbeats | Write permission on the used API key.","title":"Logging heartbeats from .NET Core Worker Services"},{"location":"logging-heartbeats-from-net-core-worker-services/#logging-heartbeats-from-net-core-worker-services","text":".NET (Core) offers Worker Services as a way to schedule recurring tasks either hosted inside an ASP.NET Core website or as a Windows Service. Monitoring that Worker Services run successfully, can be easily set up with elmah.io Heartbeats. To register heartbeats from a worker service, start by creating a new heartbeat on the elmah.io UI. For this example, we want to monitor that a Service Worker is running every 5 minutes, why we set Interval to 5 minutes and Grace to 1 minute. Next, install the Elmah.Io.Client NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client Install-Package Elmah.Io.Client <PackageReference Include=\"Elmah.Io.Client\" Version=\"5.*\" /> paket add Elmah.Io.Client In the Program.cs or Startup.cs file (depending on where you register dependencies), register IHeartbeats from the elmah.io client: .ConfigureServices((hostContext, services) => { var elmahIoApi = ElmahioAPI.Create(hostContext.Configuration[\"ElmahIo:ApiKey\"]); services.AddSingleton(elmahIoApi.Heartbeats); // ... services.AddHostedService<Worker>(); }); In the example, the configuration should be made available in the appsettings.json file as shown later in this article. In the service class ( Worker ) you can inject the IHeartbeats object, as well as additional configuration needed to create heartbeats: public class Worker : BackgroundService { private readonly IHeartbeats heartbeats; private readonly Guid logId; private readonly string heartbeatId; public Worker(IHeartbeats heartbeats, IConfiguration configuration) { this.heartbeats = heartbeats; this.logId = new Guid(configuration[\"ElmahIo:LogId\"]); this.heartbeatId = configuration[\"ElmahIo:HeartbeatId\"]; } } Inside the ExecuteAsync method, wrap the worker code in try-catch and call the HealthyAsync method when the worker successfully run and the UnhealthyAsync method when an exception occurs: protected override async Task ExecuteAsync(CancellationToken stoppingToken) { while (!stoppingToken.IsCancellationRequested) { try { // Do work await heartbeats.HealthyAsync(logId, heartbeatId); } catch (Exception e) { await heartbeats.UnhealthyAsync(logId, heartbeatId, e.ToString()); } await Task.Delay(TimeSpan.FromMinutes(5), stoppingToken); } } In the appsettings.json file, add the elmah.io configuration: { \"ElmahIo\": { \"ApiKey\": \"API_KEY\", \"LogId\": \"LOG_ID\", \"HeartbeatId\": \"HEARTBEAT_ID\" } } Replace the values with values found in the elmah.io UI. Remember to enable the Heartbeats | Write permission on the used API key.","title":"Logging heartbeats from .NET (Core) Worker Services"},{"location":"logging-heartbeats-from-powershell/","text":"Logging heartbeats from PowerShell The Heartbeats feature is a great way to verify that scripts run successfully too. A lot of people have PowerShell scripts running on a schedule to clean up folders on the file system, make batch changes in a database, and more. To include heartbeats in your PowerShell script, wrap the code in try/catch and add either Healthy or Unhealthy result: $apiKey = \"API_KEY\" $logId = \"LOG_ID\" $heartbeatId = \"HEARTBEAT_ID\" $url = \"https://api.elmah.io/v3/heartbeats/$logId/$heartbeatId/?api_key=$apiKey\" try { # Your script goes here $body = @{ result = \"Healthy\" } Invoke-RestMethod -Method Post -Uri $url -Body ($body|ConvertTo-Json) -ContentType \"application/json-patch+json\" } catch { $body = @{ result = \"Unhealthy\" reason = $_.Exception.Message } Invoke-RestMethod -Method Post -Uri $url -Body ($body|ConvertTo-Json) -ContentType \"application/json-patch+json\" } If everything goes well, a Healthy heartbeat is logged using the Invoke-RestMethod cmdlet. If an exception is thrown in your script, an Unhealthy heartbeat is logged.","title":"Logging heartbeats from PowerShell"},{"location":"logging-heartbeats-from-powershell/#logging-heartbeats-from-powershell","text":"The Heartbeats feature is a great way to verify that scripts run successfully too. A lot of people have PowerShell scripts running on a schedule to clean up folders on the file system, make batch changes in a database, and more. To include heartbeats in your PowerShell script, wrap the code in try/catch and add either Healthy or Unhealthy result: $apiKey = \"API_KEY\" $logId = \"LOG_ID\" $heartbeatId = \"HEARTBEAT_ID\" $url = \"https://api.elmah.io/v3/heartbeats/$logId/$heartbeatId/?api_key=$apiKey\" try { # Your script goes here $body = @{ result = \"Healthy\" } Invoke-RestMethod -Method Post -Uri $url -Body ($body|ConvertTo-Json) -ContentType \"application/json-patch+json\" } catch { $body = @{ result = \"Unhealthy\" reason = $_.Exception.Message } Invoke-RestMethod -Method Post -Uri $url -Body ($body|ConvertTo-Json) -ContentType \"application/json-patch+json\" } If everything goes well, a Healthy heartbeat is logged using the Invoke-RestMethod cmdlet. If an exception is thrown in your script, an Unhealthy heartbeat is logged.","title":"Logging heartbeats from PowerShell"},{"location":"logging-heartbeats-from-umbraco/","text":"Logging heartbeats from Umbraco Logging heartbeats from Umbraco Umbraco >= 9 Umbraco 8 Umbraco comes with a nice health check feature that can carry out a range of built-in health checks as well as custom checks you may want to add. Umbraco Health Checks fits perfectly with elmah.io Heartbeats . To start publishing Umbraco Health Checks to elmah.io, create a new health check. Select 1 day in Interval and 5 minutes in Grace . The next step depends on the major version of Umbraco. For both examples, replace API_KEY , LOG_ID , and HEARTBEAT_ID with the values found on the elmah.io UI. When launching the website Umbraco automatically executes the health checks once every 24 hours and sends the results to elmah.io. Umbraco >= 9 Note Umbraco 9 is targeting .NET 5.0 which is no longer supported by Microsoft. This is why we have chosen to support Umbraco 10 and up only. Install the Elmah.Io.Umbraco NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Umbraco Install-Package Elmah.Io.Umbraco <PackageReference Include=\"Elmah.Io.Umbraco\" Version=\"5.*\" /> paket add Elmah.Io.Umbraco To publish health check results to your newly created heartbeat, extend the appsettings.json file: { ... \"Umbraco\": { \"CMS\": { ... \"HealthChecks\": { \"Notification\": { \"Enabled\": true, \"NotificationMethods\": { \"elmah.io\": { \"Enabled\": true, \"Verbosity\": \"Summary\", \"Settings\": { \"apiKey\": \"API_KEY\", \"logId\": \"LOG_ID\", \"heartbeatId\": \"HEARTBEAT_ID\" } } } } } } } } Umbraco 8 install the Elmah.Io.Umbraco v4 NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Umbraco --version 4.2.21 Install-Package Elmah.Io.Umbraco -Version 4.2.21 <PackageReference Include=\"Elmah.Io.Umbraco\" Version=\"4.2.21\" /> paket add Elmah.Io.Umbraco --version 4.2.21 For Umbraco to automatically execute health checks, you will need to set your back office URL in the umbracoSettings.config file: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <settings> <!-- ... --> <web.routing umbracoApplicationUrl=\"https://localhost:44381/umbraco/\"> </web.routing> </settings> (localhost is used as an example and should be replaced with a real URL) Umbraco comes with an email publisher already configured. To publish health check results to your newly created heartbeat, extend the HealthChecks.config file: <?xml version =\"1.0\" encoding=\"utf-8\" ?> <HealthChecks> <disabledChecks> </disabledChecks> <notificationSettings enabled=\"true\" firstRunTime=\"\" periodInHours=\"24\"> <notificationMethods> <notificationMethod alias=\"elmah.io\" enabled=\"true\" verbosity=\"Summary\"> <settings> <add key=\"apiKey\" value=\"API_KEY\" /> <add key=\"logId\" value=\"LOG_ID\" /> <add key=\"heartbeatId\" value=\"HEARTBEAT_ID\" /> </settings> </notificationMethod> <notificationMethod alias=\"email\" enabled=\"false\" verbosity=\"Summary\"> <settings> <add key=\"recipientEmail\" value=\"\" /> </settings> </notificationMethod> </notificationMethods> <disabledChecks> </disabledChecks> </notificationSettings> </HealthChecks> For this example, I have disabled the email notification publisher but you can run with both if you'd like.","title":"Logging heartbeats from Umbraco"},{"location":"logging-heartbeats-from-umbraco/#logging-heartbeats-from-umbraco","text":"Logging heartbeats from Umbraco Umbraco >= 9 Umbraco 8 Umbraco comes with a nice health check feature that can carry out a range of built-in health checks as well as custom checks you may want to add. Umbraco Health Checks fits perfectly with elmah.io Heartbeats . To start publishing Umbraco Health Checks to elmah.io, create a new health check. Select 1 day in Interval and 5 minutes in Grace . The next step depends on the major version of Umbraco. For both examples, replace API_KEY , LOG_ID , and HEARTBEAT_ID with the values found on the elmah.io UI. When launching the website Umbraco automatically executes the health checks once every 24 hours and sends the results to elmah.io.","title":"Logging heartbeats from Umbraco"},{"location":"logging-heartbeats-from-umbraco/#umbraco-9","text":"Note Umbraco 9 is targeting .NET 5.0 which is no longer supported by Microsoft. This is why we have chosen to support Umbraco 10 and up only. Install the Elmah.Io.Umbraco NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Umbraco Install-Package Elmah.Io.Umbraco <PackageReference Include=\"Elmah.Io.Umbraco\" Version=\"5.*\" /> paket add Elmah.Io.Umbraco To publish health check results to your newly created heartbeat, extend the appsettings.json file: { ... \"Umbraco\": { \"CMS\": { ... \"HealthChecks\": { \"Notification\": { \"Enabled\": true, \"NotificationMethods\": { \"elmah.io\": { \"Enabled\": true, \"Verbosity\": \"Summary\", \"Settings\": { \"apiKey\": \"API_KEY\", \"logId\": \"LOG_ID\", \"heartbeatId\": \"HEARTBEAT_ID\" } } } } } } } }","title":"Umbraco &gt;= 9"},{"location":"logging-heartbeats-from-umbraco/#umbraco-8","text":"install the Elmah.Io.Umbraco v4 NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Umbraco --version 4.2.21 Install-Package Elmah.Io.Umbraco -Version 4.2.21 <PackageReference Include=\"Elmah.Io.Umbraco\" Version=\"4.2.21\" /> paket add Elmah.Io.Umbraco --version 4.2.21 For Umbraco to automatically execute health checks, you will need to set your back office URL in the umbracoSettings.config file: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <settings> <!-- ... --> <web.routing umbracoApplicationUrl=\"https://localhost:44381/umbraco/\"> </web.routing> </settings> (localhost is used as an example and should be replaced with a real URL) Umbraco comes with an email publisher already configured. To publish health check results to your newly created heartbeat, extend the HealthChecks.config file: <?xml version =\"1.0\" encoding=\"utf-8\" ?> <HealthChecks> <disabledChecks> </disabledChecks> <notificationSettings enabled=\"true\" firstRunTime=\"\" periodInHours=\"24\"> <notificationMethods> <notificationMethod alias=\"elmah.io\" enabled=\"true\" verbosity=\"Summary\"> <settings> <add key=\"apiKey\" value=\"API_KEY\" /> <add key=\"logId\" value=\"LOG_ID\" /> <add key=\"heartbeatId\" value=\"HEARTBEAT_ID\" /> </settings> </notificationMethod> <notificationMethod alias=\"email\" enabled=\"false\" verbosity=\"Summary\"> <settings> <add key=\"recipientEmail\" value=\"\" /> </settings> </notificationMethod> </notificationMethods> <disabledChecks> </disabledChecks> </notificationSettings> </HealthChecks> For this example, I have disabled the email notification publisher but you can run with both if you'd like.","title":"Umbraco 8"},{"location":"logging-heartbeats-from-windows-scheduled-tasks/","text":"Logging heartbeats from Windows Scheduled Tasks How you want to implement heartbeats from Windows Scheduled Tasks depends on how your task is implemented. For tasks written in C#, you typically want to persist heartbeats using the Elmah.Io.Client package as shown in Set up Heartbeats . For scheduled PowerShell or other scripts, you can trigger the elmah.io API as shown in Logging heartbeats from PowerShell and Logging heartbeats from cURL . Invoking the API either through the elmah.io client or using a REST client is the optimal way since you have greater control over what to log. This manual approach is not available when you are not in control of the scheduled code. Examples of this could be custom tools you install as Scheduled Tasks using schtasks.exe or tasks automatically registered when installing third-party software on your server. When configuring a heartbeat through the elmah.io UI you set an expected interval and grace period. If a heartbeat is not received in time, we will automatically log a missing heartbeat error. This will indicate that the scheduled task didn't run or fail and is something that should be looked at. In case you want to log a failing heartbeat as soon as the scheduled task is failing, you can do that using events logged to the Windows Event Log. To set it up, go through the following steps: Open Task Scheduler . Go to Task Scheduler Library and click the Create Task... button. Give the new task a proper name. In the Triggers tab click the New... button. In the New Trigger window select On an event in the Begin the task dropdown. In Settings select the Custom radio button. Click the New Event Filter... button. Select the XML tab and check the Edit query manually checkbox. Now input the XML from the following screenshot (source code later in this article). The custom query will trigger on all Application Error messages from an app named ConsoleApp14.exe . You will need to change the app name to the filename of the app running in the scheduled task. Click the OK button. In the New Trigger window click the OK button to save the trigger. Select the Actions tab. Click the New... button. Select the Start a program option in the Action dropdown. Input values like shown here: Click the OK button to save the action. Click the OK button to save the task. The final step is to add the c:\\scripts\\heartbeat.ps1 PowerShell script invoked by the task. For a better understanding of storing heartbeats through PowerShell check out Logging heartbeats from PowerShell . To log a failing heartbeat to elmah.io you can use the following PowerShell code: $apiKey = \"API_KEY\" $logId = \"LOG_ID\" $heartbeatId = \"HEARTBEAT_ID\" $url = \"https://api.elmah.io/v3/heartbeats/$logId/$heartbeatId/?api_key=$apiKey\" $body = @{ result = \"Unhealthy\" reason = \"Error in scheduled task\" } Invoke-RestMethod -Method Post -Uri $url -Body ($body|ConvertTo-Json) -ContentType \"application/json-patch+json\" That's it. The new task just created will trigger every time there's an application error from your application. Notice that in case your application is manually logging errors to the event log, this will also trigger the task. Source code for reference: <QueryList> <Query Id=\"0\" Path=\"Application\"> <Select Path=\"Application\"> *[System[Provider[@Name='Application Error']]] and *[EventData[(Data[@Name=\"AppName\"]=\"ConsoleApp14.exe\")]] </Select> </Query> </QueryList>","title":"Logging heartbeats from Windows Scheduled Tasks"},{"location":"logging-heartbeats-from-windows-scheduled-tasks/#logging-heartbeats-from-windows-scheduled-tasks","text":"How you want to implement heartbeats from Windows Scheduled Tasks depends on how your task is implemented. For tasks written in C#, you typically want to persist heartbeats using the Elmah.Io.Client package as shown in Set up Heartbeats . For scheduled PowerShell or other scripts, you can trigger the elmah.io API as shown in Logging heartbeats from PowerShell and Logging heartbeats from cURL . Invoking the API either through the elmah.io client or using a REST client is the optimal way since you have greater control over what to log. This manual approach is not available when you are not in control of the scheduled code. Examples of this could be custom tools you install as Scheduled Tasks using schtasks.exe or tasks automatically registered when installing third-party software on your server. When configuring a heartbeat through the elmah.io UI you set an expected interval and grace period. If a heartbeat is not received in time, we will automatically log a missing heartbeat error. This will indicate that the scheduled task didn't run or fail and is something that should be looked at. In case you want to log a failing heartbeat as soon as the scheduled task is failing, you can do that using events logged to the Windows Event Log. To set it up, go through the following steps: Open Task Scheduler . Go to Task Scheduler Library and click the Create Task... button. Give the new task a proper name. In the Triggers tab click the New... button. In the New Trigger window select On an event in the Begin the task dropdown. In Settings select the Custom radio button. Click the New Event Filter... button. Select the XML tab and check the Edit query manually checkbox. Now input the XML from the following screenshot (source code later in this article). The custom query will trigger on all Application Error messages from an app named ConsoleApp14.exe . You will need to change the app name to the filename of the app running in the scheduled task. Click the OK button. In the New Trigger window click the OK button to save the trigger. Select the Actions tab. Click the New... button. Select the Start a program option in the Action dropdown. Input values like shown here: Click the OK button to save the action. Click the OK button to save the task. The final step is to add the c:\\scripts\\heartbeat.ps1 PowerShell script invoked by the task. For a better understanding of storing heartbeats through PowerShell check out Logging heartbeats from PowerShell . To log a failing heartbeat to elmah.io you can use the following PowerShell code: $apiKey = \"API_KEY\" $logId = \"LOG_ID\" $heartbeatId = \"HEARTBEAT_ID\" $url = \"https://api.elmah.io/v3/heartbeats/$logId/$heartbeatId/?api_key=$apiKey\" $body = @{ result = \"Unhealthy\" reason = \"Error in scheduled task\" } Invoke-RestMethod -Method Post -Uri $url -Body ($body|ConvertTo-Json) -ContentType \"application/json-patch+json\" That's it. The new task just created will trigger every time there's an application error from your application. Notice that in case your application is manually logging errors to the event log, this will also trigger the task. Source code for reference: <QueryList> <Query Id=\"0\" Path=\"Application\"> <Select Path=\"Application\"> *[System[Provider[@Name='Application Error']]] and *[EventData[(Data[@Name=\"AppName\"]=\"ConsoleApp14.exe\")]] </Select> </Query> </QueryList>","title":"Logging heartbeats from Windows Scheduled Tasks"},{"location":"logging-through-a-http-proxy/","text":"Logging through a HTTP proxy You may find yourself in a situation, where your production web servers aren't allowing HTTP requests towards the public Internet. This also impacts the elmah.io client, which requires access to the URL https://api.elmah.io. A popular choice of implementing this kind of restriction nowadays is through a HTTP proxy like Squid or Nginx. Luckily the elmah.io client supports proxy configuration out of the box. Let's look at how to configure a HTTP proxy through web.config : <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <configSections> <sectionGroup name=\"elmah\"> <section name=\"security\" requirePermission=\"false\" type=\"Elmah.SecuritySectionHandler, Elmah\" /> <section name=\"errorLog\" requirePermission=\"false\" type=\"Elmah.ErrorLogSectionHandler, Elmah\" /> <section name=\"errorMail\" requirePermission=\"false\" type=\"Elmah.ErrorMailSectionHandler, Elmah\" /> <section name=\"errorFilter\" requirePermission=\"false\" type=\"Elmah.ErrorFilterSectionHandler, Elmah\" /> </sectionGroup> </configSections> <elmah> <security allowRemoteAccess=\"false\" /> <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKey=\"...\" logId=\"...\" /> </elmah> <system.net> <defaultProxy> <proxy usesystemdefault=\"True\" proxyaddress=\"http://192.168.0.1:3128\" bypassonlocal=\"False\"/> </defaultProxy> </system.net> </configuration> The above example is of course greatly simplified. The elmah.io client automatically picks up the defaultProxy configuration through the system.net element. defaultProxy tunnels every request from your server, including requests to elmah.io, through the proxy located on 192.18.0.1 port 3128 (or whatever IP/hostname and port you are using). Proxies with username/password Some proxies require a username/password. Unfortunately, the defaultProxy element doesn't support authentication. You have two ways to set this up: Use default credentials Make sure to set the useDefaultCredentials attribute to true : <system.net> <defaultProxy useDefaultCredentials=\"true\"> <!-- ... --> </defaultProxy> </system.net> Run your web app (application pool) as a user with access to the proxy. Implement your own proxy Add the following class: public class AuthenticatingProxy : IWebProxy { public ICredentials Credentials { get { return new NetworkCredential(\"username\", \"password\"); } set {} } public Uri GetProxy(Uri destination) { return new Uri(\"http://localhost:8888\"); } public bool IsBypassed(Uri host) { return false; } } Configure the new proxy in web.config : <defaultProxy useDefaultCredentials=\"false\"> <module type=\"YourNamespace.AuthenticatingProxy, YourAssembly\" /> </defaultProxy>","title":"Logging through a HTTP proxy"},{"location":"logging-through-a-http-proxy/#logging-through-a-http-proxy","text":"You may find yourself in a situation, where your production web servers aren't allowing HTTP requests towards the public Internet. This also impacts the elmah.io client, which requires access to the URL https://api.elmah.io. A popular choice of implementing this kind of restriction nowadays is through a HTTP proxy like Squid or Nginx. Luckily the elmah.io client supports proxy configuration out of the box. Let's look at how to configure a HTTP proxy through web.config : <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <configSections> <sectionGroup name=\"elmah\"> <section name=\"security\" requirePermission=\"false\" type=\"Elmah.SecuritySectionHandler, Elmah\" /> <section name=\"errorLog\" requirePermission=\"false\" type=\"Elmah.ErrorLogSectionHandler, Elmah\" /> <section name=\"errorMail\" requirePermission=\"false\" type=\"Elmah.ErrorMailSectionHandler, Elmah\" /> <section name=\"errorFilter\" requirePermission=\"false\" type=\"Elmah.ErrorFilterSectionHandler, Elmah\" /> </sectionGroup> </configSections> <elmah> <security allowRemoteAccess=\"false\" /> <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKey=\"...\" logId=\"...\" /> </elmah> <system.net> <defaultProxy> <proxy usesystemdefault=\"True\" proxyaddress=\"http://192.168.0.1:3128\" bypassonlocal=\"False\"/> </defaultProxy> </system.net> </configuration> The above example is of course greatly simplified. The elmah.io client automatically picks up the defaultProxy configuration through the system.net element. defaultProxy tunnels every request from your server, including requests to elmah.io, through the proxy located on 192.18.0.1 port 3128 (or whatever IP/hostname and port you are using).","title":"Logging through a HTTP proxy"},{"location":"logging-through-a-http-proxy/#proxies-with-usernamepassword","text":"Some proxies require a username/password. Unfortunately, the defaultProxy element doesn't support authentication. You have two ways to set this up:","title":"Proxies with username/password"},{"location":"logging-through-a-http-proxy/#use-default-credentials","text":"Make sure to set the useDefaultCredentials attribute to true : <system.net> <defaultProxy useDefaultCredentials=\"true\"> <!-- ... --> </defaultProxy> </system.net> Run your web app (application pool) as a user with access to the proxy.","title":"Use default credentials"},{"location":"logging-through-a-http-proxy/#implement-your-own-proxy","text":"Add the following class: public class AuthenticatingProxy : IWebProxy { public ICredentials Credentials { get { return new NetworkCredential(\"username\", \"password\"); } set {} } public Uri GetProxy(Uri destination) { return new Uri(\"http://localhost:8888\"); } public bool IsBypassed(Uri host) { return false; } } Configure the new proxy in web.config : <defaultProxy useDefaultCredentials=\"false\"> <module type=\"YourNamespace.AuthenticatingProxy, YourAssembly\" /> </defaultProxy>","title":"Implement your own proxy"},{"location":"logging-to-elmah-io-from-a-running-website-on-azure/","text":"Logging to elmah.io from a running website on Azure Note Adding elmah.io on a running website isn't the recommended way to install. It should be used if you are unable to deploy a new version only. To enable error logging to elmah.io, you usually install one of our client integrations through PowerShell or Visual Studio and deploy a new version of your website to a web server. Sometimes you need to monitor an already running website or don't want logging logic as part of your repository. Using the elmah.io Site Extension for Azure App Services, error logging can be added to an already running website. Check out this video tutorial or keep reading for the text version: To start logging errors from your Azure web application, go to the Azure Portal and select the website you want to monitor. Click the Extensions tool: Click the Add button and select .NET elmah.io for Azure : Accept the terms and click the Add button. The elmah.io Site Extension is now added. Once added, restart the website for the new extension to load. Finally, you need to add your API key ( Where is my API key? ) and log ID ( Where is my log ID? ) to Application settings : Make sure to use the app setting names ELMAHIO_APIKEY and ELMAHIO_LOGID . Your Azure web application now logs all uncaught exceptions to elmah.io. The elmah.io Site Extension comes with a couple of limitations: It only works for ASP.NET, MVC, Web API, and similar. ASP.NET Core websites should be installed locally and re-deployed. .NET Full Framework 4.6 and newer is required. Custom code or configuration may swallow exceptions. Like custom errors or when using the HandleErrorAttribute attribute in ASP.NET MVC. In this case, the correct NuGet package needs to be installed in your code and deployed to Azure (like the Elmah.Io.Mvc package for ASP.NET MVC). Azure Troubleshooting ConfigurationErrorsException: Could not load file or assembly 'Elmah' or one of its dependencies. The system cannot find the file specified. After uninstalling the elmah.io site extension, you may see the configuration error above. This means that elmah.io's uninstall script for some reason wasn't allowed to run or resulted in an error. To make sure that elmah.io is completely removed, follow these steps: Stop your website. Browse your website files through Kudu. Remove all files starting with Elmah . Start your website. Error while uninstalling the site extension While uninstalling the site extension you may see errors like this: Failed to delete Site Extension: .NET elmah.io for Azure.{\"Message\":\"An error has occurred.\",\"ExceptionMessage\":\"The system cannot find the file specified. C:\\home\\SiteExtensions\\Elmah.Io.Azure.SiteExtension\\uninstall.cmd In this case, the elmah.io for Azure site extension needs to be uninstalled manually. To do that, go to Kudu Services beneath the Advanced Tools section in the website on Azure. In the Debug console navigate to site/wwwroot/bin and delete all files prefixed with Elmah (up to four files).","title":"Logging from a running website on Azure"},{"location":"logging-to-elmah-io-from-a-running-website-on-azure/#logging-to-elmahio-from-a-running-website-on-azure","text":"Note Adding elmah.io on a running website isn't the recommended way to install. It should be used if you are unable to deploy a new version only. To enable error logging to elmah.io, you usually install one of our client integrations through PowerShell or Visual Studio and deploy a new version of your website to a web server. Sometimes you need to monitor an already running website or don't want logging logic as part of your repository. Using the elmah.io Site Extension for Azure App Services, error logging can be added to an already running website. Check out this video tutorial or keep reading for the text version: To start logging errors from your Azure web application, go to the Azure Portal and select the website you want to monitor. Click the Extensions tool: Click the Add button and select .NET elmah.io for Azure : Accept the terms and click the Add button. The elmah.io Site Extension is now added. Once added, restart the website for the new extension to load. Finally, you need to add your API key ( Where is my API key? ) and log ID ( Where is my log ID? ) to Application settings : Make sure to use the app setting names ELMAHIO_APIKEY and ELMAHIO_LOGID . Your Azure web application now logs all uncaught exceptions to elmah.io. The elmah.io Site Extension comes with a couple of limitations: It only works for ASP.NET, MVC, Web API, and similar. ASP.NET Core websites should be installed locally and re-deployed. .NET Full Framework 4.6 and newer is required. Custom code or configuration may swallow exceptions. Like custom errors or when using the HandleErrorAttribute attribute in ASP.NET MVC. In this case, the correct NuGet package needs to be installed in your code and deployed to Azure (like the Elmah.Io.Mvc package for ASP.NET MVC).","title":"Logging to elmah.io from a running website on Azure"},{"location":"logging-to-elmah-io-from-a-running-website-on-azure/#azure-troubleshooting","text":"ConfigurationErrorsException: Could not load file or assembly 'Elmah' or one of its dependencies. The system cannot find the file specified. After uninstalling the elmah.io site extension, you may see the configuration error above. This means that elmah.io's uninstall script for some reason wasn't allowed to run or resulted in an error. To make sure that elmah.io is completely removed, follow these steps: Stop your website. Browse your website files through Kudu. Remove all files starting with Elmah . Start your website. Error while uninstalling the site extension While uninstalling the site extension you may see errors like this: Failed to delete Site Extension: .NET elmah.io for Azure.{\"Message\":\"An error has occurred.\",\"ExceptionMessage\":\"The system cannot find the file specified. C:\\home\\SiteExtensions\\Elmah.Io.Azure.SiteExtension\\uninstall.cmd In this case, the elmah.io for Azure site extension needs to be uninstalled manually. To do that, go to Kudu Services beneath the Advanced Tools section in the website on Azure. In the Debug console navigate to site/wwwroot/bin and delete all files prefixed with Elmah (up to four files).","title":"Azure Troubleshooting"},{"location":"logging-to-elmah-io-from-a-running-website-on-iis/","text":"Logging to elmah.io from a running website on IIS Note Adding elmah.io on a running website isn't the recommended way to install. It should be used if you are unable to deploy a new version only. To enable error logging to elmah.io, you usually install one of our client integrations through PowerShell or Visual Studio and deploy a new version of your website to a web server. Sometimes you need to monitor an already running website or don't want logging logic as part of your repository. elmah.io can be added to a running website by following this guide. Run the following command somewhere on your computer: nuget install elmah.io It is recommended to run this locally to avoid having to install nuget.exe on the machine running IIS (typically a production environment). If you don't have NuGet installed, there are a range of download options available here . From the folder where you ran the command, copy the following files to the bin folder of your running website: elmah.corelibrary.x.y.z\\lib\\Elmah.dll elmah.io.x.y.z\\lib\\net45\\Elmah.Io.dll Elmah.Io.Client.x.y.z\\lib\\<.net version your website is using>\\Elmah.Io.Client.dll Newtonsoft.Json.x.y.z\\lib\\<.net version your website is using>\\Newtonsoft.Json.dll Configure elmah.io in Web.config as described here: Configure elmah.io manually (you don't need to call the Install-Package command). Notice that the AppDomain will restart when saving changes to the Web.config file. If the website doesn't start logging errors to elmah.io, you may need to restart it.","title":"Logging from a running website on IIS"},{"location":"logging-to-elmah-io-from-a-running-website-on-iis/#logging-to-elmahio-from-a-running-website-on-iis","text":"Note Adding elmah.io on a running website isn't the recommended way to install. It should be used if you are unable to deploy a new version only. To enable error logging to elmah.io, you usually install one of our client integrations through PowerShell or Visual Studio and deploy a new version of your website to a web server. Sometimes you need to monitor an already running website or don't want logging logic as part of your repository. elmah.io can be added to a running website by following this guide. Run the following command somewhere on your computer: nuget install elmah.io It is recommended to run this locally to avoid having to install nuget.exe on the machine running IIS (typically a production environment). If you don't have NuGet installed, there are a range of download options available here . From the folder where you ran the command, copy the following files to the bin folder of your running website: elmah.corelibrary.x.y.z\\lib\\Elmah.dll elmah.io.x.y.z\\lib\\net45\\Elmah.Io.dll Elmah.Io.Client.x.y.z\\lib\\<.net version your website is using>\\Elmah.Io.Client.dll Newtonsoft.Json.x.y.z\\lib\\<.net version your website is using>\\Newtonsoft.Json.dll Configure elmah.io in Web.config as described here: Configure elmah.io manually (you don't need to call the Install-Package command). Notice that the AppDomain will restart when saving changes to the Web.config file. If the website doesn't start logging errors to elmah.io, you may need to restart it.","title":"Logging to elmah.io from a running website on IIS"},{"location":"logging-to-elmah-io-from-angular/","text":"Logging to elmah.io from Angular elmah.io.javascript works great with Angular applications too. To log all errors happening in your Angular app, install elmah.io.javascript through npm as described in Logging from JavaScript . In the same folder as the app.module.ts file add a new file named elmah-io-error-handler.ts and include the following content: import {ErrorHandler} from '@angular/core'; import * as Elmahio from 'elmah.io.javascript'; export class ElmahIoErrorHandler implements ErrorHandler { logger: Elmahio; constructor() { this.logger = new Elmahio({ apiKey: 'API_KEY', logId: 'LOG_ID' }); } handleError(error) { if (error && error.message) { this.logger.error(error.message, error); } else { this.logger.error('Error in application', error); } } } Reference both ErrorHandler and ElmahIoErrorHandler in the app.module.ts file: import { BrowserModule } from '@angular/platform-browser'; import {ErrorHandler, NgModule} from '@angular/core'; // \u2b05\ufe0f Add ErrorHandler import { AppRoutingModule } from './app-routing.module'; import { AppComponent } from './app.component'; import {ElmahIoErrorHandler} from './elmah-io-error-handler'; // \u2b05\ufe0f Reference ElmahIoErrorHandler @NgModule({ declarations: [ AppComponent ], imports: [ BrowserModule, AppRoutingModule ], // \u2b07\ufe0f Reference both handlers providers: [{ provide: ErrorHandler, useClass: ElmahIoErrorHandler }], bootstrap: [AppComponent] }) export class AppModule { } All errors are shipped to the handleError -function by Angular and logged to elmah.io. Check out the Elmah.Io.JavaScript.AngularAspNetCore and Elmah.Io.JavaScript.AngularWebpack samples for some real working code. AngularJS/Angular 1 For AngularJS you need to implement the $exceptionHandler instead: (function () { 'use strict'; angular.module('app').factory('$exceptionHandler', ['$log', function controller($log) { var logger = new Elmahio({ apiKey: 'API_KEY', logId: 'LOG_ID' }); return function elmahExceptionHandler(exception, cause) { $log.error(exception, cause); logger.error(exception.message, exception); }; }]); })();","title":"Logging from Angular"},{"location":"logging-to-elmah-io-from-angular/#logging-to-elmahio-from-angular","text":"elmah.io.javascript works great with Angular applications too. To log all errors happening in your Angular app, install elmah.io.javascript through npm as described in Logging from JavaScript . In the same folder as the app.module.ts file add a new file named elmah-io-error-handler.ts and include the following content: import {ErrorHandler} from '@angular/core'; import * as Elmahio from 'elmah.io.javascript'; export class ElmahIoErrorHandler implements ErrorHandler { logger: Elmahio; constructor() { this.logger = new Elmahio({ apiKey: 'API_KEY', logId: 'LOG_ID' }); } handleError(error) { if (error && error.message) { this.logger.error(error.message, error); } else { this.logger.error('Error in application', error); } } } Reference both ErrorHandler and ElmahIoErrorHandler in the app.module.ts file: import { BrowserModule } from '@angular/platform-browser'; import {ErrorHandler, NgModule} from '@angular/core'; // \u2b05\ufe0f Add ErrorHandler import { AppRoutingModule } from './app-routing.module'; import { AppComponent } from './app.component'; import {ElmahIoErrorHandler} from './elmah-io-error-handler'; // \u2b05\ufe0f Reference ElmahIoErrorHandler @NgModule({ declarations: [ AppComponent ], imports: [ BrowserModule, AppRoutingModule ], // \u2b07\ufe0f Reference both handlers providers: [{ provide: ErrorHandler, useClass: ElmahIoErrorHandler }], bootstrap: [AppComponent] }) export class AppModule { } All errors are shipped to the handleError -function by Angular and logged to elmah.io. Check out the Elmah.Io.JavaScript.AngularAspNetCore and Elmah.Io.JavaScript.AngularWebpack samples for some real working code.","title":"Logging to elmah.io from Angular"},{"location":"logging-to-elmah-io-from-angular/#angularjsangular-1","text":"For AngularJS you need to implement the $exceptionHandler instead: (function () { 'use strict'; angular.module('app').factory('$exceptionHandler', ['$log', function controller($log) { var logger = new Elmahio({ apiKey: 'API_KEY', logId: 'LOG_ID' }); return function elmahExceptionHandler(exception, cause) { $log.error(exception, cause); logger.error(exception.message, exception); }; }]); })();","title":"AngularJS/Angular 1"},{"location":"logging-to-elmah-io-from-aspnet-core/","text":"Logging to elmah.io from ASP.NET Core Logging to elmah.io from ASP.NET Core Configuring API key and log ID in options Logging exceptions manually Breadcrumbs Additional options Setting application name Hooks Decorate from HTTP context Include source code Remove sensitive form data Formatting exceptions Logging responses not throwing an exception Logging through a proxy ASP.NET Core 8 Logging health check results If you are looking to log all uncaught errors from ASP.NET Core, you've come to the right place. For help setting up general .NET Core logging similar to log4net, check out Logging from Microsoft.Extensions.Logging . To log all warnings and errors from ASP.NET Core, install the following NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.AspNetCore Install-Package Elmah.Io.AspNetCore <PackageReference Include=\"Elmah.Io.AspNetCore\" Version=\"5.*\" /> paket add Elmah.Io.AspNetCore In the Startup.cs file, add a new using statement: using Elmah.Io.AspNetCore; Standard Top-level statements Call AddElmahIo in the ConfigureServices -method: public void ConfigureServices(IServiceCollection services) { services.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); // ... } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the log Id of the log you want to log to. Call UseElmahIo in the Configure -method: public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory fac) { // ... app.UseElmahIo(); // ... } Call AddElmahIo in the Program.cs file: builder.Services.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the log Id of the log you want to log to. Call UseElmahIo in the Program.cs file: app.UseElmahIo(); Note Make sure to call the UseElmahIo -method after installation of other pieces of middleware handling exceptions and auth (like UseDeveloperExceptionPage , UseExceptionHandler , UseAuthentication , and UseAuthorization ), but before any calls to UseEndpoints , UseMvc , MapRazorPages , and similar. That's it. Every uncaught exception will be logged to elmah.io. For an example of configuring elmah.io with ASP.NET Core minimal APIs, check out this sample . Configuring API key and log ID in options If you have different environments (everyone has a least localhost and production), you should consider adding the API key and log ID in your appsettings.json file: { // ... \"ElmahIo\": { \"ApiKey\": \"API_KEY\", \"LogId\": \"LOG_ID\" } } Configuring elmah.io is done by calling the Configure -method before AddElmahIo : Standard Top-level statements public void ConfigureServices(IServiceCollection services) { services.Configure<ElmahIoOptions>(Configuration.GetSection(\"ElmahIo\")); services.AddElmahIo(); } Notice that you still need to call AddElmahIo to correctly register middleware dependencies. Finally, call the UseElmahIo -method (as you would do with config in C# too): public void Configure(IApplicationBuilder app, IHostingEnvironment env) { // ... app.UseElmahIo(); // ... } You can still configure additional options on the ElmahIoOptions object: public void ConfigureServices(IServiceCollection services) { services.Configure<ElmahIoOptions>(Configuration.GetSection(\"ElmahIo\")); services.Configure<ElmahIoOptions>(options => { options.OnMessage = msg => { msg.Version = \"1.0.0\"; }; }); services.AddElmahIo(); } builder.Services.Configure<ElmahIoOptions>(builder.Configuration.GetSection(\"ElmahIo\")); builder.Services.AddElmahIo(); Notice that you still need to call AddElmahIo to correctly register middleware dependencies. Finally, call the UseElmahIo -method (as you would do with config in C# too): app.UseElmahIo(); You can still configure additional options on the ElmahIoOptions object: builder.Services.Configure<ElmahIoOptions>(builder.Configuration.GetSection(\"ElmahIo\")); builder.Services.Configure<ElmahIoOptions>(o => { o.OnMessage = msg => { msg.Version = \"1.0.0\"; }; }); builder.Services.AddElmahIo(); Logging exceptions manually While automatically logging all uncaught exceptions is definitely a nice feature, sometimes you may want to catch exceptions and log them manually. If you just want to log the exception details, without all of the contextual information about the HTTP context (cookies, server variables, etc.), we recommend you to look at our integration for Microsoft.Extensions.Logging . If the context is important for the error, you can utilize the Ship -methods available in Elmah.Io.AspNetCore : try { var i = 0; var result = 42/i; } catch (DivideByZeroException e) { e.Ship(HttpContext); } When catching an exception (in this example an DivideByZeroException ), you call the Ship extension method with the current HTTP context as parameter. From Elmah.Io.AspNetCore version 3.12.* or newer, you can log manually using the ElmahIoApi class as well: ElmahIoApi.Log(e, HttpContext); The Ship -method uses ElmahIoApi underneath why both methods will give the same end result. Breadcrumbs See Logging breadcrumbs from ASP.NET Core . Additional options Setting application name If logging to the same log from multiple web apps it is a good idea to set unique application names from each app. This will let you search and filter errors on the elmah.io UI. To set an application name, add the following code to the options: builder.Services.AddElmahIo(o => { // ... o.Application = \"MyApp\"; }); The application name can also be configured through appsettings.json : { // ... \"ElmahIo\": { // ... \"Application\": \"MyApp\" } } Hooks elmah.io for ASP.NET Core supports a range of actions for hooking into the process of logging messages. Hooks are registered as actions when installing the elmah.io middleware: builder.Services.AddElmahIo(options => { // ... options.OnMessage = message => { message.Version = \"42\"; }; options.OnError = (message, exception) => { logger.LogError(1, exception, \"Error during log to elmah.io\"); }; }); The actions provide a mechanism for hooking into the log process. The action registered in the OnMessage property is called by elmah.io just before logging a new message to the API. Use this action to decorate/enrich your log messages with additional data, like a version number. The OnError action is called if communication with the elmah.io API failed. If this happens, you should log the message to a local log (through Microsoft.Extensions.Logging, Serilog or similar). Warning Do not log to elmah.io in your OnError action, since that could cause an infinite loop in your code. While elmah.io supports ignore rules serverside, you may want to filter out errors without even hitting the elmah.io API. Using the OnFilter function on the options object, filtering is easy: builder.Services.AddElmahIo(options => { // ... options.OnFilter = message => { return message.Type == \"System.NullReferenceException\"; }; }); The example above, ignores all messages of type System.NullReferenceException . Decorate from HTTP context When implementing the OnMessage action as shown above you don't have access to the current HTTP context. Elmah.Io.AspNetCore already tries to fill in as many fields as possible from the current context, but you may want to tweak something from time to time. In this case, you can implement a custom decorator like this: public class DecorateElmahIoMessages : IConfigureOptions<ElmahIoOptions> { private readonly IHttpContextAccessor httpContextAccessor; public DecorateElmahIoMessages(IHttpContextAccessor httpContextAccessor) { this.httpContextAccessor = httpContextAccessor; } public void Configure(ElmahIoOptions options) { options.OnMessage = msg => { var context = httpContextAccessor.HttpContext; msg.User = context?.User?.Identity?.Name; }; } } Standard Top-level statements Then register IHttpContextAccessor and the new class in the ConfigureServices method in the Startup.cs file: public void ConfigureServices(IServiceCollection services) { services.AddHttpContextAccessor(); services.AddSingleton<IConfigureOptions<ElmahIoOptions>, DecorateElmahIoMessages>(); // ... } Then register IHttpContextAccessor and the new class in the in the Program.cs file: builder.Services.AddHttpContextAccessor(); builder.Services.AddSingleton<IConfigureOptions<ElmahIoOptions>, DecorateElmahIoMessages>(); Note Decorating messages using IConfigureOptions requires Elmah.Io.AspNetCore version 4.1.37 or newer. Include source code You can use the OnMessage action to include source code to log messages. This will require a stack trace in the Detail property with filenames and line numbers in it. There are multiple ways of including source code to log messages. In short, you will need to install the Elmah.Io.Client.Extensions.SourceCode NuGet package and call the WithSourceCodeFromPdb method in the OnMessage action: builder.Services.AddElmahIo(options => { // ... options.OnMessage = msg => { msg.WithSourceCodeFromPdb(); }; }); Check out How to include source code in log messages for additional requirements to make source code show up on elmah.io. Note Including source code on log messages is available in the Elmah.Io.Client v4 package and forward. Remove sensitive form data The OnMessage event can be used to filter sensitive form data as well. In the following example, we remove the server variable named Secret-Key from all messages, before sending them to elmah.io. builder.Services.AddElmahIo(options => { // ... options.OnMessage = msg => { var item = msg.ServerVariables.FirstOrDefault(x => x.Key == \"Secret-Key\"); if (item != null) { msg.ServerVariables.Remove(item); } }; }); Formatting exceptions A default exception formatter is used to format any exceptions, before sending them off to the elmah.io API. To override the format of the details field in elmah.io, set a new IExceptionFormatter in the ExceptionFormatter property on the ElmahIoOptions object: builder.Services.AddElmahIo(options => { // ... options.ExceptionFormatter = new DefaultExceptionFormatter(); } Besides the default exception formatted ( DefaultExceptionFormatter ), Elmah.Io.AspNetCore comes with a formatter called YellowScreenOfDeathExceptionFormatter . This formatter, outputs an exception and its inner exceptions as a list of exceptions, much like on the ASP.NET yellow screen of death. If you want, implementing your own exception formatter, requires you to implement a single method. Logging responses not throwing an exception As default, uncaught exceptions (500's) and 404's are logged automatically. Let's say you have a controller returning a Bad Request and want to log that as well. Since returning a 400 from a controller doesn't trigger an exception, you will need to configure this status code: builder.Services.AddElmahIo(options => { // ... options.HandledStatusCodesToLog = new List<int> { 400 }; } The list can also be configured through appsettings.json : { // ... \"ElmahIo\": { // ... \"HandledStatusCodesToLog\": [ 400 ], } } When configuring status codes through the appsettings.json file, 404 s will always be logged. To avoid this, configure the list in C# as shown above. Logging through a proxy Since ASP.NET Core no longer support proxy configuration through web.config , you can log to elmah.io by configuring a proxy manually: builder.Services.AddElmahIo(options => { // ... options.WebProxy = new System.Net.WebProxy(\"localhost\", 8888); } In this example, the elmah.io client routes all traffic through http://localhost:8000 . ASP.NET Core 8 The Elmah.Io.AspNetCore package can be installed exactly how it is described above in ASP.NET Core 8. We still recommend doing that, so if you don't experience any problems with this approach, there's no need to read this section (unless you are just curious). ASP.NET Core 8 introduces a new way of logging and handling exceptions: IExceptionHandler . You have probably already seen a line similar to this in the Program.cs file: app.UseExceptionHandler(\"/Error\"); This installs the exception-handling middleware bundled with ASP.NET Core. The new feature provides you with the possibility of registering custom exception handlers run as part of the built-in middleware. This is done by registering one or more classes that implement the IExceptionHandler interface. The Elmah.Io.AspNetCore package bundles such a class from version 5.1 and forward. To install it, include the following code in the Program.cs file: builder.Services.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); builder.Services.AddExceptionHandler<ElmahIoExceptionHandler>(); The AddElmahIo method will set up the dependencies as usual and the AddExceptionHandler method will register an exception handler logging exceptions to elmah.io. You still need to call the UseExceptionHandler method with either a path or empty options: app.UseExceptionHandler(\"/Error\"); // or app.UseExceptionHandler(_ => {}); Calling the overload of UseExceptionHandler without any parameters will not work here. As already mentioned, we only recommend using this code if the normal approach doesn't work. We may switch over to using this approach later on but the code is currently experimental. One advantage of using the exception handler over the elmah.io middleware is to avoid the scenario where you want to use both the elmah.io and exception handler middleware. As an example, this code will not work: app.UseElmahIo(); app.UseExceptionHandler(\"/Error\"); This is because the exception handle \"swallows\" all exceptions before the elmah.io middleware is notified. Registering the ElmahIoExceptionHandler class and not calling UseElmahIo will fix this problem. Logging health check results Check out Logging heartbeats from ASP.NET Core for details.","title":"Logging from ASP.NET Core"},{"location":"logging-to-elmah-io-from-aspnet-core/#logging-to-elmahio-from-aspnet-core","text":"Logging to elmah.io from ASP.NET Core Configuring API key and log ID in options Logging exceptions manually Breadcrumbs Additional options Setting application name Hooks Decorate from HTTP context Include source code Remove sensitive form data Formatting exceptions Logging responses not throwing an exception Logging through a proxy ASP.NET Core 8 Logging health check results If you are looking to log all uncaught errors from ASP.NET Core, you've come to the right place. For help setting up general .NET Core logging similar to log4net, check out Logging from Microsoft.Extensions.Logging . To log all warnings and errors from ASP.NET Core, install the following NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.AspNetCore Install-Package Elmah.Io.AspNetCore <PackageReference Include=\"Elmah.Io.AspNetCore\" Version=\"5.*\" /> paket add Elmah.Io.AspNetCore In the Startup.cs file, add a new using statement: using Elmah.Io.AspNetCore; Standard Top-level statements Call AddElmahIo in the ConfigureServices -method: public void ConfigureServices(IServiceCollection services) { services.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); // ... } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the log Id of the log you want to log to. Call UseElmahIo in the Configure -method: public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory fac) { // ... app.UseElmahIo(); // ... } Call AddElmahIo in the Program.cs file: builder.Services.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the log Id of the log you want to log to. Call UseElmahIo in the Program.cs file: app.UseElmahIo(); Note Make sure to call the UseElmahIo -method after installation of other pieces of middleware handling exceptions and auth (like UseDeveloperExceptionPage , UseExceptionHandler , UseAuthentication , and UseAuthorization ), but before any calls to UseEndpoints , UseMvc , MapRazorPages , and similar. That's it. Every uncaught exception will be logged to elmah.io. For an example of configuring elmah.io with ASP.NET Core minimal APIs, check out this sample .","title":"Logging to elmah.io from ASP.NET Core"},{"location":"logging-to-elmah-io-from-aspnet-core/#configuring-api-key-and-log-id-in-options","text":"If you have different environments (everyone has a least localhost and production), you should consider adding the API key and log ID in your appsettings.json file: { // ... \"ElmahIo\": { \"ApiKey\": \"API_KEY\", \"LogId\": \"LOG_ID\" } } Configuring elmah.io is done by calling the Configure -method before AddElmahIo : Standard Top-level statements public void ConfigureServices(IServiceCollection services) { services.Configure<ElmahIoOptions>(Configuration.GetSection(\"ElmahIo\")); services.AddElmahIo(); } Notice that you still need to call AddElmahIo to correctly register middleware dependencies. Finally, call the UseElmahIo -method (as you would do with config in C# too): public void Configure(IApplicationBuilder app, IHostingEnvironment env) { // ... app.UseElmahIo(); // ... } You can still configure additional options on the ElmahIoOptions object: public void ConfigureServices(IServiceCollection services) { services.Configure<ElmahIoOptions>(Configuration.GetSection(\"ElmahIo\")); services.Configure<ElmahIoOptions>(options => { options.OnMessage = msg => { msg.Version = \"1.0.0\"; }; }); services.AddElmahIo(); } builder.Services.Configure<ElmahIoOptions>(builder.Configuration.GetSection(\"ElmahIo\")); builder.Services.AddElmahIo(); Notice that you still need to call AddElmahIo to correctly register middleware dependencies. Finally, call the UseElmahIo -method (as you would do with config in C# too): app.UseElmahIo(); You can still configure additional options on the ElmahIoOptions object: builder.Services.Configure<ElmahIoOptions>(builder.Configuration.GetSection(\"ElmahIo\")); builder.Services.Configure<ElmahIoOptions>(o => { o.OnMessage = msg => { msg.Version = \"1.0.0\"; }; }); builder.Services.AddElmahIo();","title":"Configuring API key and log ID in options"},{"location":"logging-to-elmah-io-from-aspnet-core/#logging-exceptions-manually","text":"While automatically logging all uncaught exceptions is definitely a nice feature, sometimes you may want to catch exceptions and log them manually. If you just want to log the exception details, without all of the contextual information about the HTTP context (cookies, server variables, etc.), we recommend you to look at our integration for Microsoft.Extensions.Logging . If the context is important for the error, you can utilize the Ship -methods available in Elmah.Io.AspNetCore : try { var i = 0; var result = 42/i; } catch (DivideByZeroException e) { e.Ship(HttpContext); } When catching an exception (in this example an DivideByZeroException ), you call the Ship extension method with the current HTTP context as parameter. From Elmah.Io.AspNetCore version 3.12.* or newer, you can log manually using the ElmahIoApi class as well: ElmahIoApi.Log(e, HttpContext); The Ship -method uses ElmahIoApi underneath why both methods will give the same end result.","title":"Logging exceptions manually"},{"location":"logging-to-elmah-io-from-aspnet-core/#breadcrumbs","text":"See Logging breadcrumbs from ASP.NET Core .","title":"Breadcrumbs"},{"location":"logging-to-elmah-io-from-aspnet-core/#additional-options","text":"","title":"Additional options"},{"location":"logging-to-elmah-io-from-aspnet-core/#setting-application-name","text":"If logging to the same log from multiple web apps it is a good idea to set unique application names from each app. This will let you search and filter errors on the elmah.io UI. To set an application name, add the following code to the options: builder.Services.AddElmahIo(o => { // ... o.Application = \"MyApp\"; }); The application name can also be configured through appsettings.json : { // ... \"ElmahIo\": { // ... \"Application\": \"MyApp\" } }","title":"Setting application name"},{"location":"logging-to-elmah-io-from-aspnet-core/#hooks","text":"elmah.io for ASP.NET Core supports a range of actions for hooking into the process of logging messages. Hooks are registered as actions when installing the elmah.io middleware: builder.Services.AddElmahIo(options => { // ... options.OnMessage = message => { message.Version = \"42\"; }; options.OnError = (message, exception) => { logger.LogError(1, exception, \"Error during log to elmah.io\"); }; }); The actions provide a mechanism for hooking into the log process. The action registered in the OnMessage property is called by elmah.io just before logging a new message to the API. Use this action to decorate/enrich your log messages with additional data, like a version number. The OnError action is called if communication with the elmah.io API failed. If this happens, you should log the message to a local log (through Microsoft.Extensions.Logging, Serilog or similar). Warning Do not log to elmah.io in your OnError action, since that could cause an infinite loop in your code. While elmah.io supports ignore rules serverside, you may want to filter out errors without even hitting the elmah.io API. Using the OnFilter function on the options object, filtering is easy: builder.Services.AddElmahIo(options => { // ... options.OnFilter = message => { return message.Type == \"System.NullReferenceException\"; }; }); The example above, ignores all messages of type System.NullReferenceException .","title":"Hooks"},{"location":"logging-to-elmah-io-from-aspnet-core/#decorate-from-http-context","text":"When implementing the OnMessage action as shown above you don't have access to the current HTTP context. Elmah.Io.AspNetCore already tries to fill in as many fields as possible from the current context, but you may want to tweak something from time to time. In this case, you can implement a custom decorator like this: public class DecorateElmahIoMessages : IConfigureOptions<ElmahIoOptions> { private readonly IHttpContextAccessor httpContextAccessor; public DecorateElmahIoMessages(IHttpContextAccessor httpContextAccessor) { this.httpContextAccessor = httpContextAccessor; } public void Configure(ElmahIoOptions options) { options.OnMessage = msg => { var context = httpContextAccessor.HttpContext; msg.User = context?.User?.Identity?.Name; }; } } Standard Top-level statements Then register IHttpContextAccessor and the new class in the ConfigureServices method in the Startup.cs file: public void ConfigureServices(IServiceCollection services) { services.AddHttpContextAccessor(); services.AddSingleton<IConfigureOptions<ElmahIoOptions>, DecorateElmahIoMessages>(); // ... } Then register IHttpContextAccessor and the new class in the in the Program.cs file: builder.Services.AddHttpContextAccessor(); builder.Services.AddSingleton<IConfigureOptions<ElmahIoOptions>, DecorateElmahIoMessages>(); Note Decorating messages using IConfigureOptions requires Elmah.Io.AspNetCore version 4.1.37 or newer.","title":"Decorate from HTTP context"},{"location":"logging-to-elmah-io-from-aspnet-core/#include-source-code","text":"You can use the OnMessage action to include source code to log messages. This will require a stack trace in the Detail property with filenames and line numbers in it. There are multiple ways of including source code to log messages. In short, you will need to install the Elmah.Io.Client.Extensions.SourceCode NuGet package and call the WithSourceCodeFromPdb method in the OnMessage action: builder.Services.AddElmahIo(options => { // ... options.OnMessage = msg => { msg.WithSourceCodeFromPdb(); }; }); Check out How to include source code in log messages for additional requirements to make source code show up on elmah.io. Note Including source code on log messages is available in the Elmah.Io.Client v4 package and forward.","title":"Include source code"},{"location":"logging-to-elmah-io-from-aspnet-core/#remove-sensitive-form-data","text":"The OnMessage event can be used to filter sensitive form data as well. In the following example, we remove the server variable named Secret-Key from all messages, before sending them to elmah.io. builder.Services.AddElmahIo(options => { // ... options.OnMessage = msg => { var item = msg.ServerVariables.FirstOrDefault(x => x.Key == \"Secret-Key\"); if (item != null) { msg.ServerVariables.Remove(item); } }; });","title":"Remove sensitive form data"},{"location":"logging-to-elmah-io-from-aspnet-core/#formatting-exceptions","text":"A default exception formatter is used to format any exceptions, before sending them off to the elmah.io API. To override the format of the details field in elmah.io, set a new IExceptionFormatter in the ExceptionFormatter property on the ElmahIoOptions object: builder.Services.AddElmahIo(options => { // ... options.ExceptionFormatter = new DefaultExceptionFormatter(); } Besides the default exception formatted ( DefaultExceptionFormatter ), Elmah.Io.AspNetCore comes with a formatter called YellowScreenOfDeathExceptionFormatter . This formatter, outputs an exception and its inner exceptions as a list of exceptions, much like on the ASP.NET yellow screen of death. If you want, implementing your own exception formatter, requires you to implement a single method.","title":"Formatting exceptions"},{"location":"logging-to-elmah-io-from-aspnet-core/#logging-responses-not-throwing-an-exception","text":"As default, uncaught exceptions (500's) and 404's are logged automatically. Let's say you have a controller returning a Bad Request and want to log that as well. Since returning a 400 from a controller doesn't trigger an exception, you will need to configure this status code: builder.Services.AddElmahIo(options => { // ... options.HandledStatusCodesToLog = new List<int> { 400 }; } The list can also be configured through appsettings.json : { // ... \"ElmahIo\": { // ... \"HandledStatusCodesToLog\": [ 400 ], } } When configuring status codes through the appsettings.json file, 404 s will always be logged. To avoid this, configure the list in C# as shown above.","title":"Logging responses not throwing an exception"},{"location":"logging-to-elmah-io-from-aspnet-core/#logging-through-a-proxy","text":"Since ASP.NET Core no longer support proxy configuration through web.config , you can log to elmah.io by configuring a proxy manually: builder.Services.AddElmahIo(options => { // ... options.WebProxy = new System.Net.WebProxy(\"localhost\", 8888); } In this example, the elmah.io client routes all traffic through http://localhost:8000 .","title":"Logging through a proxy"},{"location":"logging-to-elmah-io-from-aspnet-core/#aspnet-core-8","text":"The Elmah.Io.AspNetCore package can be installed exactly how it is described above in ASP.NET Core 8. We still recommend doing that, so if you don't experience any problems with this approach, there's no need to read this section (unless you are just curious). ASP.NET Core 8 introduces a new way of logging and handling exceptions: IExceptionHandler . You have probably already seen a line similar to this in the Program.cs file: app.UseExceptionHandler(\"/Error\"); This installs the exception-handling middleware bundled with ASP.NET Core. The new feature provides you with the possibility of registering custom exception handlers run as part of the built-in middleware. This is done by registering one or more classes that implement the IExceptionHandler interface. The Elmah.Io.AspNetCore package bundles such a class from version 5.1 and forward. To install it, include the following code in the Program.cs file: builder.Services.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); builder.Services.AddExceptionHandler<ElmahIoExceptionHandler>(); The AddElmahIo method will set up the dependencies as usual and the AddExceptionHandler method will register an exception handler logging exceptions to elmah.io. You still need to call the UseExceptionHandler method with either a path or empty options: app.UseExceptionHandler(\"/Error\"); // or app.UseExceptionHandler(_ => {}); Calling the overload of UseExceptionHandler without any parameters will not work here. As already mentioned, we only recommend using this code if the normal approach doesn't work. We may switch over to using this approach later on but the code is currently experimental. One advantage of using the exception handler over the elmah.io middleware is to avoid the scenario where you want to use both the elmah.io and exception handler middleware. As an example, this code will not work: app.UseElmahIo(); app.UseExceptionHandler(\"/Error\"); This is because the exception handle \"swallows\" all exceptions before the elmah.io middleware is notified. Registering the ElmahIoExceptionHandler class and not calling UseElmahIo will fix this problem.","title":"ASP.NET Core 8"},{"location":"logging-to-elmah-io-from-aspnet-core/#logging-health-check-results","text":"Check out Logging heartbeats from ASP.NET Core for details.","title":"Logging health check results"},{"location":"logging-to-elmah-io-from-aspnet-mvc/","text":"Logging to elmah.io from ASP.NET MVC Even though ELMAH works out of the box with ASP.NET MVC, ELMAH and MVC provide some features which interfere with one another. As usual, the great community around ELMAH has done something to fix this, by using the Elmah.Mvc NuGet package. We've built a package for ASP.NET MVC exclusively, which installs all the necessary packages. To start logging exceptions from ASP.NET MVC, install the Elmah.Io.Mvc NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Mvc Install-Package Elmah.Io.Mvc <PackageReference Include=\"Elmah.Io.Mvc\" Version=\"5.*\" /> paket add Elmah.Io.Mvc During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). That's it. Every unhandled exception in ASP.NET MVC is logged to elmah.io. As part of the installation, we also installed Elmah.MVC , which adds some interesting logic around routing and authentication. Take a look in the web.config for application settings with the elmah.mvc. prefix. For documentation about these settings, check out the Elmah.MVC project on GitHub. Since Elmah.MVC configures an URL for accessing the ELMAH UI (just /elmah and not /elmah.axd ), you can remove the location element in web.config , added by the Elmah.Io.Mvc NuGet package installer.","title":"Logging from ASP.NET MVC"},{"location":"logging-to-elmah-io-from-aspnet-mvc/#logging-to-elmahio-from-aspnet-mvc","text":"Even though ELMAH works out of the box with ASP.NET MVC, ELMAH and MVC provide some features which interfere with one another. As usual, the great community around ELMAH has done something to fix this, by using the Elmah.Mvc NuGet package. We've built a package for ASP.NET MVC exclusively, which installs all the necessary packages. To start logging exceptions from ASP.NET MVC, install the Elmah.Io.Mvc NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Mvc Install-Package Elmah.Io.Mvc <PackageReference Include=\"Elmah.Io.Mvc\" Version=\"5.*\" /> paket add Elmah.Io.Mvc During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). That's it. Every unhandled exception in ASP.NET MVC is logged to elmah.io. As part of the installation, we also installed Elmah.MVC , which adds some interesting logic around routing and authentication. Take a look in the web.config for application settings with the elmah.mvc. prefix. For documentation about these settings, check out the Elmah.MVC project on GitHub. Since Elmah.MVC configures an URL for accessing the ELMAH UI (just /elmah and not /elmah.axd ), you can remove the location element in web.config , added by the Elmah.Io.Mvc NuGet package installer.","title":"Logging to elmah.io from ASP.NET MVC"},{"location":"logging-to-elmah-io-from-aws-beanstalk/","text":"Logging to elmah.io from AWS Beanstalk Logging to elmah.io from AWS Beanstalk ASP.NET / MVC / Web API ASP.NET Core Logging to elmah.io from .NET applications deployed on AWS Beanstalk is as easy as with other cloud hosting services. Since Beanstalk runs normal ASP.NET, MVC, Web API, and Core applications, setting up elmah.io almost follows the guides already available in the elmah.io documentation. There are a few things to notice when needing to configure elmah.io, which will be explained in this document. ASP.NET / MVC / Web API To install elmah.io in ASP.NET , MVC , and/or Web API , please follow the guidelines for each framework. You can specify one set of API key and log ID in the Web.config file and another set in the Web.release.config file as explained here: Use multiple logs for different environments . If you want to include your production API key and log ID on AWS only (to avoid having sensitive information in source control), you can do this using Environment properties on AWS. Go to your environment on the AWS console and click the Configuration tab. Click the Edit button beneath the Software category and scroll to the bottom. There you will see a section named Environment properties . Input your API key and log ID: AWS inserts the properties as application settings in the Web.config file. To make sure that elmah.io uses API key and log ID from appSettings , change the <elmah> element to reference the keys specified on AWS: <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKeyKey=\"elmahio-apikey\" logIdKey=\"elmahio-logid\" /> The apiKeyKey and logIdKey attributes reference the app settings keys. Finally, if you have an API key and/or log ID specified as part of the appSettings> element in Web.config , you will need to remove those when running in production. The reason for this is that AWS only insert missing keys. To do so, modify your Web.release.config file: <appSettings> <add key=\"elmahio-logid\" xdt:Transform=\"Remove\" xdt:Locator=\"Match(key)\" /> <add key=\"elmahio-apikey\" xdt:Transform=\"Remove\" xdt:Locator=\"Match(key)\" /> </appSettings> ASP.NET Core To install elmah.io in ASP.NET Core, follow this guide: Logging to elmah.io from ASP.NET Core . If you want to include your production API key and log ID on AWS only (to avoid having sensitive information in source control), you can do this using Environment properties on AWS. Go to your environment on the AWS console and click the Configuration tab. Click the Edit button beneath the Software category and scroll to the bottom. There you will see a section named Environment properties . Input your API key and log ID: This example uses the double underscore syntax to set the ApiKey and LogId properties in the appsettings.json file: { \"ElmahIo\": { \"ApiKey\": \"API_KEY\", \"LogId\": \"LOG_ID\" } }","title":"Logging from AWS Beanstalk"},{"location":"logging-to-elmah-io-from-aws-beanstalk/#logging-to-elmahio-from-aws-beanstalk","text":"Logging to elmah.io from AWS Beanstalk ASP.NET / MVC / Web API ASP.NET Core Logging to elmah.io from .NET applications deployed on AWS Beanstalk is as easy as with other cloud hosting services. Since Beanstalk runs normal ASP.NET, MVC, Web API, and Core applications, setting up elmah.io almost follows the guides already available in the elmah.io documentation. There are a few things to notice when needing to configure elmah.io, which will be explained in this document.","title":"Logging to elmah.io from AWS Beanstalk"},{"location":"logging-to-elmah-io-from-aws-beanstalk/#aspnet-mvc-web-api","text":"To install elmah.io in ASP.NET , MVC , and/or Web API , please follow the guidelines for each framework. You can specify one set of API key and log ID in the Web.config file and another set in the Web.release.config file as explained here: Use multiple logs for different environments . If you want to include your production API key and log ID on AWS only (to avoid having sensitive information in source control), you can do this using Environment properties on AWS. Go to your environment on the AWS console and click the Configuration tab. Click the Edit button beneath the Software category and scroll to the bottom. There you will see a section named Environment properties . Input your API key and log ID: AWS inserts the properties as application settings in the Web.config file. To make sure that elmah.io uses API key and log ID from appSettings , change the <elmah> element to reference the keys specified on AWS: <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKeyKey=\"elmahio-apikey\" logIdKey=\"elmahio-logid\" /> The apiKeyKey and logIdKey attributes reference the app settings keys. Finally, if you have an API key and/or log ID specified as part of the appSettings> element in Web.config , you will need to remove those when running in production. The reason for this is that AWS only insert missing keys. To do so, modify your Web.release.config file: <appSettings> <add key=\"elmahio-logid\" xdt:Transform=\"Remove\" xdt:Locator=\"Match(key)\" /> <add key=\"elmahio-apikey\" xdt:Transform=\"Remove\" xdt:Locator=\"Match(key)\" /> </appSettings>","title":"ASP.NET / MVC / Web API"},{"location":"logging-to-elmah-io-from-aws-beanstalk/#aspnet-core","text":"To install elmah.io in ASP.NET Core, follow this guide: Logging to elmah.io from ASP.NET Core . If you want to include your production API key and log ID on AWS only (to avoid having sensitive information in source control), you can do this using Environment properties on AWS. Go to your environment on the AWS console and click the Configuration tab. Click the Edit button beneath the Software category and scroll to the bottom. There you will see a section named Environment properties . Input your API key and log ID: This example uses the double underscore syntax to set the ApiKey and LogId properties in the appsettings.json file: { \"ElmahIo\": { \"ApiKey\": \"API_KEY\", \"LogId\": \"LOG_ID\" } }","title":"ASP.NET Core"},{"location":"logging-to-elmah-io-from-aws-lambdas/","text":"Logging to elmah.io from AWS Lambdas Logging to elmah.io from AWS Lambdas Logging to elmah.io from AWS Serverless Application Logging when using Amazon.Lambda.AspNetCoreServer.Hosting Logging from AWS Lambda Project Since AWS now supports .NET Core, logging to elmah.io from a lambda is easy. Logging to elmah.io from AWS Serverless Application AWS Serverless Applications are running on ASP.NET Core. The configuration matches our documentation for ASP.NET Core. Check out Logging from ASP.NET Core for details on how to log all uncaught exceptions from an AWS Serverless Application. The .NET SDK for AWS comes with native support for logging to CloudWatch. We recommend using Microsoft.Extensions.Logging for logging everything to CloudWatch and warnings and errors to elmah.io. The configuration follows that of Logging from Microsoft.Extensions.Logging . AWS Serverless Applications doesn't have a Program.cs file. To configure logging, you will need to modify either LambdaEntryPoint.cs , LocalEntryPoint.cs or both: public class LambdaEntryPoint : Amazon.Lambda.AspNetCoreServer.APIGatewayProxyFunction { protected override void Init(IWebHostBuilder builder) { builder .UseStartup<Startup>() .ConfigureLogging((ctx, logging) => { logging.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); logging.AddFilter<ElmahIoLoggerProvider>(null, LogLevel.Warning); }); } } The same configuration would go into LocalEntryPoint.cs , if you want to log from localhost as well. Logging when using Amazon.Lambda.AspNetCoreServer.Hosting AWS supports running ASP.NET Core applications as Lambdas using the Amazon.Lambda.AspNetCoreServer.Hosting package. This can serve as an easy way for .NET developers like us to create minimal API-based endpoints and deploy them as Lambda functions on AWS. There's a downside to deploying ASP.NET Core this way since AWS will kill the process when it decides that it is no longer needed. The Elmah.Io.Extensions.Logging package runs an internal message queue and stores log messages asynchronously to better handle a large workload. When AWS kills the process without disposing of configured loggers, log messages queued for processing are left unhandled. To solve this, Elmah.Io.Extensions.Logging supports a property named Synchronous that disables the internal message queue and stores log messages in a synchronous way. You may still experience log messages not being stored, but that's a consequence of AWS's choice of killing the process rather than shutting it down nicely (like ASP.NET Core). To log messages synchronously, include the following code in your logging setup: builder.Services.AddLogging(logging => { logging.AddElmahIo(options => { // ... options.Synchronous = true; }); }); Be aware that logging a large number of log messages synchronously, may slow down your application and/or cause thread exhaustion. We recommend only logging errors this way and not debug, information, and similar. Logging from AWS Lambda Project AWS Lambda Project comes with native support for CloudWatch too. In our experience, it's not possible to configure multiple destinations on LambdaLogger , why you would want to use another framework when logging to elmah.io from an AWS Lambda Project. We recommend using a logging framework like Serilog , Microsoft.Extensions.Logging , NLog , or log4net .","title":"Logging from AWS Lambdas"},{"location":"logging-to-elmah-io-from-aws-lambdas/#logging-to-elmahio-from-aws-lambdas","text":"Logging to elmah.io from AWS Lambdas Logging to elmah.io from AWS Serverless Application Logging when using Amazon.Lambda.AspNetCoreServer.Hosting Logging from AWS Lambda Project Since AWS now supports .NET Core, logging to elmah.io from a lambda is easy.","title":"Logging to elmah.io from AWS Lambdas"},{"location":"logging-to-elmah-io-from-aws-lambdas/#logging-to-elmahio-from-aws-serverless-application","text":"AWS Serverless Applications are running on ASP.NET Core. The configuration matches our documentation for ASP.NET Core. Check out Logging from ASP.NET Core for details on how to log all uncaught exceptions from an AWS Serverless Application. The .NET SDK for AWS comes with native support for logging to CloudWatch. We recommend using Microsoft.Extensions.Logging for logging everything to CloudWatch and warnings and errors to elmah.io. The configuration follows that of Logging from Microsoft.Extensions.Logging . AWS Serverless Applications doesn't have a Program.cs file. To configure logging, you will need to modify either LambdaEntryPoint.cs , LocalEntryPoint.cs or both: public class LambdaEntryPoint : Amazon.Lambda.AspNetCoreServer.APIGatewayProxyFunction { protected override void Init(IWebHostBuilder builder) { builder .UseStartup<Startup>() .ConfigureLogging((ctx, logging) => { logging.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); logging.AddFilter<ElmahIoLoggerProvider>(null, LogLevel.Warning); }); } } The same configuration would go into LocalEntryPoint.cs , if you want to log from localhost as well.","title":"Logging to elmah.io from AWS Serverless Application"},{"location":"logging-to-elmah-io-from-aws-lambdas/#logging-when-using-amazonlambdaaspnetcoreserverhosting","text":"AWS supports running ASP.NET Core applications as Lambdas using the Amazon.Lambda.AspNetCoreServer.Hosting package. This can serve as an easy way for .NET developers like us to create minimal API-based endpoints and deploy them as Lambda functions on AWS. There's a downside to deploying ASP.NET Core this way since AWS will kill the process when it decides that it is no longer needed. The Elmah.Io.Extensions.Logging package runs an internal message queue and stores log messages asynchronously to better handle a large workload. When AWS kills the process without disposing of configured loggers, log messages queued for processing are left unhandled. To solve this, Elmah.Io.Extensions.Logging supports a property named Synchronous that disables the internal message queue and stores log messages in a synchronous way. You may still experience log messages not being stored, but that's a consequence of AWS's choice of killing the process rather than shutting it down nicely (like ASP.NET Core). To log messages synchronously, include the following code in your logging setup: builder.Services.AddLogging(logging => { logging.AddElmahIo(options => { // ... options.Synchronous = true; }); }); Be aware that logging a large number of log messages synchronously, may slow down your application and/or cause thread exhaustion. We recommend only logging errors this way and not debug, information, and similar.","title":"Logging when using Amazon.Lambda.AspNetCoreServer.Hosting"},{"location":"logging-to-elmah-io-from-aws-lambdas/#logging-from-aws-lambda-project","text":"AWS Lambda Project comes with native support for CloudWatch too. In our experience, it's not possible to configure multiple destinations on LambdaLogger , why you would want to use another framework when logging to elmah.io from an AWS Lambda Project. We recommend using a logging framework like Serilog , Microsoft.Extensions.Logging , NLog , or log4net .","title":"Logging from AWS Lambda Project"},{"location":"logging-to-elmah-io-from-azure-functions/","text":"Logging to elmah.io from Azure Functions Logging to elmah.io from Azure Functions Application name Message hooks Decorating log messages Include source code Handle errors Error filtering Logging through ILogger Log filtering Azure Functions v1 Logging errors from Azure Functions requires only a few lines of code. We've created a client specifically for Azure Functions. If your are looking for logging from Isolated Azure Functions (out of process) check out Logging to elmah.io from Isolated Azure Functions . Install the newest Elmah.Io.Functions package in your Azure Functions project: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Functions Install-Package Elmah.Io.Functions <PackageReference Include=\"Elmah.Io.Functions\" Version=\"5.*\" /> paket add Elmah.Io.Functions The elmah.io integration for Azure Functions uses function filters and dependency injection part of the Microsoft.Azure.Functions.Extensions package. To configure elmah.io, open the Startup.cs file or create a new one if not already there. In the Configure -method, add the elmah.io options and exception filter: using Elmah.Io.Functions; using Microsoft.Azure.Functions.Extensions.DependencyInjection; using Microsoft.Azure.WebJobs.Host; using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection; using System; [assembly: FunctionsStartup(typeof(MyFunction.Startup))] namespace MyFunction { public class Startup : FunctionsStartup { public override void Configure(IFunctionsHostBuilder builder) { var config = new ConfigurationBuilder() .AddJsonFile(\"local.settings.json\", optional: true, reloadOnChange: true) .AddEnvironmentVariables() .Build(); builder.Services.Configure<ElmahIoFunctionOptions>(o => { o.ApiKey = config[\"apiKey\"]; o.LogId = new Guid(config[\"logId\"]); }); builder.Services.AddSingleton<IFunctionFilter, ElmahIoExceptionFilter>(); } } } Notice how API key and log ID are configured through the ElmahIoFunctionOptions object. In the last line of the Configure -method, the ElmahIoExceptionFilter -filter is configured. This filter will automatically catch any exception caused by your filter and log it to elmah.io. A quick comment about the obsolete warning showed when using the package. Microsoft marked IFunctionFilter as obsolete. Not because it will be removed, but because they may change the way attributes work in functions in the future. For now, you can suppress this warning with the following code: #pragma warning disable CS0618 // Type or member is obsolete builder.Services.AddSingleton<IFunctionFilter, ElmahIoExceptionFilter>(); #pragma warning restore CS0618 // Type or member is obsolete In your settings, add the apiKey and logId variables: { // ... \"Values\": { // ... \"apiKey\": \"API_KEY\", \"logId\": \"LOG_ID\" } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with your log ID. When running on Azure or similar, you can overwrite apiKey and logId with application settings or environment variables as already thoroughly documented on Microsoft's documentation. Application name To set the application name on all errors, set the Application property during initialization: builder.Services.Configure<ElmahIoFunctionOptions>(o => { o.ApiKey = config[\"apiKey\"]; o.LogId = new Guid(config[\"logId\"]); o.Application = \"MyFunction\"; }); Message hooks Elmah.Io.Functions provide message hooks similar to the integrations with ASP.NET and ASP.NET Core. Decorating log messages To include additional information on log messages, you can use the OnMessage event when initializing ElmahIoFunctionOptions : builder.Services.Configure<ElmahIoFunctionOptions>(o => { o.ApiKey = config[\"apiKey\"]; o.LogId = new Guid(config[\"logId\"]); o.OnMessage = msg => { msg.Version = \"1.0.0\"; }; }); The example above includes a version number on all errors. Include source code You can use the OnMessage action to include source code to log messages. This will require a stack trace in the Detail property with filenames and line numbers in it. There are multiple ways of including source code to log messages. In short, you will need to install the Elmah.Io.Client.Extensions.SourceCode NuGet package and call the WithSourceCodeFromPdb method in the OnMessage action: builder.Services.Configure<ElmahIoFunctionOptions>(o => { o.OnMessage = msg => { msg.WithSourceCodeFromPdb(); }; }); Check out How to include source code in log messages for additional requirements to make source code show up on elmah.io. Handle errors To handle any errors happening while processing a log message, you can use the OnError event when initializing ElmahIoFunctionOptions : builder.Services.Configure<ElmahIoFunctionOptions>(o => { o.ApiKey = config[\"apiKey\"]; o.LogId = new Guid(config[\"logId\"]); o.OnError = (msg, ex) => { logger.LogError(ex, ex.Message); }; }); The example above logs any errors during communication with elmah.io to a local log. Error filtering To ignore specific errors based on their content, you can use the OnFilter event when initializing ElmahIoFunctionOptions : builder.Services.Configure<ElmahIoFunctionOptions>(o => { o.ApiKey = config[\"apiKey\"]; o.LogId = new Guid(config[\"logId\"]); o.OnFilter = msg => { return msg.Method == \"GET\"; }; }); The example above ignores any errors generated during an HTTP GET request. Logging through ILogger Azure Functions can log through Microsoft.Extensions.Logging (MEL) too. By adding the filter, as shown above, all uncaught exceptions are automatically logged. But when configuring your Function app to log through MEL, custom messages can be logged through the ILogger interface. Furthermore, you will get detailed log messages from within the Function host. To set this up, install the Elmah.Io.Extensions.Logging NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Extensions.Logging Install-Package Elmah.Io.Extensions.Logging <PackageReference Include=\"Elmah.Io.Extensions.Logging\" Version=\"5.*\" /> paket add Elmah.Io.Extensions.Logging Then extend your Startup.cs file like this: builder.Services.AddLogging(logging => { logging.AddElmahIo(o => { o.ApiKey = config[\"apiKey\"]; o.LogId = new Guid(config[\"logId\"]); }); logging.AddFilter<ElmahIoLoggerProvider>(null, LogLevel.Warning); }); In the example, only warning messages and above are logged to elmah.io. You can remove the filter or set another log level if you want to log more. Jump to Log filtering to learn how to configure filters from config. Either pass an ILogger to your function method: public class MyFunction { public static void Run([TimerTrigger(\"...\")]TimerInfo myTimer, ILogger log) { log.LogWarning(\"This is a warning\"); } } Or inject an ILoggerFactory and create a logger as part of the constructor: public class MyFunction { private readonly ILogger log; public Function1(ILoggerFactory loggerFactory) { this.log = loggerFactory.CreateLogger(\"MyFunction\"); } public void Run([TimerTrigger(\"...\")]TimerInfo myTimer) { log.LogWarning(\"This is a warning\"); } } Log filtering The code above filters out all log messages with a severity lower than Warning . You can use all of the log filtering capabilities of Microsoft.Extensions.Logging to enable and disable various log levels from multiple categories. A common requirement is to only log Warning and more severe originating from the Azure Functions runtime, but log Information messages from your function code. This can be enabled through a custom category: public class MyFunction { private readonly ILogger log; public Function1(ILoggerFactory loggerFactory) { this.log = loggerFactory.CreateLogger(\"MyFunction\"); } public void Run([TimerTrigger(\"...\")]TimerInfo myTimer) { log.LogInformation(\"This is an information message\"); } } The MyFunction category will need configuration in either C# or in the host.json file: { // ... \"logging\": { \"logLevel\": { \"default\": \"Warning\", \"MyFunction\": \"Information\" } } } Azure Functions v1 The recent Elmah.Io.Functions package no longer supports Azure Functions v1. You can still log from Functions v1 using an older version of the package. Check out Logging to elmah.io from Azure WebJobs for details. The guide is for Azure WebJobs but installation for Functions v1 is identical.","title":"Logging from Azure Functions"},{"location":"logging-to-elmah-io-from-azure-functions/#logging-to-elmahio-from-azure-functions","text":"Logging to elmah.io from Azure Functions Application name Message hooks Decorating log messages Include source code Handle errors Error filtering Logging through ILogger Log filtering Azure Functions v1 Logging errors from Azure Functions requires only a few lines of code. We've created a client specifically for Azure Functions. If your are looking for logging from Isolated Azure Functions (out of process) check out Logging to elmah.io from Isolated Azure Functions . Install the newest Elmah.Io.Functions package in your Azure Functions project: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Functions Install-Package Elmah.Io.Functions <PackageReference Include=\"Elmah.Io.Functions\" Version=\"5.*\" /> paket add Elmah.Io.Functions The elmah.io integration for Azure Functions uses function filters and dependency injection part of the Microsoft.Azure.Functions.Extensions package. To configure elmah.io, open the Startup.cs file or create a new one if not already there. In the Configure -method, add the elmah.io options and exception filter: using Elmah.Io.Functions; using Microsoft.Azure.Functions.Extensions.DependencyInjection; using Microsoft.Azure.WebJobs.Host; using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection; using System; [assembly: FunctionsStartup(typeof(MyFunction.Startup))] namespace MyFunction { public class Startup : FunctionsStartup { public override void Configure(IFunctionsHostBuilder builder) { var config = new ConfigurationBuilder() .AddJsonFile(\"local.settings.json\", optional: true, reloadOnChange: true) .AddEnvironmentVariables() .Build(); builder.Services.Configure<ElmahIoFunctionOptions>(o => { o.ApiKey = config[\"apiKey\"]; o.LogId = new Guid(config[\"logId\"]); }); builder.Services.AddSingleton<IFunctionFilter, ElmahIoExceptionFilter>(); } } } Notice how API key and log ID are configured through the ElmahIoFunctionOptions object. In the last line of the Configure -method, the ElmahIoExceptionFilter -filter is configured. This filter will automatically catch any exception caused by your filter and log it to elmah.io. A quick comment about the obsolete warning showed when using the package. Microsoft marked IFunctionFilter as obsolete. Not because it will be removed, but because they may change the way attributes work in functions in the future. For now, you can suppress this warning with the following code: #pragma warning disable CS0618 // Type or member is obsolete builder.Services.AddSingleton<IFunctionFilter, ElmahIoExceptionFilter>(); #pragma warning restore CS0618 // Type or member is obsolete In your settings, add the apiKey and logId variables: { // ... \"Values\": { // ... \"apiKey\": \"API_KEY\", \"logId\": \"LOG_ID\" } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with your log ID. When running on Azure or similar, you can overwrite apiKey and logId with application settings or environment variables as already thoroughly documented on Microsoft's documentation.","title":"Logging to elmah.io from Azure Functions"},{"location":"logging-to-elmah-io-from-azure-functions/#application-name","text":"To set the application name on all errors, set the Application property during initialization: builder.Services.Configure<ElmahIoFunctionOptions>(o => { o.ApiKey = config[\"apiKey\"]; o.LogId = new Guid(config[\"logId\"]); o.Application = \"MyFunction\"; });","title":"Application name"},{"location":"logging-to-elmah-io-from-azure-functions/#message-hooks","text":"Elmah.Io.Functions provide message hooks similar to the integrations with ASP.NET and ASP.NET Core.","title":"Message hooks"},{"location":"logging-to-elmah-io-from-azure-functions/#decorating-log-messages","text":"To include additional information on log messages, you can use the OnMessage event when initializing ElmahIoFunctionOptions : builder.Services.Configure<ElmahIoFunctionOptions>(o => { o.ApiKey = config[\"apiKey\"]; o.LogId = new Guid(config[\"logId\"]); o.OnMessage = msg => { msg.Version = \"1.0.0\"; }; }); The example above includes a version number on all errors.","title":"Decorating log messages"},{"location":"logging-to-elmah-io-from-azure-functions/#include-source-code","text":"You can use the OnMessage action to include source code to log messages. This will require a stack trace in the Detail property with filenames and line numbers in it. There are multiple ways of including source code to log messages. In short, you will need to install the Elmah.Io.Client.Extensions.SourceCode NuGet package and call the WithSourceCodeFromPdb method in the OnMessage action: builder.Services.Configure<ElmahIoFunctionOptions>(o => { o.OnMessage = msg => { msg.WithSourceCodeFromPdb(); }; }); Check out How to include source code in log messages for additional requirements to make source code show up on elmah.io.","title":"Include source code"},{"location":"logging-to-elmah-io-from-azure-functions/#handle-errors","text":"To handle any errors happening while processing a log message, you can use the OnError event when initializing ElmahIoFunctionOptions : builder.Services.Configure<ElmahIoFunctionOptions>(o => { o.ApiKey = config[\"apiKey\"]; o.LogId = new Guid(config[\"logId\"]); o.OnError = (msg, ex) => { logger.LogError(ex, ex.Message); }; }); The example above logs any errors during communication with elmah.io to a local log.","title":"Handle errors"},{"location":"logging-to-elmah-io-from-azure-functions/#error-filtering","text":"To ignore specific errors based on their content, you can use the OnFilter event when initializing ElmahIoFunctionOptions : builder.Services.Configure<ElmahIoFunctionOptions>(o => { o.ApiKey = config[\"apiKey\"]; o.LogId = new Guid(config[\"logId\"]); o.OnFilter = msg => { return msg.Method == \"GET\"; }; }); The example above ignores any errors generated during an HTTP GET request.","title":"Error filtering"},{"location":"logging-to-elmah-io-from-azure-functions/#logging-through-ilogger","text":"Azure Functions can log through Microsoft.Extensions.Logging (MEL) too. By adding the filter, as shown above, all uncaught exceptions are automatically logged. But when configuring your Function app to log through MEL, custom messages can be logged through the ILogger interface. Furthermore, you will get detailed log messages from within the Function host. To set this up, install the Elmah.Io.Extensions.Logging NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Extensions.Logging Install-Package Elmah.Io.Extensions.Logging <PackageReference Include=\"Elmah.Io.Extensions.Logging\" Version=\"5.*\" /> paket add Elmah.Io.Extensions.Logging Then extend your Startup.cs file like this: builder.Services.AddLogging(logging => { logging.AddElmahIo(o => { o.ApiKey = config[\"apiKey\"]; o.LogId = new Guid(config[\"logId\"]); }); logging.AddFilter<ElmahIoLoggerProvider>(null, LogLevel.Warning); }); In the example, only warning messages and above are logged to elmah.io. You can remove the filter or set another log level if you want to log more. Jump to Log filtering to learn how to configure filters from config. Either pass an ILogger to your function method: public class MyFunction { public static void Run([TimerTrigger(\"...\")]TimerInfo myTimer, ILogger log) { log.LogWarning(\"This is a warning\"); } } Or inject an ILoggerFactory and create a logger as part of the constructor: public class MyFunction { private readonly ILogger log; public Function1(ILoggerFactory loggerFactory) { this.log = loggerFactory.CreateLogger(\"MyFunction\"); } public void Run([TimerTrigger(\"...\")]TimerInfo myTimer) { log.LogWarning(\"This is a warning\"); } }","title":"Logging through ILogger"},{"location":"logging-to-elmah-io-from-azure-functions/#log-filtering","text":"The code above filters out all log messages with a severity lower than Warning . You can use all of the log filtering capabilities of Microsoft.Extensions.Logging to enable and disable various log levels from multiple categories. A common requirement is to only log Warning and more severe originating from the Azure Functions runtime, but log Information messages from your function code. This can be enabled through a custom category: public class MyFunction { private readonly ILogger log; public Function1(ILoggerFactory loggerFactory) { this.log = loggerFactory.CreateLogger(\"MyFunction\"); } public void Run([TimerTrigger(\"...\")]TimerInfo myTimer) { log.LogInformation(\"This is an information message\"); } } The MyFunction category will need configuration in either C# or in the host.json file: { // ... \"logging\": { \"logLevel\": { \"default\": \"Warning\", \"MyFunction\": \"Information\" } } }","title":"Log filtering"},{"location":"logging-to-elmah-io-from-azure-functions/#azure-functions-v1","text":"The recent Elmah.Io.Functions package no longer supports Azure Functions v1. You can still log from Functions v1 using an older version of the package. Check out Logging to elmah.io from Azure WebJobs for details. The guide is for Azure WebJobs but installation for Functions v1 is identical.","title":"Azure Functions v1"},{"location":"logging-to-elmah-io-from-azure-webjobs/","text":"Logging to elmah.io from Azure WebJobs Logging errors from Azure WebJobs requires only a few lines of code. We've created a client specifically for Azure WebJobs. Warning Support for Azure WebJobs has been stopped on version 3.1.23 of the Elmah.Io.Functions package. The newer versions only work with Azure Functions. Install the Elmah.Io.Functions package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Functions --version 3.1.23 Install-Package Elmah.Io.Functions -Version 3.1.23 <PackageReference Include=\"Elmah.Io.Functions\" Version=\"3.1.23\" /> paket add Elmah.Io.Functions --version 3.1.23 Log all uncaught exceptions using the ElmahIoExceptionFilter attribute: [ElmahIoExceptionFilter(\"API_KEY\", \"LOG_ID\")] public class Functions { public static void ProcessQueueMessage([QueueTrigger(\"queue\")] string msg, TextWriter log) { throw new Exception(\"Some exception\"); } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with your log ID. Note If your WebJob method is declared as async, remember to change the return type to Task . Without it, ElmahIoExceptionFilter is never invoked. The filter also supports config variables: [ElmahIoExceptionFilter(\"%apiKey%\", \"%logId%\")] The variables above, would require you to add your API key and log ID to your App.config : <configuration> <appSettings> <add key=\"apiKey\" value=\"API_KEY\"/> <add key=\"logId\" value=\"LOG_ID\"/> </appSettings> </configuration>","title":"Logging from Azure WebJobs"},{"location":"logging-to-elmah-io-from-azure-webjobs/#logging-to-elmahio-from-azure-webjobs","text":"Logging errors from Azure WebJobs requires only a few lines of code. We've created a client specifically for Azure WebJobs. Warning Support for Azure WebJobs has been stopped on version 3.1.23 of the Elmah.Io.Functions package. The newer versions only work with Azure Functions. Install the Elmah.Io.Functions package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Functions --version 3.1.23 Install-Package Elmah.Io.Functions -Version 3.1.23 <PackageReference Include=\"Elmah.Io.Functions\" Version=\"3.1.23\" /> paket add Elmah.Io.Functions --version 3.1.23 Log all uncaught exceptions using the ElmahIoExceptionFilter attribute: [ElmahIoExceptionFilter(\"API_KEY\", \"LOG_ID\")] public class Functions { public static void ProcessQueueMessage([QueueTrigger(\"queue\")] string msg, TextWriter log) { throw new Exception(\"Some exception\"); } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with your log ID. Note If your WebJob method is declared as async, remember to change the return type to Task . Without it, ElmahIoExceptionFilter is never invoked. The filter also supports config variables: [ElmahIoExceptionFilter(\"%apiKey%\", \"%logId%\")] The variables above, would require you to add your API key and log ID to your App.config : <configuration> <appSettings> <add key=\"apiKey\" value=\"API_KEY\"/> <add key=\"logId\" value=\"LOG_ID\"/> </appSettings> </configuration>","title":"Logging to elmah.io from Azure WebJobs"},{"location":"logging-to-elmah-io-from-blazor/","text":"Logging to elmah.io from Blazor Logging to elmah.io from Blazor Blazor Server App Include details from the HTTP context Blazor WebAssembly App (wasm) Configuration in appsettings.json Blazor (United) App Blazor Server App To start logging to elmah.io from a Blazor Server App, install the Elmah.Io.Extensions.Logging NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Extensions.Logging Install-Package Elmah.Io.Extensions.Logging <PackageReference Include=\"Elmah.Io.Extensions.Logging\" Version=\"5.*\" /> paket add Elmah.Io.Extensions.Logging In the Program.cs file, add elmah.io logging configuration: builder.Logging.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the ID of the log you want messages sent to ( Where is my log ID? ). The package can be configured through settings if you prefer. Check out appsettings.json configuration for details. All uncaught exceptions are automatically logged to elmah.io. Exceptions can be logged manually, by injecting an ILogger into your view and adding try/catch : @using Microsoft.Extensions.Logging @inject ILogger<FetchData> logger <!-- ... --> @functions { WeatherForecast[] forecasts; protected override async Task OnInitAsync() { try { forecasts = await Http .GetJsonAsync<WeatherForecast[]>(\"api/SampleData/WeatherForecasts-nonexisting\"); } catch (Exception e) { logger.LogError(e, e.Message); } } } Information and other severities can be logged as well: @using Microsoft.Extensions.Logging @inject ILogger<Counter> logger <!-- ... --> @functions { int currentCount = 0; void IncrementCount() { currentCount++; logger.LogInformation(\"Incremented count to {currentCount}\", currentCount); } } Include details from the HTTP context Microsoft.Extensions.Logging doesn't know that it is running inside a web server. That is why Elmah.Io.Extensions.Logging doesn't include HTTP contextual information like URL and status code as default. To do so, install the Elmah.Io.AspNetCore.ExtensionsLogging NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.AspNetCore.ExtensionsLogging Install-Package Elmah.Io.AspNetCore.ExtensionsLogging <PackageReference Include=\"Elmah.Io.AspNetCore.ExtensionsLogging\" Version=\"5.*\" /> paket add Elmah.Io.AspNetCore.ExtensionsLogging And add the following code to the Program.cs file: app.UseElmahIoExtensionsLogging(); Make sure to call this method just before the call to UseRouting and UseEndpoints . This will include some of the information you are looking for. There's a problem when running Blazor Server where you will see some of the URLs logged as part of errors on elmah.io having the value /_blazor . This is because Blazor doesn't work like traditional websites where the client requests the server and returns an HTML or JSON response. When navigating the UI, parts of the UI are loaded through SignalR, which causes the URL to be /_blazor . Unfortunately, we haven't found a good way to fix this globally. You can include the current URL on manual log statements by injecting a NavigationManager in the top of your .razor file: @inject NavigationManager navigationManager Then wrap your logging code in a new scope: Uri.TryCreate(navigationManager.Uri, UriKind.Absolute, out Uri url); using (Logger.BeginScope(new Dictionary<string, object> { { \"url\", url.AbsolutePath } })) { logger.LogError(exception, \"An error happened\"); } The code uses the current URL from the injected NavigationManager object. Blazor WebAssembly App (wasm) To start logging to elmah.io from a Blazor Wasm App, install the Elmah.Io.Blazor.Wasm NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Blazor.Wasm Install-Package Elmah.Io.Blazor.Wasm <PackageReference Include=\"Elmah.Io.Blazor.Wasm\" Version=\"4.*\" /> paket add Elmah.Io.Blazor.Wasm In the Program.cs file, add elmah.io logging configuration: builder.Logging.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the ID of the log you want messages sent to ( Where is my log ID? ). All uncaught exceptions are automatically logged to elmah.io after calling AddElmahIo . Errors and other severities can be logged manually, by injecting an ILogger into your view and adding try/catch or by implementing error boundaries: @page \"/\" @inject ILogger<Index> logger @code { protected override void OnInitialized() { logger.LogInformation(\"Initializing index view\"); try { object text = \"Text\"; var cast = (int)text; } catch (InvalidCastException e) { logger.LogError(e, \"An error happened\"); } } } The following may be implemented by the package later: Additional information about the HTTP context (like cookies, URL, and user). Internal message queue and/or batch processing like Microsoft.Extensions.Logging . Support for logging scopes. Configuration in appsettings.json Blazor WebAssembly doesn't provide an appsettings.json file as part of the default template. To add one, create a new file named appsettings.json in the wwwroot directory. Make sure to set Build Action to Content and Copy to Output Directory to Copy if Newer . In the file, add the following content: { \"ElmahIo\": { \"ApiKey\": \"API_KEY\", \"LogId\": \"LOG_ID\" } } As before, API_KEY and LOG_ID should be replaced with real values. In the Program.cs file you can load the config and set up Elmah.Io.Blazor.Wasm using the overloaded AddElmahIo method: builder.Services.Configure<ElmahIoBlazorOptions>(builder.Configuration.GetSection(\"ElmahIo\")); builder.Logging.AddElmahIo(); Note The AddElmahIo mehtod without parameters was introduced in Elmah.Io.Blazor.Wasm v5 package. For earlier versions, provide empty options like this: builder.Logging.AddElmahIo(options => {}); Blazor (United) App .NET 8 introduces a new approach to developing Blazor applications, formerly known as Blazor United. We have started experimenting a bit with Blazor Apps which have the option of rendering both server-side and client-side from within the same Blazor application. As shown in the sections above, using server-side rendering needs Elmah.Io.Extensions.Logging while client-side rendering needs Elmah.Io.Blazor.Wasm . You cannot have both packages installed and configured in the same project so you need to stick to one of them for Blazor (United) Apps. Since the Elmah.Io.Extensions.Logging package doesn't work with Blazor WebAssembly, we recommend installing the Elmah.Io.Blazor.Wasm package if you want to log from both server-side and client-side. Once the new Blazor App framework matures, we will probably consolidate features from both packages into an Elmah.Io.Blazor package or similar.","title":"Logging from Blazor"},{"location":"logging-to-elmah-io-from-blazor/#logging-to-elmahio-from-blazor","text":"Logging to elmah.io from Blazor Blazor Server App Include details from the HTTP context Blazor WebAssembly App (wasm) Configuration in appsettings.json Blazor (United) App","title":"Logging to elmah.io from Blazor"},{"location":"logging-to-elmah-io-from-blazor/#blazor-server-app","text":"To start logging to elmah.io from a Blazor Server App, install the Elmah.Io.Extensions.Logging NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Extensions.Logging Install-Package Elmah.Io.Extensions.Logging <PackageReference Include=\"Elmah.Io.Extensions.Logging\" Version=\"5.*\" /> paket add Elmah.Io.Extensions.Logging In the Program.cs file, add elmah.io logging configuration: builder.Logging.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the ID of the log you want messages sent to ( Where is my log ID? ). The package can be configured through settings if you prefer. Check out appsettings.json configuration for details. All uncaught exceptions are automatically logged to elmah.io. Exceptions can be logged manually, by injecting an ILogger into your view and adding try/catch : @using Microsoft.Extensions.Logging @inject ILogger<FetchData> logger <!-- ... --> @functions { WeatherForecast[] forecasts; protected override async Task OnInitAsync() { try { forecasts = await Http .GetJsonAsync<WeatherForecast[]>(\"api/SampleData/WeatherForecasts-nonexisting\"); } catch (Exception e) { logger.LogError(e, e.Message); } } } Information and other severities can be logged as well: @using Microsoft.Extensions.Logging @inject ILogger<Counter> logger <!-- ... --> @functions { int currentCount = 0; void IncrementCount() { currentCount++; logger.LogInformation(\"Incremented count to {currentCount}\", currentCount); } }","title":"Blazor Server App"},{"location":"logging-to-elmah-io-from-blazor/#include-details-from-the-http-context","text":"Microsoft.Extensions.Logging doesn't know that it is running inside a web server. That is why Elmah.Io.Extensions.Logging doesn't include HTTP contextual information like URL and status code as default. To do so, install the Elmah.Io.AspNetCore.ExtensionsLogging NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.AspNetCore.ExtensionsLogging Install-Package Elmah.Io.AspNetCore.ExtensionsLogging <PackageReference Include=\"Elmah.Io.AspNetCore.ExtensionsLogging\" Version=\"5.*\" /> paket add Elmah.Io.AspNetCore.ExtensionsLogging And add the following code to the Program.cs file: app.UseElmahIoExtensionsLogging(); Make sure to call this method just before the call to UseRouting and UseEndpoints . This will include some of the information you are looking for. There's a problem when running Blazor Server where you will see some of the URLs logged as part of errors on elmah.io having the value /_blazor . This is because Blazor doesn't work like traditional websites where the client requests the server and returns an HTML or JSON response. When navigating the UI, parts of the UI are loaded through SignalR, which causes the URL to be /_blazor . Unfortunately, we haven't found a good way to fix this globally. You can include the current URL on manual log statements by injecting a NavigationManager in the top of your .razor file: @inject NavigationManager navigationManager Then wrap your logging code in a new scope: Uri.TryCreate(navigationManager.Uri, UriKind.Absolute, out Uri url); using (Logger.BeginScope(new Dictionary<string, object> { { \"url\", url.AbsolutePath } })) { logger.LogError(exception, \"An error happened\"); } The code uses the current URL from the injected NavigationManager object.","title":"Include details from the HTTP context"},{"location":"logging-to-elmah-io-from-blazor/#blazor-webassembly-app-wasm","text":"To start logging to elmah.io from a Blazor Wasm App, install the Elmah.Io.Blazor.Wasm NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Blazor.Wasm Install-Package Elmah.Io.Blazor.Wasm <PackageReference Include=\"Elmah.Io.Blazor.Wasm\" Version=\"4.*\" /> paket add Elmah.Io.Blazor.Wasm In the Program.cs file, add elmah.io logging configuration: builder.Logging.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the ID of the log you want messages sent to ( Where is my log ID? ). All uncaught exceptions are automatically logged to elmah.io after calling AddElmahIo . Errors and other severities can be logged manually, by injecting an ILogger into your view and adding try/catch or by implementing error boundaries: @page \"/\" @inject ILogger<Index> logger @code { protected override void OnInitialized() { logger.LogInformation(\"Initializing index view\"); try { object text = \"Text\"; var cast = (int)text; } catch (InvalidCastException e) { logger.LogError(e, \"An error happened\"); } } } The following may be implemented by the package later: Additional information about the HTTP context (like cookies, URL, and user). Internal message queue and/or batch processing like Microsoft.Extensions.Logging . Support for logging scopes.","title":"Blazor WebAssembly App (wasm)"},{"location":"logging-to-elmah-io-from-blazor/#configuration-in-appsettingsjson","text":"Blazor WebAssembly doesn't provide an appsettings.json file as part of the default template. To add one, create a new file named appsettings.json in the wwwroot directory. Make sure to set Build Action to Content and Copy to Output Directory to Copy if Newer . In the file, add the following content: { \"ElmahIo\": { \"ApiKey\": \"API_KEY\", \"LogId\": \"LOG_ID\" } } As before, API_KEY and LOG_ID should be replaced with real values. In the Program.cs file you can load the config and set up Elmah.Io.Blazor.Wasm using the overloaded AddElmahIo method: builder.Services.Configure<ElmahIoBlazorOptions>(builder.Configuration.GetSection(\"ElmahIo\")); builder.Logging.AddElmahIo(); Note The AddElmahIo mehtod without parameters was introduced in Elmah.Io.Blazor.Wasm v5 package. For earlier versions, provide empty options like this: builder.Logging.AddElmahIo(options => {});","title":"Configuration in appsettings.json"},{"location":"logging-to-elmah-io-from-blazor/#blazor-united-app","text":".NET 8 introduces a new approach to developing Blazor applications, formerly known as Blazor United. We have started experimenting a bit with Blazor Apps which have the option of rendering both server-side and client-side from within the same Blazor application. As shown in the sections above, using server-side rendering needs Elmah.Io.Extensions.Logging while client-side rendering needs Elmah.Io.Blazor.Wasm . You cannot have both packages installed and configured in the same project so you need to stick to one of them for Blazor (United) Apps. Since the Elmah.Io.Extensions.Logging package doesn't work with Blazor WebAssembly, we recommend installing the Elmah.Io.Blazor.Wasm package if you want to log from both server-side and client-side. Once the new Blazor App framework matures, we will probably consolidate features from both packages into an Elmah.Io.Blazor package or similar.","title":"Blazor (United) App"},{"location":"logging-to-elmah-io-from-blogengine-net/","text":"Logging to elmah.io from BlogEngine.NET Because BlogEngine.NET is written in ASP.NET, it doesn't need any custom code to use ELMAH and elmah.io. ELMAH works out of the box for most web frameworks by Microsoft. If you are building and deploying the code yourself, installing elmah.io is achieved using our NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io Install-Package Elmah.Io <PackageReference Include=\"Elmah.Io\" Version=\"5.*\" /> paket add Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). When installed, BlogEngine.NET starts reporting errors to elmah.io. To check it out, force an internal server error or similar, and visit /elmah.axd or the search area of your log at elmah.io. Some of you may use the BlogEngine.NET binaries or even installed it using a one-click installer. In this case you will need to add elmah.io manually. To do that, use a tool like NuGet Package Explorer to download the most recent versions of ELMAH and elmah.io. Copy Elmah.dll and Elmah.Io.dll to the bin directory of your BlogEngine.NET installation. Also modify your web.config to include the ELMAH config as shown in the config example. Last but not least, remember to add the elmah.io error logger configuration as a child node to the <elmah> element: <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKey=\"API_KEY\" logId=\"LOG_ID\" /> Where API_KEY is your API key and LOG_ID is your log ID. To wrap this up, you may have noticed that there's a NuGet package to bring ELMAH support into BlogEngine.NET. This package adds the ELMAH assembly and config as well as adds a nice BlogEngine.NET compliant URL for browsing errors. Feel free to use this package, but remember to add it after the elmah.io package. Also, make sure to clean up the dual error log configuration: <elmah> <security allowRemoteAccess=\"false\" /> <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKey=\"APIKEY\" logId=\"LOGID\" /> <security allowRemoteAccess=\"true\" /> <errorLog type=\"Elmah.SqlServerCompactErrorLog, Elmah\" connectionStringName=\"elmah-sqlservercompact\" /> </elmah>","title":"Logging from BlogEngine.NET"},{"location":"logging-to-elmah-io-from-blogengine-net/#logging-to-elmahio-from-blogenginenet","text":"Because BlogEngine.NET is written in ASP.NET, it doesn't need any custom code to use ELMAH and elmah.io. ELMAH works out of the box for most web frameworks by Microsoft. If you are building and deploying the code yourself, installing elmah.io is achieved using our NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io Install-Package Elmah.Io <PackageReference Include=\"Elmah.Io\" Version=\"5.*\" /> paket add Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). When installed, BlogEngine.NET starts reporting errors to elmah.io. To check it out, force an internal server error or similar, and visit /elmah.axd or the search area of your log at elmah.io. Some of you may use the BlogEngine.NET binaries or even installed it using a one-click installer. In this case you will need to add elmah.io manually. To do that, use a tool like NuGet Package Explorer to download the most recent versions of ELMAH and elmah.io. Copy Elmah.dll and Elmah.Io.dll to the bin directory of your BlogEngine.NET installation. Also modify your web.config to include the ELMAH config as shown in the config example. Last but not least, remember to add the elmah.io error logger configuration as a child node to the <elmah> element: <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKey=\"API_KEY\" logId=\"LOG_ID\" /> Where API_KEY is your API key and LOG_ID is your log ID. To wrap this up, you may have noticed that there's a NuGet package to bring ELMAH support into BlogEngine.NET. This package adds the ELMAH assembly and config as well as adds a nice BlogEngine.NET compliant URL for browsing errors. Feel free to use this package, but remember to add it after the elmah.io package. Also, make sure to clean up the dual error log configuration: <elmah> <security allowRemoteAccess=\"false\" /> <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKey=\"APIKEY\" logId=\"LOGID\" /> <security allowRemoteAccess=\"true\" /> <errorLog type=\"Elmah.SqlServerCompactErrorLog, Elmah\" connectionStringName=\"elmah-sqlservercompact\" /> </elmah>","title":"Logging to elmah.io from BlogEngine.NET"},{"location":"logging-to-elmah-io-from-console-application/","text":"Logging to elmah.io from C# and console applications Logging to elmah.io from C# and console applications Structured logging Breadcrumbs Events OnMessage Include source code OnMessageFail OnMessageFilter Bulk upload Options Proxy Obfuscate form values Full example If you need to log to elmah.io and you cannot use one of the integrations we provide, logging through the Elmah.Io.Client NuGet package is dead simple. To start logging, install the Elmah.Io.Client package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client Install-Package Elmah.Io.Client <PackageReference Include=\"Elmah.Io.Client\" Version=\"5.*\" /> paket add Elmah.Io.Client Create a new ElmahioAPI : var logger = ElmahioAPI.Create(\"API_KEY\"); Replace API_KEY with your API key ( Where is my API key? ). The elmah.io client supports logging in different log levels much like other logging frameworks for .NET: var logId = new Guid(\"LOG_ID\"); logger.Messages.Fatal(logId, new ApplicationException(\"A fatal exception\"), \"Fatal message\"); logger.Messages.Error(logId, new ApplicationException(\"An exception\"), \"Error message\"); logger.Messages.Warning(logId, \"A warning\"); logger.Messages.Information(logId, \"An info message\"); logger.Messages.Debug(logId, \"A debug message\"); logger.Messages.Verbose(logId, \"A verbose message\"); Replace LOG_ID with your log ID from elmah.io ( Where is my log ID? ). To have 100% control of how the message is logged to elmah.io, you can use the CreateAndNotify -method: logger.Messages.CreateAndNotify(logId, new CreateMessage { Title = \"Hello World\", Application = \"Elmah.Io.Client sample\", Detail = \"This is a long description of the error. Maybe even a stack trace\", Severity = Severity.Error.ToString(), Data = new List<Item> { new Item {Key = \"Username\", Value = \"Man in black\"} }, Form = new List<Item> { new Item {Key = \"Password\", Value = \"SecretPassword\"}, new Item {Key = \"pwd\", Value = \"Other secret value\"}, new Item {Key = \"visible form item\", Value = \"With a value\"} } }); Structured logging Like the integrations for Serilog, NLog and, Microsoft.Extensions.Logging, the elmah.io client supports structured logging: logger.Messages.CreateAndNotify(logId, new CreateMessage { Title = \"Thomas says Hello\", TitleTemplate = \"{User} says Hello\", }); Breadcrumbs You can log one or more breadcrumbs as part of a log message. Breadcrumbs indicate steps happening just before a log message (typically an error). Breadcrumbs are supported through the Breadcrumbs property on the CreateMessage class: logger.Messages.CreateAndNotify(logId, new CreateMessage { Title = \"Oh no, an error happened\", Severity = \"Error\", Breadcrumbs = new List<Breadcrumb> { new Breadcrumb { DateTime = DateTime.UtcNow.AddSeconds(-10), Action = \"Navigation\", Message = \"Navigate from / to /signin\", Severity = \"Information\" }, new Breadcrumb { DateTime = DateTime.UtcNow.AddSeconds(-3), Action = \"Click\", Message = \"#submit\", Severity = \"Information\" }, new Breadcrumb { DateTime = DateTime.UtcNow.AddSeconds(-2), Action = \"Submit\", Message = \"#loginform\", Severity = \"Information\" }, new Breadcrumb { DateTime = DateTime.UtcNow.AddSeconds(-1), Action = \"Request\", Message = \"/save\", Severity = \"Information\" } } }); Breadcrumbs will be ordered by the DateTime field on the elmah.io API why the order you add them to the Breadcrumbs property isn't that important. Be aware that only the 10 most recent breadcrumbs and breadcrumbs with a date less than or equal to the logged message are stored. In the example above, only Information breadcrumbs are added. The Severity property accepts the same severities as on the log message itself. Events The elmah.io client supports a range of different events to help carry out common tasks. OnMessage To get a callback every time a new message is being logged to elmah.io, you can implement the OnMessage event. This is a great chance to decorate all log messages with a specific property or similar. logger.Messages.OnMessage += (sender, eventArgs) => { eventArgs.Message.Version = \"1.0.0\"; }; Include source code You can use the OnMessage event to include source code to log messages. This will require a stack trace in the Detail property with filenames and line numbers in it. There are multiple ways of including source code to log messages. In short, you will need to install the Elmah.Io.Client.Extensions.SourceCode NuGet package and call the WithSourceCodeFromPdb method in the OnMessage event handler: logger.Messages.OnMessage += (sender, eventArgs) => { eventArgs.Message.WithSourceCodeFromPdb(); }; Check out How to include source code in log messages for additional requirements to make source code show up on elmah.io. Note Including source code on log messages is available in the Elmah.Io.Client v4 package and forward. OnMessageFail Logging to elmah.io can fail if the network connection is down, if elmah.io experiences downtime, or something third. To make sure you log an error elsewhere if this happens, you can implement the OnMessageFail event: logger.Messages.OnMessageFail += (sender, eventArgs) => { System.Console.Error.WriteLine(\"Error when logging to elmah.io\"); }; OnMessageFilter Note The OnMessageFilter event require Elmah.Io.Client version 5.2.* or newer. One or more filters can be set up to easily ignore messages based on their messages. To set up a filter, implement the OnMessageFilter event like this: logger.Messages.OnMessageFilter += (sender, eventArgs) => { eventArgs.Filter = eventArgs.Message.Title.Contains( \"foo\", StringComparison.InvariantCultureIgnoreCase); }; This example sets the Filter property to a boolean indicating if the message should be filtered/ignored or not. In case the log message contains the word 'foo', the message will be ignored. Bulk upload If logging many messages to elmah.io, bulk upload can be a way to optimize performance. The elmah.io client supports bulk upload using the CreateBulkAndNotify -method: logger.Messages.CreateBulkAndNotify(logId, new[] { new CreateMessage { Title = \"This is a bulk message\" }, new CreateMessage { Title = \"This is another bulk message\" }, }.ToList()); Options The elmah.io client contains a set of default options that you can override. Proxy To log through a HTTP proxy, set the WebProxy property: var logger = ElmahioAPI.Create(\"API_KEY\", new ElmahIoOptions { WebProxy = new WebProxy(\"localhost\", 8888) }); A proxy needs to be specified as part of the options sent to the ElmahioAPI.Create method to make sure that the underlying HttpClient is properly initialized. Obfuscate form values When logging POSTs with form values, you don't want users' passwords and similar logged to elmah.io. The elmah.io client automatically filters form keys named password and pwd . Using the FormKeysToObfuscate you can tell the client to obfuscate additional form entries: var logger = ElmahioAPI.Create(\"API_KEY\"); logger.Options.FormKeysToObfuscate.Add(\"secret_key\"); Full example Here's a full example of how to catch all exceptions in a console application and log as many information as possible to elmah.io: class Program { private static IElmahioAPI elmahIo; static void Main(string[] args) { try { AppDomain.CurrentDomain.UnhandledException += (sender, e) => LogException(e.ExceptionObject as Exception); // Run some code } catch (Exception e) { LogException(e); } } private static void LogException(Exception e) { if (elmahIo == null) elmahIo = ElmahioAPI.Create(\"API_KEY\"); var baseException = e?.GetBaseException(); elmahIo.Messages.CreateAndNotify(new Guid(\"LOG_ID\"), new CreateMessage { Data = e?.ToDataList(), Detail = e?.ToString(), Hostname = Environment.MachineName, Severity = Severity.Error.ToString(), Source = baseException?.Source, Title = baseException?.Message ?? \"An error happened\", Type = baseException?.GetType().FullName, User = Environment.UserName, }); } } The code will catch all exceptions both from the catch block and exceptions reported through the UnhandledException event. You'd normally create a shared instance of the elmah.io logger, but in this example, the program will exit just after logging the exception why it doesn't matter. The UnhandledException event is implemented as a last resort to log any errors not triggering the catch block. This can be exceptions in background threads, async code, and similar.","title":"Logging from C# and console applications"},{"location":"logging-to-elmah-io-from-console-application/#logging-to-elmahio-from-c-and-console-applications","text":"Logging to elmah.io from C# and console applications Structured logging Breadcrumbs Events OnMessage Include source code OnMessageFail OnMessageFilter Bulk upload Options Proxy Obfuscate form values Full example If you need to log to elmah.io and you cannot use one of the integrations we provide, logging through the Elmah.Io.Client NuGet package is dead simple. To start logging, install the Elmah.Io.Client package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client Install-Package Elmah.Io.Client <PackageReference Include=\"Elmah.Io.Client\" Version=\"5.*\" /> paket add Elmah.Io.Client Create a new ElmahioAPI : var logger = ElmahioAPI.Create(\"API_KEY\"); Replace API_KEY with your API key ( Where is my API key? ). The elmah.io client supports logging in different log levels much like other logging frameworks for .NET: var logId = new Guid(\"LOG_ID\"); logger.Messages.Fatal(logId, new ApplicationException(\"A fatal exception\"), \"Fatal message\"); logger.Messages.Error(logId, new ApplicationException(\"An exception\"), \"Error message\"); logger.Messages.Warning(logId, \"A warning\"); logger.Messages.Information(logId, \"An info message\"); logger.Messages.Debug(logId, \"A debug message\"); logger.Messages.Verbose(logId, \"A verbose message\"); Replace LOG_ID with your log ID from elmah.io ( Where is my log ID? ). To have 100% control of how the message is logged to elmah.io, you can use the CreateAndNotify -method: logger.Messages.CreateAndNotify(logId, new CreateMessage { Title = \"Hello World\", Application = \"Elmah.Io.Client sample\", Detail = \"This is a long description of the error. Maybe even a stack trace\", Severity = Severity.Error.ToString(), Data = new List<Item> { new Item {Key = \"Username\", Value = \"Man in black\"} }, Form = new List<Item> { new Item {Key = \"Password\", Value = \"SecretPassword\"}, new Item {Key = \"pwd\", Value = \"Other secret value\"}, new Item {Key = \"visible form item\", Value = \"With a value\"} } });","title":"Logging to elmah.io from C# and console applications"},{"location":"logging-to-elmah-io-from-console-application/#structured-logging","text":"Like the integrations for Serilog, NLog and, Microsoft.Extensions.Logging, the elmah.io client supports structured logging: logger.Messages.CreateAndNotify(logId, new CreateMessage { Title = \"Thomas says Hello\", TitleTemplate = \"{User} says Hello\", });","title":"Structured logging"},{"location":"logging-to-elmah-io-from-console-application/#breadcrumbs","text":"You can log one or more breadcrumbs as part of a log message. Breadcrumbs indicate steps happening just before a log message (typically an error). Breadcrumbs are supported through the Breadcrumbs property on the CreateMessage class: logger.Messages.CreateAndNotify(logId, new CreateMessage { Title = \"Oh no, an error happened\", Severity = \"Error\", Breadcrumbs = new List<Breadcrumb> { new Breadcrumb { DateTime = DateTime.UtcNow.AddSeconds(-10), Action = \"Navigation\", Message = \"Navigate from / to /signin\", Severity = \"Information\" }, new Breadcrumb { DateTime = DateTime.UtcNow.AddSeconds(-3), Action = \"Click\", Message = \"#submit\", Severity = \"Information\" }, new Breadcrumb { DateTime = DateTime.UtcNow.AddSeconds(-2), Action = \"Submit\", Message = \"#loginform\", Severity = \"Information\" }, new Breadcrumb { DateTime = DateTime.UtcNow.AddSeconds(-1), Action = \"Request\", Message = \"/save\", Severity = \"Information\" } } }); Breadcrumbs will be ordered by the DateTime field on the elmah.io API why the order you add them to the Breadcrumbs property isn't that important. Be aware that only the 10 most recent breadcrumbs and breadcrumbs with a date less than or equal to the logged message are stored. In the example above, only Information breadcrumbs are added. The Severity property accepts the same severities as on the log message itself.","title":"Breadcrumbs"},{"location":"logging-to-elmah-io-from-console-application/#events","text":"The elmah.io client supports a range of different events to help carry out common tasks.","title":"Events"},{"location":"logging-to-elmah-io-from-console-application/#onmessage","text":"To get a callback every time a new message is being logged to elmah.io, you can implement the OnMessage event. This is a great chance to decorate all log messages with a specific property or similar. logger.Messages.OnMessage += (sender, eventArgs) => { eventArgs.Message.Version = \"1.0.0\"; };","title":"OnMessage"},{"location":"logging-to-elmah-io-from-console-application/#include-source-code","text":"You can use the OnMessage event to include source code to log messages. This will require a stack trace in the Detail property with filenames and line numbers in it. There are multiple ways of including source code to log messages. In short, you will need to install the Elmah.Io.Client.Extensions.SourceCode NuGet package and call the WithSourceCodeFromPdb method in the OnMessage event handler: logger.Messages.OnMessage += (sender, eventArgs) => { eventArgs.Message.WithSourceCodeFromPdb(); }; Check out How to include source code in log messages for additional requirements to make source code show up on elmah.io. Note Including source code on log messages is available in the Elmah.Io.Client v4 package and forward.","title":"Include source code"},{"location":"logging-to-elmah-io-from-console-application/#onmessagefail","text":"Logging to elmah.io can fail if the network connection is down, if elmah.io experiences downtime, or something third. To make sure you log an error elsewhere if this happens, you can implement the OnMessageFail event: logger.Messages.OnMessageFail += (sender, eventArgs) => { System.Console.Error.WriteLine(\"Error when logging to elmah.io\"); };","title":"OnMessageFail"},{"location":"logging-to-elmah-io-from-console-application/#onmessagefilter","text":"Note The OnMessageFilter event require Elmah.Io.Client version 5.2.* or newer. One or more filters can be set up to easily ignore messages based on their messages. To set up a filter, implement the OnMessageFilter event like this: logger.Messages.OnMessageFilter += (sender, eventArgs) => { eventArgs.Filter = eventArgs.Message.Title.Contains( \"foo\", StringComparison.InvariantCultureIgnoreCase); }; This example sets the Filter property to a boolean indicating if the message should be filtered/ignored or not. In case the log message contains the word 'foo', the message will be ignored.","title":"OnMessageFilter"},{"location":"logging-to-elmah-io-from-console-application/#bulk-upload","text":"If logging many messages to elmah.io, bulk upload can be a way to optimize performance. The elmah.io client supports bulk upload using the CreateBulkAndNotify -method: logger.Messages.CreateBulkAndNotify(logId, new[] { new CreateMessage { Title = \"This is a bulk message\" }, new CreateMessage { Title = \"This is another bulk message\" }, }.ToList());","title":"Bulk upload"},{"location":"logging-to-elmah-io-from-console-application/#options","text":"The elmah.io client contains a set of default options that you can override.","title":"Options"},{"location":"logging-to-elmah-io-from-console-application/#proxy","text":"To log through a HTTP proxy, set the WebProxy property: var logger = ElmahioAPI.Create(\"API_KEY\", new ElmahIoOptions { WebProxy = new WebProxy(\"localhost\", 8888) }); A proxy needs to be specified as part of the options sent to the ElmahioAPI.Create method to make sure that the underlying HttpClient is properly initialized.","title":"Proxy"},{"location":"logging-to-elmah-io-from-console-application/#obfuscate-form-values","text":"When logging POSTs with form values, you don't want users' passwords and similar logged to elmah.io. The elmah.io client automatically filters form keys named password and pwd . Using the FormKeysToObfuscate you can tell the client to obfuscate additional form entries: var logger = ElmahioAPI.Create(\"API_KEY\"); logger.Options.FormKeysToObfuscate.Add(\"secret_key\");","title":"Obfuscate form values"},{"location":"logging-to-elmah-io-from-console-application/#full-example","text":"Here's a full example of how to catch all exceptions in a console application and log as many information as possible to elmah.io: class Program { private static IElmahioAPI elmahIo; static void Main(string[] args) { try { AppDomain.CurrentDomain.UnhandledException += (sender, e) => LogException(e.ExceptionObject as Exception); // Run some code } catch (Exception e) { LogException(e); } } private static void LogException(Exception e) { if (elmahIo == null) elmahIo = ElmahioAPI.Create(\"API_KEY\"); var baseException = e?.GetBaseException(); elmahIo.Messages.CreateAndNotify(new Guid(\"LOG_ID\"), new CreateMessage { Data = e?.ToDataList(), Detail = e?.ToString(), Hostname = Environment.MachineName, Severity = Severity.Error.ToString(), Source = baseException?.Source, Title = baseException?.Message ?? \"An error happened\", Type = baseException?.GetType().FullName, User = Environment.UserName, }); } } The code will catch all exceptions both from the catch block and exceptions reported through the UnhandledException event. You'd normally create a shared instance of the elmah.io logger, but in this example, the program will exit just after logging the exception why it doesn't matter. The UnhandledException event is implemented as a last resort to log any errors not triggering the catch block. This can be exceptions in background threads, async code, and similar.","title":"Full example"},{"location":"logging-to-elmah-io-from-corewcf/","text":"Logging to elmah.io from CoreWCF elmah.io supports CoreWCF using our integration with Microsoft.Extensions.Logging. Start by installing the Elmah.Io.Extensions.Logging NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Extensions.Logging Install-Package Elmah.Io.Extensions.Logging <PackageReference Include=\"Elmah.Io.Extensions.Logging\" Version=\"5.*\" /> paket add Elmah.Io.Extensions.Logging Configure logging as part of the configuration (typically in the Program.cs file): builder.Logging.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the id of the log ( Where is my log ID? ) where you want messages logged. CoreWCF will now send all messages logged from your application to elmah.io. CoreWCF doesn't log uncaught exceptions happening in WCF services to Microsoft.Extensions.Logging as you'd expect if coming from ASP.NET Core. To do this, you will need to add a custom error logger by including the following class: public class ElmahIoErrorHandler : IErrorHandler { private readonly ILogger<ElmahIoErrorHandler> logger; public ElmahIoErrorHandler(ILogger<ElmahIoErrorHandler> logger) { this.logger = logger; } public bool HandleError(Exception error) => false; public void ProvideFault(Exception error, MessageVersion version, ref Message fault) { if (error == null) return; logger.LogError(error, error.Message); } } The ElmahIoErrorHandler class will be called by CoreWCF when exceptions are thrown and log to the configure ILogger . To invoke the error handler, add the following service behavior: public class ElmahIoErrorBehavior : IServiceBehavior { private readonly ILogger<ElmahIoErrorHandler> logger; public ElmahIoErrorBehavior(ILogger<ElmahIoErrorHandler> logger) { this.logger = logger; } public void Validate(ServiceDescription description, ServiceHostBase serviceHostBase) { } public void AddBindingParameters(ServiceDescription description, ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection<ServiceEndpoint> endpoints, BindingParameterCollection parameters) { } public void ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase) { var errorHandler = (IErrorHandler)Activator.CreateInstance(typeof(ElmahIoErrorHandler), logger); foreach (ChannelDispatcherBase channelDispatcherBase in serviceHostBase.ChannelDispatchers) { ChannelDispatcher channelDispatcher = channelDispatcherBase as ChannelDispatcher; channelDispatcher.ErrorHandlers.Add(errorHandler); } } } The service behavior will look up the ElmahIoErrorHandler and register it with CoreWCF. The code above is hardcoded to work with the elmah.io error handler only. If you have multiple error handlers, you will need to register all of them. Finally, register the service behavior in the Program.cs file: builder.Services.AddSingleton<IServiceBehavior, ElmahIoErrorBehavior>(); Uncaught errors will now be logged to elmah.io. All of the settings from Elmah.Io.Extensions.Logging not mentioned on this page work with CoreWCF. Check out Logging to elmah.io from Microsoft.Extensions.Logging for details.","title":"Logging from CoreWCF"},{"location":"logging-to-elmah-io-from-corewcf/#logging-to-elmahio-from-corewcf","text":"elmah.io supports CoreWCF using our integration with Microsoft.Extensions.Logging. Start by installing the Elmah.Io.Extensions.Logging NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Extensions.Logging Install-Package Elmah.Io.Extensions.Logging <PackageReference Include=\"Elmah.Io.Extensions.Logging\" Version=\"5.*\" /> paket add Elmah.Io.Extensions.Logging Configure logging as part of the configuration (typically in the Program.cs file): builder.Logging.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the id of the log ( Where is my log ID? ) where you want messages logged. CoreWCF will now send all messages logged from your application to elmah.io. CoreWCF doesn't log uncaught exceptions happening in WCF services to Microsoft.Extensions.Logging as you'd expect if coming from ASP.NET Core. To do this, you will need to add a custom error logger by including the following class: public class ElmahIoErrorHandler : IErrorHandler { private readonly ILogger<ElmahIoErrorHandler> logger; public ElmahIoErrorHandler(ILogger<ElmahIoErrorHandler> logger) { this.logger = logger; } public bool HandleError(Exception error) => false; public void ProvideFault(Exception error, MessageVersion version, ref Message fault) { if (error == null) return; logger.LogError(error, error.Message); } } The ElmahIoErrorHandler class will be called by CoreWCF when exceptions are thrown and log to the configure ILogger . To invoke the error handler, add the following service behavior: public class ElmahIoErrorBehavior : IServiceBehavior { private readonly ILogger<ElmahIoErrorHandler> logger; public ElmahIoErrorBehavior(ILogger<ElmahIoErrorHandler> logger) { this.logger = logger; } public void Validate(ServiceDescription description, ServiceHostBase serviceHostBase) { } public void AddBindingParameters(ServiceDescription description, ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection<ServiceEndpoint> endpoints, BindingParameterCollection parameters) { } public void ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase) { var errorHandler = (IErrorHandler)Activator.CreateInstance(typeof(ElmahIoErrorHandler), logger); foreach (ChannelDispatcherBase channelDispatcherBase in serviceHostBase.ChannelDispatchers) { ChannelDispatcher channelDispatcher = channelDispatcherBase as ChannelDispatcher; channelDispatcher.ErrorHandlers.Add(errorHandler); } } } The service behavior will look up the ElmahIoErrorHandler and register it with CoreWCF. The code above is hardcoded to work with the elmah.io error handler only. If you have multiple error handlers, you will need to register all of them. Finally, register the service behavior in the Program.cs file: builder.Services.AddSingleton<IServiceBehavior, ElmahIoErrorBehavior>(); Uncaught errors will now be logged to elmah.io. All of the settings from Elmah.Io.Extensions.Logging not mentioned on this page work with CoreWCF. Check out Logging to elmah.io from Microsoft.Extensions.Logging for details.","title":"Logging to elmah.io from CoreWCF"},{"location":"logging-to-elmah-io-from-devexpress/","text":"Logging to elmah.io from DevExpress (eXpressApp Framework) eXpressApp Framework (XAF) is built on top of ASP.NET. Installing elmah.io corresponds to any other ASP.NET site: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io Install-Package Elmah.Io <PackageReference Include=\"Elmah.Io\" Version=\"5.*\" /> paket add Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). To verify the integration, throw a new exception in Default.aspx or similar: <body class=\"VerticalTemplate\"> <% throw new Exception(\"Test exception\"); %> <form id=\"form2\" runat=\"server\"> <!-- ... --> </form> </body> Launch the project and see the test exception flow into elmah.io.","title":"Logging from DevExpress (eXpressApp Framework)"},{"location":"logging-to-elmah-io-from-devexpress/#logging-to-elmahio-from-devexpress-expressapp-framework","text":"eXpressApp Framework (XAF) is built on top of ASP.NET. Installing elmah.io corresponds to any other ASP.NET site: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io Install-Package Elmah.Io <PackageReference Include=\"Elmah.Io\" Version=\"5.*\" /> paket add Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). To verify the integration, throw a new exception in Default.aspx or similar: <body class=\"VerticalTemplate\"> <% throw new Exception(\"Test exception\"); %> <form id=\"form2\" runat=\"server\"> <!-- ... --> </form> </body> Launch the project and see the test exception flow into elmah.io.","title":"Logging to elmah.io from DevExpress (eXpressApp Framework)"},{"location":"logging-to-elmah-io-from-elmah/","text":"Logging to elmah.io from ASP.NET / WebForms This article will explain the steps necessary to log errors from your web application into elmah.io. We also offer more specific guides on ASP.NET MVC , Web API , and a lot of other web- and logging-frameworks. Read through this tutorial and head over to a tutorial specific for your choice of framework afterwards. This guide is also available as a short video tutorial here: Create a new ASP.NET Web Application in Visual Studio : Select a project template of your choice: Navigate to elmah.io and login using username/password or your favorite social provider. When logged in, elmah.io redirects you to the dashboard. If you just signed up, you will be guided through the process of creating an organization and a log. When the log has been created, elmah.io shows you the install instructions. If you are currently on the dashboard, click the gears icon on the lower right corner of the log box. Don't pay too much attention to the install steps, because the rest of this tutorial will guide you through the installation. Keep the page open in order to copy your API key and log ID at a later step: Navigate back to your web project, right click References and select Manage NuGet Packages : In the NuGet dialog, search for elmah.io: Select the elmah.io package and click Install . Input your API key and log ID in the dialog appearing during installation of the NuGet package: You're ready to rock and roll. Either add throw new Exception(\"Test\"); somewhere or hit F5 and input a URL you know doesn't exist (like http://localhost:64987/notfound). To verify that the installation of elmah.io is successful, navigate back to the elmah.io dashboard and select the Search tab of your newly created log: Congrats! Every error on your application is now logged to elmah.io.","title":"Logging from WebForms"},{"location":"logging-to-elmah-io-from-elmah/#logging-to-elmahio-from-aspnet-webforms","text":"This article will explain the steps necessary to log errors from your web application into elmah.io. We also offer more specific guides on ASP.NET MVC , Web API , and a lot of other web- and logging-frameworks. Read through this tutorial and head over to a tutorial specific for your choice of framework afterwards. This guide is also available as a short video tutorial here: Create a new ASP.NET Web Application in Visual Studio : Select a project template of your choice: Navigate to elmah.io and login using username/password or your favorite social provider. When logged in, elmah.io redirects you to the dashboard. If you just signed up, you will be guided through the process of creating an organization and a log. When the log has been created, elmah.io shows you the install instructions. If you are currently on the dashboard, click the gears icon on the lower right corner of the log box. Don't pay too much attention to the install steps, because the rest of this tutorial will guide you through the installation. Keep the page open in order to copy your API key and log ID at a later step: Navigate back to your web project, right click References and select Manage NuGet Packages : In the NuGet dialog, search for elmah.io: Select the elmah.io package and click Install . Input your API key and log ID in the dialog appearing during installation of the NuGet package: You're ready to rock and roll. Either add throw new Exception(\"Test\"); somewhere or hit F5 and input a URL you know doesn't exist (like http://localhost:64987/notfound). To verify that the installation of elmah.io is successful, navigate back to the elmah.io dashboard and select the Search tab of your newly created log: Congrats! Every error on your application is now logged to elmah.io.","title":"Logging to elmah.io from ASP.NET / WebForms"},{"location":"logging-to-elmah-io-from-entity-framework-core/","text":"Logging to elmah.io from Entity Framework Core Both elmah.io and Entity Framework Core supports logging through Microsoft.Extensions.Logging. To log all errors happening inside Entity Framework Core, install the Elmah.Io.Extensions.Logging NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Extensions.Logging Install-Package Elmah.Io.Extensions.Logging <PackageReference Include=\"Elmah.Io.Extensions.Logging\" Version=\"5.*\" /> paket add Elmah.Io.Extensions.Logging Then add elmah.io to a new or existing LoggerFactory : var loggerFactory = new LoggerFactory() .AddElmahIo(\"API_KEY\", new Guid(\"LOG_ID\")); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the log ID ( Where is my log ID? ) that should receive errors from Entity Framework. Note When using Entity Framework Core from ASP.NET Core, you never create a LoggerFactory . Factories are provided through DI by ASP.NET Core. Check out this sample for details. Finally, enable logging in Entity Framework Core: optionsBuilder .UseLoggerFactory(loggerFactory) .UseSqlServer(/*...*/); ( UseSqlServer included for illustration purposes only - elmah.io works with any provider) That's it! All errors happening in Entity Framework Core, are now logged in elmah.io. Logging from interceptors Interceptors in Entity Framework are hooks/events that you can implement to get notified when different actions happen towards your database. Interceptors can be used for a range of tasks like maintaining created/modified dates, calculating fields on save, logging, and many more. To illustrate how interceptors can be used to enrich elmah.io with custom log messages, the following code shows how to create a simple audit log of creating new users in the database. The code for the interceptor could look similar to this: public class SaveUsersAuditLog : SaveChangesInterceptor { private readonly ILogger<SaveUsersAuditLog> logger; public SaveUsersAuditLog(ILogger<SaveUsersAuditLog> logger) { this.logger = logger; } public override int SavedChanges(SaveChangesCompletedEventData eventData, int result) { var dbContext = eventData.Context; foreach (var entry in dbContext .ChangeTracker .Entries<User>() .Where(user => user.State == EntityState.Added)) { using (logger.BeginScope(new Dictionary<string, object> { { \"DebugView\", entry.DebugView.LongView } })) { logger.LogInformation(\"Adding user with {UserId}\", entry.Entity.Id); } } return base.SavedChanges(eventData, result); } } The class extends SaveChangesIntercepter and overrides the SavedChanges method. This will be called by Entity Framework when entities are saved to the database. By filtering on the entity state Added , you can log a custom message for all new users added to the database. In the example, the message Adding user with {UserId} is logged and the value of the Id property is used as part of the structured log message. In addition, the code uses scopes in Microsoft.Extensions.Logging to log an additional property named DebugView with the long debug message provided by Entity Framework. This key/value will show up on the Data tab within the elmah.io UI. Warning Be careful when logging entities that may contain personal identifiable data (PID). Adding debug messages from Entity Framework will contain this PID and share it with elmah.io. Registering interceptors varies by the way you set up Entity Framework. Following the code in the first parts of this page, you can create a logger and register the interceptor like this: var logger = loggerFactory.CreateLogger<SaveUsersAuditLog>(); optionsBuilder.AddInterceptors(new SaveUsersAuditLog(logger));","title":"Logging from Entity Framework Core"},{"location":"logging-to-elmah-io-from-entity-framework-core/#logging-to-elmahio-from-entity-framework-core","text":"Both elmah.io and Entity Framework Core supports logging through Microsoft.Extensions.Logging. To log all errors happening inside Entity Framework Core, install the Elmah.Io.Extensions.Logging NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Extensions.Logging Install-Package Elmah.Io.Extensions.Logging <PackageReference Include=\"Elmah.Io.Extensions.Logging\" Version=\"5.*\" /> paket add Elmah.Io.Extensions.Logging Then add elmah.io to a new or existing LoggerFactory : var loggerFactory = new LoggerFactory() .AddElmahIo(\"API_KEY\", new Guid(\"LOG_ID\")); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the log ID ( Where is my log ID? ) that should receive errors from Entity Framework. Note When using Entity Framework Core from ASP.NET Core, you never create a LoggerFactory . Factories are provided through DI by ASP.NET Core. Check out this sample for details. Finally, enable logging in Entity Framework Core: optionsBuilder .UseLoggerFactory(loggerFactory) .UseSqlServer(/*...*/); ( UseSqlServer included for illustration purposes only - elmah.io works with any provider) That's it! All errors happening in Entity Framework Core, are now logged in elmah.io.","title":"Logging to elmah.io from Entity Framework Core"},{"location":"logging-to-elmah-io-from-entity-framework-core/#logging-from-interceptors","text":"Interceptors in Entity Framework are hooks/events that you can implement to get notified when different actions happen towards your database. Interceptors can be used for a range of tasks like maintaining created/modified dates, calculating fields on save, logging, and many more. To illustrate how interceptors can be used to enrich elmah.io with custom log messages, the following code shows how to create a simple audit log of creating new users in the database. The code for the interceptor could look similar to this: public class SaveUsersAuditLog : SaveChangesInterceptor { private readonly ILogger<SaveUsersAuditLog> logger; public SaveUsersAuditLog(ILogger<SaveUsersAuditLog> logger) { this.logger = logger; } public override int SavedChanges(SaveChangesCompletedEventData eventData, int result) { var dbContext = eventData.Context; foreach (var entry in dbContext .ChangeTracker .Entries<User>() .Where(user => user.State == EntityState.Added)) { using (logger.BeginScope(new Dictionary<string, object> { { \"DebugView\", entry.DebugView.LongView } })) { logger.LogInformation(\"Adding user with {UserId}\", entry.Entity.Id); } } return base.SavedChanges(eventData, result); } } The class extends SaveChangesIntercepter and overrides the SavedChanges method. This will be called by Entity Framework when entities are saved to the database. By filtering on the entity state Added , you can log a custom message for all new users added to the database. In the example, the message Adding user with {UserId} is logged and the value of the Id property is used as part of the structured log message. In addition, the code uses scopes in Microsoft.Extensions.Logging to log an additional property named DebugView with the long debug message provided by Entity Framework. This key/value will show up on the Data tab within the elmah.io UI. Warning Be careful when logging entities that may contain personal identifiable data (PID). Adding debug messages from Entity Framework will contain this PID and share it with elmah.io. Registering interceptors varies by the way you set up Entity Framework. Following the code in the first parts of this page, you can create a logger and register the interceptor like this: var logger = loggerFactory.CreateLogger<SaveUsersAuditLog>(); optionsBuilder.AddInterceptors(new SaveUsersAuditLog(logger));","title":"Logging from interceptors"},{"location":"logging-to-elmah-io-from-google-cloud-functions/","text":"Logging to elmah.io from Google Cloud Functions Logging to elmah.io from Google Cloud Functions uses our integration with Microsoft.Extensions.Logging . To start logging, install the Elmah.Io.Extensions.Logging NuGet package through the Cloud Shell or locally: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Extensions.Logging Install-Package Elmah.Io.Extensions.Logging <PackageReference Include=\"Elmah.Io.Extensions.Logging\" Version=\"5.*\" /> paket add Elmah.Io.Extensions.Logging In the root of your Function app create a new file named Startup.cs : public class Startup : FunctionsStartup { public override void ConfigureServices(WebHostBuilderContext ctx, IServiceCollection services) { services.AddLogging(logging => { logging.AddElmahIo(o => { o.ApiKey = \"API_KEY\"; o.LogId = new Guid(\"LOG_ID\"); }); logging.AddFilter<ElmahIoLoggerProvider>(null, LogLevel.Warning); }); } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the ID of the log to store messages in ( Where is my log ID? ). The filter tells Google Cloud Functions to log warnings and above to elmah.io only. If you want to log detailed information about what goes on inside Google Cloud Functions, you can lower the log level. Decorate your function with a FunctionsStartup attribute: [FunctionsStartup(typeof(Startup))] public class Function : IHttpFunction { // ... } All uncaught exceptions happening in your function as well as log messages sent from Google Cloud Functions are now stored in elmah.io. To log messages manually, you can inject an ILogger in your function: public class Function : IHttpFunction { private ILogger<Function> _logger; public Function(ILogger<Function> logger) { _logger = logger; } // ... } Then log messages using the injected logger: _logger.LogWarning(\"Your log message goes here\");","title":"Logging from Google Cloud Functions"},{"location":"logging-to-elmah-io-from-google-cloud-functions/#logging-to-elmahio-from-google-cloud-functions","text":"Logging to elmah.io from Google Cloud Functions uses our integration with Microsoft.Extensions.Logging . To start logging, install the Elmah.Io.Extensions.Logging NuGet package through the Cloud Shell or locally: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Extensions.Logging Install-Package Elmah.Io.Extensions.Logging <PackageReference Include=\"Elmah.Io.Extensions.Logging\" Version=\"5.*\" /> paket add Elmah.Io.Extensions.Logging In the root of your Function app create a new file named Startup.cs : public class Startup : FunctionsStartup { public override void ConfigureServices(WebHostBuilderContext ctx, IServiceCollection services) { services.AddLogging(logging => { logging.AddElmahIo(o => { o.ApiKey = \"API_KEY\"; o.LogId = new Guid(\"LOG_ID\"); }); logging.AddFilter<ElmahIoLoggerProvider>(null, LogLevel.Warning); }); } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the ID of the log to store messages in ( Where is my log ID? ). The filter tells Google Cloud Functions to log warnings and above to elmah.io only. If you want to log detailed information about what goes on inside Google Cloud Functions, you can lower the log level. Decorate your function with a FunctionsStartup attribute: [FunctionsStartup(typeof(Startup))] public class Function : IHttpFunction { // ... } All uncaught exceptions happening in your function as well as log messages sent from Google Cloud Functions are now stored in elmah.io. To log messages manually, you can inject an ILogger in your function: public class Function : IHttpFunction { private ILogger<Function> _logger; public Function(ILogger<Function> logger) { _logger = logger; } // ... } Then log messages using the injected logger: _logger.LogWarning(\"Your log message goes here\");","title":"Logging to elmah.io from Google Cloud Functions"},{"location":"logging-to-elmah-io-from-httpclient/","text":"Logging to elmah.io from HttpClient When using the HttpClient class to make HTTP requests, log messages will be automatically published to any ILogger registered in your application. All requests will cause 4 log messages to be produced in your elmah.io log if you have Information logging enabled. While some prefer to have an extended level of log messages produced, others might want just a single log message per request or only log failing requests. This can be done by implementing a custom logger for HttpClient : public class HttpClientLogger : IHttpClientLogger { private readonly ILogger<HttpClientLogger> _logger; public HttpClientLogger(ILogger<HttpClientLogger> logger) { _logger = logger; } public object? LogRequestStart(HttpRequestMessage request) { // We only log when there's a response or an error in this example. return null; } public void LogRequestStop( object? context, HttpRequestMessage request, HttpResponseMessage response, TimeSpan elapsed) { _logger.LogInformation( \"HttpClient made a {method} request to {url} and received {statusCode}\", request.Method, request.RequestUri, (int?)response.StatusCode); } public void LogRequestFailed( object? context, HttpRequestMessage request, HttpResponseMessage? response, Exception exception, TimeSpan elapsed) { _logger.LogError( exception, \"HttpClient made a failing {method} request to {url} and received {statusCode}\", request.Method, request.RequestUri, (int?)response?.StatusCode); } } The HttpClientLogger class implements the IHttpClientLogger interface. Three hooks are provided as part of this interface: request starting, request stopping, and request failing. In the code above, we create a single Information message when a response is received and a single Error message in case of an error. By using structured properties like {method} and {statusCode} we make sure that elmah.io shows these pieces of data in the right fields. The format and wording of each log message can be tailored to your preference. Registering the custom logger can be done like this: builder .Services .AddHttpClient(\"myclient\") .RemoveAllLoggers() .AddLogger<HttpClientLogger>(); This example registers a new HttpClient named myclient . By calling the RemoveAllLoggers method we make sure that the four default log messages are not logged. In the last line, the HttpClientLogger class that we implemented is set as the logger for this HttpClient .","title":"Logging from HttpClient"},{"location":"logging-to-elmah-io-from-httpclient/#logging-to-elmahio-from-httpclient","text":"When using the HttpClient class to make HTTP requests, log messages will be automatically published to any ILogger registered in your application. All requests will cause 4 log messages to be produced in your elmah.io log if you have Information logging enabled. While some prefer to have an extended level of log messages produced, others might want just a single log message per request or only log failing requests. This can be done by implementing a custom logger for HttpClient : public class HttpClientLogger : IHttpClientLogger { private readonly ILogger<HttpClientLogger> _logger; public HttpClientLogger(ILogger<HttpClientLogger> logger) { _logger = logger; } public object? LogRequestStart(HttpRequestMessage request) { // We only log when there's a response or an error in this example. return null; } public void LogRequestStop( object? context, HttpRequestMessage request, HttpResponseMessage response, TimeSpan elapsed) { _logger.LogInformation( \"HttpClient made a {method} request to {url} and received {statusCode}\", request.Method, request.RequestUri, (int?)response.StatusCode); } public void LogRequestFailed( object? context, HttpRequestMessage request, HttpResponseMessage? response, Exception exception, TimeSpan elapsed) { _logger.LogError( exception, \"HttpClient made a failing {method} request to {url} and received {statusCode}\", request.Method, request.RequestUri, (int?)response?.StatusCode); } } The HttpClientLogger class implements the IHttpClientLogger interface. Three hooks are provided as part of this interface: request starting, request stopping, and request failing. In the code above, we create a single Information message when a response is received and a single Error message in case of an error. By using structured properties like {method} and {statusCode} we make sure that elmah.io shows these pieces of data in the right fields. The format and wording of each log message can be tailored to your preference. Registering the custom logger can be done like this: builder .Services .AddHttpClient(\"myclient\") .RemoveAllLoggers() .AddLogger<HttpClientLogger>(); This example registers a new HttpClient named myclient . By calling the RemoveAllLoggers method we make sure that the four default log messages are not logged. In the last line, the HttpClientLogger class that we implemented is set as the logger for this HttpClient .","title":"Logging to elmah.io from HttpClient"},{"location":"logging-to-elmah-io-from-isolated-azure-functions/","text":"Logging to elmah.io from Isolated Azure Functions Logging to elmah.io from Isolated Azure Functions Configuration Application name Message hooks Decorating log messages Include source code Handle errors Error filtering API key and log ID in settings Logging through ILogger Log filtering Isolated Azure Functions Troubleshooting Exceptions in Program.cs are not logged Logging errors from Isolated Azure Functions requires only a few lines of code. We've created clients specifically for Isolated Azure Functions. If your are looking for logging from Azure Functions (in process) check out Logging to elmah.io from Azure Functions . Install the Elmah.Io.Functions.Isolated package in your project to get started: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Functions.Isolated Install-Package Elmah.Io.Functions.Isolated <PackageReference Include=\"Elmah.Io.Functions.Isolated\" Version=\"5.*\" /> paket add Elmah.Io.Functions.Isolated Include a using of the Elmah.Io.Functions.Isolated namespace in the Program.cs file: using Elmah.Io.Functions.Isolated; Elmah.Io.Functions.Isolated can be configured using both IHostBuilder and IHostApplicatiobBuilder (.NET 9). Select your desired approach below: IHostBuilder IHostApplicationBuilder Next, call the AddElmahIo method inside ConfigureFunctionsWorkerDefaults : .ConfigureFunctionsWorkerDefaults((context, app) => { app.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); }) Next, call the AddElmahIo method: builder.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); elmah.io now automatically identifies any uncaught exceptions and logs them to the specified log. Check out the samples for more ways to configure elmah.io. Configuration Application name To set the application name on all errors, set the Application property: .AddElmahIo(options => { // ... options.Application = \"MyFunction\"; }); Message hooks Elmah.Io.Functions.Isolated provide message hooks similar to the integrations with ASP.NET and ASP.NET Core. Decorating log messages To include additional information on log messages, you can use the OnMessage action: .AddElmahIo(options => { // ... options.OnMessage = msg => { msg.Version = \"1.0.0\"; }; }); The example above includes a version number on all errors. Include source code You can use the OnMessage action to include source code to log messages. This will require a stack trace in the Detail property with filenames and line numbers in it. There are multiple ways of including source code to log messages. In short, you will need to install the Elmah.Io.Client.Extensions.SourceCode NuGet package and call the WithSourceCodeFromPdb method in the OnMessage action: .AddElmahIo(options => { // ... options.OnMessage = msg => { msg.WithSourceCodeFromPdb(); }; }); Check out How to include source code in log messages for additional requirements to make source code show up on elmah.io. Handle errors To handle any errors happening while processing a log message, you can use the OnError action: .AddElmahIo(options => { // ... options.OnError = (msg, ex) => { logger.LogError(ex, ex.Message); }; }); The example above logs any errors during communication with elmah.io to a local log. Error filtering To ignore specific errors based on their content, you can use the OnFilter action: .AddElmahIo(options => { // ... options.OnFilter = msg => { return msg.Method == \"GET\"; }; }); The example above ignores any errors generated during an HTTP GET request. API key and log ID in settings In the examples above, the API key and log ID are hardcoded in C#. You typically want to define these in a settings file, environment variable, Azure settings, or similar. The simplest way to do this is to load the values through IConfiguration : IHostBuilder IHostApplicationBuilder var host = new HostBuilder() .ConfigureFunctionsWorkerDefaults((context, app) => { var config = context.Configuration; var logId = new Guid(config[\"logId\"]); var apiKey = config[\"apiKey\"]; app.AddElmahIo(options => { options.ApiKey = apiKey; options.LogId = logId; }); // ... }) .Build(); var apiKey = builder.Configuration[\"apiKey\"]; var logId = builder.Configuration[\"logId\"]; builder.AddElmahIo(options => { options.ApiKey = apiKey; options.LogId = new Guid(logId); }); You need to specify the logId and apiKey variables in the local.settings.json file as well as the place you use to declare config variables on the environments you publish the function app to: { \"Values\": { \"apiKey\": \"API_KEY\", \"logId\": \"LOG_ID\" } } As an alternative, you can define all elmah.io configuration in a separate object in the local.settings.json file you may already know from the appsettings.json file in ASP.NET Core: { \"Values\": { }, \"ElmahIo\": { \"ApiKey\": \"API_KEY\", \"LogId\": \"LOG_ID\" } } Loading values from a separate object like this requires custom code in the Program.cs file since only variables inside the Values object are automatically loaded by the runtime: IHostBuilder IHostApplicationBuilder var host = new HostBuilder() .ConfigureAppConfiguration(c => { c.SetBasePath(Directory.GetCurrentDirectory()); #if DEBUG c.AddJsonFile(\"local.settings.json\"); #endif c.AddEnvironmentVariables(); }) .ConfigureFunctionsWorkerDefaults((context, app) => { app.Services.Configure<ElmahIoFunctionOptions>(context.Configuration.GetSection(\"ElmahIo\")); app.AddElmahIo(); }) .Build(); builder.Configuration.SetBasePath(Directory.GetCurrentDirectory()); #if DEBUG builder.Configuration.AddJsonFile(\"local.settings.json\"); #endif builder.Configuration.AddEnvironmentVariables(); // ... builder.Services.Configure<ElmahIoFunctionOptions>(builder.Configuration.GetSection(\"ElmahIo\")); builder.AddElmahIo(); In this example, configuration from the local.settings.json file is loaded. Rather than specifying options to the AddElmahIo method, we load the entire ElmahIo section from the config file. When published to a test or production environment, you will need to provide the ElmahIo object in the configuration system provided by the environment. For Azure, you would specify environment variables with a key looking like this: ElmahIo:ApiKey Please note that specifying options like an application name or using hooks is still possible by providing options for the AddElmahIo method. When the API key and log ID are loaded from the config file, you don't need to specify them again. Logging through ILogger Isolated Azure Functions can log through Microsoft.Extensions.Logging (MEL) too. When configuring your Function app to log through MEL, custom messages can be logged through the ILogger interface. Furthermore, you will get detailed log messages from within the Function host. To set this up, install the Elmah.Io.Extensions.Logging NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Extensions.Logging Install-Package Elmah.Io.Extensions.Logging <PackageReference Include=\"Elmah.Io.Extensions.Logging\" Version=\"5.*\" /> paket add Elmah.Io.Extensions.Logging Then extend your Program.cs file like this: IHostBuilder IHostApplicationBuilder var host = new HostBuilder() // ... .ConfigureLogging(logging => { logging.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); logging.AddFilter<ElmahIoLoggerProvider>(null, LogLevel.Warning); }) // ... .Build(); builder.Logging.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); builder.Logging.AddFilter<ElmahIoLoggerProvider>(null, LogLevel.Warning); In the example, only warning messages and above are logged to elmah.io. You can remove the filter or set another log level if you want to log more. Jump to Log filtering to learn how to configure filters from config. Either inject an ILogger<> : public class MyFunction { private readonly ILogger<MyFunction> logger; public MyFunction(ILogger<MyFunction> logger) { this.logger = logger; } public static void Run([TimerTrigger(\"...\")]TimerInfo myTimer) { logger.LogWarning(\"This is a warning\"); } } Or inject an ILoggerFactory and create a logger: public class MyFunction { private readonly ILogger<MyFunction> logger; public Function1(ILoggerFactory loggerFactory) { this.logger = loggerFactory.CreateLogger<MyFunction>(); } public void Run([TimerTrigger(\"...\")]TimerInfo myTimer) { logger.LogWarning(\"This is a warning\"); } } Log filtering The code above filters out all log messages with a severity lower than Warning . You can use all of the log filtering capabilities of Microsoft.Extensions.Logging to enable and disable various log levels from multiple categories. A common requirement is to only log Warning and more severe originating from the Azure Functions runtime, but log Information messages from your function code. This can be enabled by logging as normal in the function: namespace MyNamespace { public class MyFunction { private readonly ILogger<MyFunction> logger; public Function1(ILogger<MyFunction> logger) { this.logger = logger; } public void Run([TimerTrigger(\"...\")]TimerInfo myTimer) { logger.LogInformation(\"This is an information message\"); } } } The generic MyFunction logger will create a logger with a category name of the function class including the namespace. You can configure this in the settings file: { // ... \"Logging\": { \"LogLevel\": { \"Default\": \"Warning\", \"MyNamespace.MyFunction\": \"Information\" } } } In previous versions of Azure Functions you would use the host.json file for log configuration. The host.json file is dedicated for configuration of the host and since Isolated Functions are running in a process separate from the host, you will need a new file. Create a file named appsettings.json and include the JSON configuration from the previous example. Next, change the Build Action to Content and Copy to Output Directory to Copy if newer in the properties of the appsettings.json file. Finally, include the following code in the Program.cs file to have the Logging section loaded by the Isolated Function process: IHostBuilder IHostApplicationBuilder var host = new HostBuilder() .ConfigureFunctionsWorkerDefaults((context, app) => { // ... }) .ConfigureAppConfiguration((hostContext, config) => { // This adds the appsettings.json file to the global configuration config.AddJsonFile(\"appsettings.json\", optional: true); }) .ConfigureLogging((hostingContext, logging) => { // This configured the logger to pull settings from the Logging part of appsettings.json logging.AddConfiguration(hostingContext.Configuration.GetSection(\"Logging\")); }) .Build(); builder.Configuration.AddJsonFile(\"appsettings.json\", optional: true); builder.Logging.AddConfiguration(builder.Configuration.GetSection(\"Logging\")); Isolated Azure Functions Troubleshooting Exceptions in Program.cs are not logged Unfortunately, Azure Functions doesn't send exceptions happening in initialization code to the configured loggers. The only solution is to wrap your code in try/catch : IHostBuilder IHostApplicationBuilder try { var host = new HostBuilder() .ConfigureFunctionsWorkerDefaults((context, app) => { app.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); }) .Build(); host.Run(); } catch (Exception e) { Console.Error.WriteLine(e); throw; } try { var builder = FunctionsApplication.CreateBuilder(args); builder.ConfigureFunctionsWebApplication(); builder.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); await builder.Build().RunAsync(); } catch (Exception e) { Console.Error.WriteLine(e); throw; } Next, go to the Log stream page on the Azure portal and inspect any errors logged.","title":"Logging from Isolated Azure Functions"},{"location":"logging-to-elmah-io-from-isolated-azure-functions/#logging-to-elmahio-from-isolated-azure-functions","text":"Logging to elmah.io from Isolated Azure Functions Configuration Application name Message hooks Decorating log messages Include source code Handle errors Error filtering API key and log ID in settings Logging through ILogger Log filtering Isolated Azure Functions Troubleshooting Exceptions in Program.cs are not logged Logging errors from Isolated Azure Functions requires only a few lines of code. We've created clients specifically for Isolated Azure Functions. If your are looking for logging from Azure Functions (in process) check out Logging to elmah.io from Azure Functions . Install the Elmah.Io.Functions.Isolated package in your project to get started: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Functions.Isolated Install-Package Elmah.Io.Functions.Isolated <PackageReference Include=\"Elmah.Io.Functions.Isolated\" Version=\"5.*\" /> paket add Elmah.Io.Functions.Isolated Include a using of the Elmah.Io.Functions.Isolated namespace in the Program.cs file: using Elmah.Io.Functions.Isolated; Elmah.Io.Functions.Isolated can be configured using both IHostBuilder and IHostApplicatiobBuilder (.NET 9). Select your desired approach below: IHostBuilder IHostApplicationBuilder Next, call the AddElmahIo method inside ConfigureFunctionsWorkerDefaults : .ConfigureFunctionsWorkerDefaults((context, app) => { app.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); }) Next, call the AddElmahIo method: builder.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); elmah.io now automatically identifies any uncaught exceptions and logs them to the specified log. Check out the samples for more ways to configure elmah.io.","title":"Logging to elmah.io from Isolated Azure Functions"},{"location":"logging-to-elmah-io-from-isolated-azure-functions/#configuration","text":"","title":"Configuration"},{"location":"logging-to-elmah-io-from-isolated-azure-functions/#application-name","text":"To set the application name on all errors, set the Application property: .AddElmahIo(options => { // ... options.Application = \"MyFunction\"; });","title":"Application name"},{"location":"logging-to-elmah-io-from-isolated-azure-functions/#message-hooks","text":"Elmah.Io.Functions.Isolated provide message hooks similar to the integrations with ASP.NET and ASP.NET Core.","title":"Message hooks"},{"location":"logging-to-elmah-io-from-isolated-azure-functions/#decorating-log-messages","text":"To include additional information on log messages, you can use the OnMessage action: .AddElmahIo(options => { // ... options.OnMessage = msg => { msg.Version = \"1.0.0\"; }; }); The example above includes a version number on all errors.","title":"Decorating log messages"},{"location":"logging-to-elmah-io-from-isolated-azure-functions/#include-source-code","text":"You can use the OnMessage action to include source code to log messages. This will require a stack trace in the Detail property with filenames and line numbers in it. There are multiple ways of including source code to log messages. In short, you will need to install the Elmah.Io.Client.Extensions.SourceCode NuGet package and call the WithSourceCodeFromPdb method in the OnMessage action: .AddElmahIo(options => { // ... options.OnMessage = msg => { msg.WithSourceCodeFromPdb(); }; }); Check out How to include source code in log messages for additional requirements to make source code show up on elmah.io.","title":"Include source code"},{"location":"logging-to-elmah-io-from-isolated-azure-functions/#handle-errors","text":"To handle any errors happening while processing a log message, you can use the OnError action: .AddElmahIo(options => { // ... options.OnError = (msg, ex) => { logger.LogError(ex, ex.Message); }; }); The example above logs any errors during communication with elmah.io to a local log.","title":"Handle errors"},{"location":"logging-to-elmah-io-from-isolated-azure-functions/#error-filtering","text":"To ignore specific errors based on their content, you can use the OnFilter action: .AddElmahIo(options => { // ... options.OnFilter = msg => { return msg.Method == \"GET\"; }; }); The example above ignores any errors generated during an HTTP GET request.","title":"Error filtering"},{"location":"logging-to-elmah-io-from-isolated-azure-functions/#api-key-and-log-id-in-settings","text":"In the examples above, the API key and log ID are hardcoded in C#. You typically want to define these in a settings file, environment variable, Azure settings, or similar. The simplest way to do this is to load the values through IConfiguration : IHostBuilder IHostApplicationBuilder var host = new HostBuilder() .ConfigureFunctionsWorkerDefaults((context, app) => { var config = context.Configuration; var logId = new Guid(config[\"logId\"]); var apiKey = config[\"apiKey\"]; app.AddElmahIo(options => { options.ApiKey = apiKey; options.LogId = logId; }); // ... }) .Build(); var apiKey = builder.Configuration[\"apiKey\"]; var logId = builder.Configuration[\"logId\"]; builder.AddElmahIo(options => { options.ApiKey = apiKey; options.LogId = new Guid(logId); }); You need to specify the logId and apiKey variables in the local.settings.json file as well as the place you use to declare config variables on the environments you publish the function app to: { \"Values\": { \"apiKey\": \"API_KEY\", \"logId\": \"LOG_ID\" } } As an alternative, you can define all elmah.io configuration in a separate object in the local.settings.json file you may already know from the appsettings.json file in ASP.NET Core: { \"Values\": { }, \"ElmahIo\": { \"ApiKey\": \"API_KEY\", \"LogId\": \"LOG_ID\" } } Loading values from a separate object like this requires custom code in the Program.cs file since only variables inside the Values object are automatically loaded by the runtime: IHostBuilder IHostApplicationBuilder var host = new HostBuilder() .ConfigureAppConfiguration(c => { c.SetBasePath(Directory.GetCurrentDirectory()); #if DEBUG c.AddJsonFile(\"local.settings.json\"); #endif c.AddEnvironmentVariables(); }) .ConfigureFunctionsWorkerDefaults((context, app) => { app.Services.Configure<ElmahIoFunctionOptions>(context.Configuration.GetSection(\"ElmahIo\")); app.AddElmahIo(); }) .Build(); builder.Configuration.SetBasePath(Directory.GetCurrentDirectory()); #if DEBUG builder.Configuration.AddJsonFile(\"local.settings.json\"); #endif builder.Configuration.AddEnvironmentVariables(); // ... builder.Services.Configure<ElmahIoFunctionOptions>(builder.Configuration.GetSection(\"ElmahIo\")); builder.AddElmahIo(); In this example, configuration from the local.settings.json file is loaded. Rather than specifying options to the AddElmahIo method, we load the entire ElmahIo section from the config file. When published to a test or production environment, you will need to provide the ElmahIo object in the configuration system provided by the environment. For Azure, you would specify environment variables with a key looking like this: ElmahIo:ApiKey Please note that specifying options like an application name or using hooks is still possible by providing options for the AddElmahIo method. When the API key and log ID are loaded from the config file, you don't need to specify them again.","title":"API key and log ID in settings"},{"location":"logging-to-elmah-io-from-isolated-azure-functions/#logging-through-ilogger","text":"Isolated Azure Functions can log through Microsoft.Extensions.Logging (MEL) too. When configuring your Function app to log through MEL, custom messages can be logged through the ILogger interface. Furthermore, you will get detailed log messages from within the Function host. To set this up, install the Elmah.Io.Extensions.Logging NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Extensions.Logging Install-Package Elmah.Io.Extensions.Logging <PackageReference Include=\"Elmah.Io.Extensions.Logging\" Version=\"5.*\" /> paket add Elmah.Io.Extensions.Logging Then extend your Program.cs file like this: IHostBuilder IHostApplicationBuilder var host = new HostBuilder() // ... .ConfigureLogging(logging => { logging.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); logging.AddFilter<ElmahIoLoggerProvider>(null, LogLevel.Warning); }) // ... .Build(); builder.Logging.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); builder.Logging.AddFilter<ElmahIoLoggerProvider>(null, LogLevel.Warning); In the example, only warning messages and above are logged to elmah.io. You can remove the filter or set another log level if you want to log more. Jump to Log filtering to learn how to configure filters from config. Either inject an ILogger<> : public class MyFunction { private readonly ILogger<MyFunction> logger; public MyFunction(ILogger<MyFunction> logger) { this.logger = logger; } public static void Run([TimerTrigger(\"...\")]TimerInfo myTimer) { logger.LogWarning(\"This is a warning\"); } } Or inject an ILoggerFactory and create a logger: public class MyFunction { private readonly ILogger<MyFunction> logger; public Function1(ILoggerFactory loggerFactory) { this.logger = loggerFactory.CreateLogger<MyFunction>(); } public void Run([TimerTrigger(\"...\")]TimerInfo myTimer) { logger.LogWarning(\"This is a warning\"); } }","title":"Logging through ILogger"},{"location":"logging-to-elmah-io-from-isolated-azure-functions/#log-filtering","text":"The code above filters out all log messages with a severity lower than Warning . You can use all of the log filtering capabilities of Microsoft.Extensions.Logging to enable and disable various log levels from multiple categories. A common requirement is to only log Warning and more severe originating from the Azure Functions runtime, but log Information messages from your function code. This can be enabled by logging as normal in the function: namespace MyNamespace { public class MyFunction { private readonly ILogger<MyFunction> logger; public Function1(ILogger<MyFunction> logger) { this.logger = logger; } public void Run([TimerTrigger(\"...\")]TimerInfo myTimer) { logger.LogInformation(\"This is an information message\"); } } } The generic MyFunction logger will create a logger with a category name of the function class including the namespace. You can configure this in the settings file: { // ... \"Logging\": { \"LogLevel\": { \"Default\": \"Warning\", \"MyNamespace.MyFunction\": \"Information\" } } } In previous versions of Azure Functions you would use the host.json file for log configuration. The host.json file is dedicated for configuration of the host and since Isolated Functions are running in a process separate from the host, you will need a new file. Create a file named appsettings.json and include the JSON configuration from the previous example. Next, change the Build Action to Content and Copy to Output Directory to Copy if newer in the properties of the appsettings.json file. Finally, include the following code in the Program.cs file to have the Logging section loaded by the Isolated Function process: IHostBuilder IHostApplicationBuilder var host = new HostBuilder() .ConfigureFunctionsWorkerDefaults((context, app) => { // ... }) .ConfigureAppConfiguration((hostContext, config) => { // This adds the appsettings.json file to the global configuration config.AddJsonFile(\"appsettings.json\", optional: true); }) .ConfigureLogging((hostingContext, logging) => { // This configured the logger to pull settings from the Logging part of appsettings.json logging.AddConfiguration(hostingContext.Configuration.GetSection(\"Logging\")); }) .Build(); builder.Configuration.AddJsonFile(\"appsettings.json\", optional: true); builder.Logging.AddConfiguration(builder.Configuration.GetSection(\"Logging\"));","title":"Log filtering"},{"location":"logging-to-elmah-io-from-isolated-azure-functions/#isolated-azure-functions-troubleshooting","text":"","title":"Isolated Azure Functions Troubleshooting"},{"location":"logging-to-elmah-io-from-isolated-azure-functions/#exceptions-in-programcs-are-not-logged","text":"Unfortunately, Azure Functions doesn't send exceptions happening in initialization code to the configured loggers. The only solution is to wrap your code in try/catch : IHostBuilder IHostApplicationBuilder try { var host = new HostBuilder() .ConfigureFunctionsWorkerDefaults((context, app) => { app.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); }) .Build(); host.Run(); } catch (Exception e) { Console.Error.WriteLine(e); throw; } try { var builder = FunctionsApplication.CreateBuilder(args); builder.ConfigureFunctionsWebApplication(); builder.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); await builder.Build().RunAsync(); } catch (Exception e) { Console.Error.WriteLine(e); throw; } Next, go to the Log stream page on the Azure portal and inspect any errors logged.","title":"Exceptions in Program.cs are not logged"},{"location":"logging-to-elmah-io-from-javascript/","text":"Logging to elmah.io from JavaScript Logging to elmah.io from JavaScript Installation Options Application name Debug output Message filtering Events Enriching log messages Handling errors Breadcrumbs Logging manually Logging from console IntelliSense Message reference elmah.io doesn't only support server-side .NET logging. We also log JavaScript errors happening on your website. Logging client-side errors require nothing more than installing the elmahio.js script on your website. Note Organizations created end 2023 and forward will have an API key named JavaScript automatically generated. Remember to either use this or generate a new API key with messages_write permission only. This makes it easy to revoke the API key if someone starts sending messages to your log with your key. elmahio.js supports all modern browsers like Chrome, Edge, Firefox, and Safari. Internet Explorer 10 and 11 are supported too, but because of internal dependencies on the stacktrace-gps library, nothing older than IE10 is supported. If you want to see elmahio.js in action before installing it on your site, feel free to play on the Playground . Installation Pick an installation method of your choice: Manually CDN npm NuGet Library Manager ASP.NET Core Bower Download the latest release as a zip: https://github.com/elmahio/elmah.io.javascript/releases Unpack and copy elmahio.min.js to the Scripts folder or whatever folder you use to store JavaScript files. Reference elmahio.min.js just before the </body> tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: <script src=\"~/Scripts/elmahio.min.js?apiKey=API_KEY&logId=LOG_ID\" type=\"text/javascript\"></script> Reference elmahio.min.js just before the </body> tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: <script src=\"https://cdn.jsdelivr.net/gh/elmahio/elmah.io.javascript@latest/dist/elmahio.min.js?apiKey=API_KEY&logId=LOG_ID\" type=\"text/javascript\"></script> Install the elmah.io.javascript npm package: npm install elmah.io.javascript Reference elmahio.min.js just before the </body> tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: <script src=\"~/node_modules/elmah.io.javascript/dist/elmahio.min.js?apiKey=API_KEY&logId=LOG_ID\" type=\"text/javascript\"></script> Since Bower is no longer maintained , installing elmah.io.javascript through Bower, is supported using bower-npm-resolver . Install the resolver: npm install bower-npm-resolver --save Add the resolver in your .bowerrc file: { \"resolvers\": [ \"bower-npm-resolver\" ] } Install the elmah.io.javascript npm package: bower install npm:elmah.io.javascript --save Reference elmahio.min.js just before the </body> tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: <script src=\"~/bower_components/elmah.io.javascript/dist/elmahio.min.js?apiKey=API_KEY&logId=LOG_ID\" type=\"text/javascript\"></script> Add the elmah.io.javascript library in your libman.json file: { // ... \"libraries\": [ // ... { \"provider\": \"filesystem\", \"library\": \"https://raw.githubusercontent.com/elmahio/elmah.io.javascript/4.1.1/dist/elmahio.min.js\", \"destination\": \"wwwroot/lib/elmahio\" } ] } or using the LibMan CLI: libman install https://raw.githubusercontent.com/elmahio/elmah.io.javascript/4.1.1/dist/elmahio.min.js --provider filesystem --destination wwwroot\\lib\\elmahio Reference elmahio.min.js just before the </body> tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: <script src=\"~/lib/elmahio/dist/elmahio.min.js?apiKey=API_KEY&logId=LOG_ID\" type=\"text/javascript\"></script> Warning NuGet is not a good distribution channel for JavaScript libraries so this package has been deprecated. The elmah.io.javascript package installs the JavaScript file in the /Scripts/ folder. This no longer works with modern web frameworks like ASP.NET Core. We recommend installing the JavaScript through one of the other options instead. Install the elmah.io.javascript NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package elmah.io.javascript Install-Package elmah.io.javascript <PackageReference Include=\"elmah.io.javascript\" Version=\"4.*\" /> paket add elmah.io.javascript Reference elmahio.min.js just before the </body> tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: <script src=\"~/Scripts/elmahio.min.js?apiKey=API_KEY&logId=LOG_ID\" type=\"text/javascript\"></script> If not already configured, follow the guide installing elmah.io in ASP.NET Core . Install the Elmah.Io.AspNetCore.TagHelpers NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.AspNetCore.TagHelpers Install-Package Elmah.Io.AspNetCore.TagHelpers <PackageReference Include=\"Elmah.Io.AspNetCore.TagHelpers\" Version=\"5.*\" /> paket add Elmah.Io.AspNetCore.TagHelpers Copy and paste the following line to the top of the _Layout.cshtml file: @addTagHelper *, Elmah.Io.AspNetCore.TagHelpers In the bottom of the file (but before referencing other JavaScript files), add the following tag helper: <elmah-io/> If you want to log JavaScript errors from production only, make sure to move the elmah-io element inside the tag <environment exclude=\"Development\"> . elmah.io automatically pulls your API key and log ID from the options specified as part of the installation for logging serverside errors from ASP.NET Core. If you haven't installed that code already, include the following lines in the Program.cs file: builder.Services.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); That's it. All uncaught errors on your website, are now logged to elmah.io. Options If you prefer configuring in code (or need to access the options for something else), API key and log ID can be configured by referencing the elmahio.min.js script without parameters: <script src=\"~/scripts/elmahio.min.js\" type=\"text/javascript\"></script> Then initialize the logger in JavaScript: new Elmahio({ apiKey: 'API_KEY', logId: 'LOG_ID' }); Application name The application property on elmah.io can be set on all log messages by setting the application option: new Elmahio({ apiKey: 'API_KEY', logId: 'LOG_ID', application: 'My application name' }); Debug output For debug purposes, debug output from the logger to the console can be enabled using the debug option: new Elmahio({ apiKey: 'API_KEY', logId: 'LOG_ID', debug: true }); Message filtering Log messages can be filtered, by adding a filter handler in options: new Elmahio({ // ... filter: function(msg) { return msg.severity === 'Verbose'; } }); In the example, all log messages with a severity of Verbose , are not logged to elmah.io. Events Enriching log messages Log messages can be enriched by subscribing to the message event: new Elmahio({ // ... }).on('message', function(msg) { if (!msg.data) msg.data = []; msg.data.push({key: 'MyCustomKey', value: 'MyCustomValue'}); }); In the example, all log messages are enriched with a data variable with the key MyCustomKey and value MyCustomValue . Handling errors To react to errors happening in elmah.io.javascript, subscribe to the error event: new Elmahio({ // ... }).on('error', function(status, text) { console.log('An error happened in elmah.io.javascript', status, text); }); In the example, all errors are written to the console. Breadcrumbs Breadcrumbs can be used to decorate errors with events or actions happening just before logging the error. Breadcrumbs can be added manually: logger.addBreadcrumb('User clicked button x', 'Information', 'click'); You would want to enrich your code with a range of different breadcrumbs depending on important user actions in your application. As default, a maximum of 10 breadcrumbs are stored in memory at all times. The list acts as first in first out, where adding a new breadcrumb to a full list will automatically remove the oldest breadcrumb in the list. The allowed number of breadcrumbs in the list can be changed using the breadcrumbsNumber option: var logger = new Elmahio({ // ... breadcrumbsNumber: 15 }); This will store a maximum of 15 breadcrumbs. Currently, we allow 25 as the highest possible value. elmah.io.javascript can also be configured to automatically generate breadcrumbs from important actions like click events and xhr: var logger = new Elmahio({ // ... breadcrumbs: true }); We are planning to enable automatic breadcrumbs in the future but for now, it's an opt-in feature. Automatic breadcrumbs will be included in the same list as manually added breadcrumbs why the breadcrumbsNumber option is still valid. Logging manually You may want to log errors manually or even log information messages from JavaScript. To do so, Elmahio is a logging framework too: var logger = new Elmahio({ apiKey: 'API_KEY', logId: 'LOG_ID' }); logger.verbose('This is verbose'); logger.verbose('This is verbose', new Error('A JavaScript error object')); logger.debug('This is debug'); logger.debug('This is debug', new Error('A JavaScript error object')); logger.information('This is information'); logger.information('This is information', new Error('A JavaScript error object')); logger.warning('This is warning'); logger.warning('This is warning', new Error('A JavaScript error object')); logger.error('This is error'); logger.error('This is error', new Error('A JavaScript error object')); logger.fatal('This is fatal'); logger.fatal('This is fatal', new Error('A JavaScript error object')); logger.log({ title: 'This is a custom log message', type: 'Of some type', severity: 'Error' }); var msg = logger.message(); // Get a prefilled message msg.title = \"This is a custom log message\"; logger.log(msg); var msg = logger.message(new Error('A JavaScript error object')); // Get a prefilled message including error details // Set custom variables. If not needed, simply use logger.error(...) instead. logger.log(msg); The Error object used, should be a JavaScript Error object . As for the log -function, check out message reference . Note Manual logging only works when initializing the elmah.io logger from code. Logging from console If you don't like to share the Elmahio logger or you want to hook elmah.io logging up to existing code, you can capture log messages from console . To do so, set the captureConsoleMinimumLevel option: var log = new Elmahio({ apiKey: 'API_KEY', logId: 'LOG_ID', captureConsoleMinimumLevel: 'error' }); console.error('This is an %s message.', 'error'); captureConsoleMinimumLevel can be set to one of the following values: none : will disable logging from console (default). debug : will capture logging from console.debug , console.info , console.warn , console.error . info : will capture logging from console.info , console.warn , console.error . warn : will capture logging from console.warn , console.error . error : will capture logging from console.error . Note Capturing the console only works when initializing the elmah.io logger from code. Also, console.log is not captured. IntelliSense If installing through npm or similar, Visual Studio should pick up the TypeScript mappings from the elmah.io.javascript package. If not, add the following line at the top of the JavaScript file where you want elmah.io.javascript IntelliSense: /// <reference path=\"/path/to/elmahio.d.ts\" /> Message reference This is an example of the elmah.io.javascript Message object that is used in various callbacks, etc.: { title: 'this.remove is not a function', detail: 'TypeError: this.remove is not a function\\n at (undefined:12:14)', source: 'index.js', severity: 'Error', type: 'TypeError', url: '/current/page', method: 'GET', application: 'MyApp', hostname: 'WOPR', statusCode: 400, user: 'DavidLightman', version: '1.0.0', cookies: [ { key: '_ga', value: 'GA1.3.1580453215.1783132008' } ], queryString: [ { key: 'id', value: '42' } ], data: [ { key: 'User-Language', value: 'en-US' }, { key: 'Color-Depth', value: '24' } ], serverVariables: [ { key: 'User-Agent', value: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36' } ], breadcrumbs: [ { severity: 'Information', event: 'click', message: 'A user clicked' } ] } For a complete definition, check out the Message interface in the elmah.io.javascript TypeScript mappings .","title":"Logging from JavaScript"},{"location":"logging-to-elmah-io-from-javascript/#logging-to-elmahio-from-javascript","text":"Logging to elmah.io from JavaScript Installation Options Application name Debug output Message filtering Events Enriching log messages Handling errors Breadcrumbs Logging manually Logging from console IntelliSense Message reference elmah.io doesn't only support server-side .NET logging. We also log JavaScript errors happening on your website. Logging client-side errors require nothing more than installing the elmahio.js script on your website. Note Organizations created end 2023 and forward will have an API key named JavaScript automatically generated. Remember to either use this or generate a new API key with messages_write permission only. This makes it easy to revoke the API key if someone starts sending messages to your log with your key. elmahio.js supports all modern browsers like Chrome, Edge, Firefox, and Safari. Internet Explorer 10 and 11 are supported too, but because of internal dependencies on the stacktrace-gps library, nothing older than IE10 is supported. If you want to see elmahio.js in action before installing it on your site, feel free to play on the Playground .","title":"Logging to elmah.io from JavaScript"},{"location":"logging-to-elmah-io-from-javascript/#installation","text":"Pick an installation method of your choice: Manually CDN npm NuGet Library Manager ASP.NET Core Bower Download the latest release as a zip: https://github.com/elmahio/elmah.io.javascript/releases Unpack and copy elmahio.min.js to the Scripts folder or whatever folder you use to store JavaScript files. Reference elmahio.min.js just before the </body> tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: <script src=\"~/Scripts/elmahio.min.js?apiKey=API_KEY&logId=LOG_ID\" type=\"text/javascript\"></script> Reference elmahio.min.js just before the </body> tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: <script src=\"https://cdn.jsdelivr.net/gh/elmahio/elmah.io.javascript@latest/dist/elmahio.min.js?apiKey=API_KEY&logId=LOG_ID\" type=\"text/javascript\"></script> Install the elmah.io.javascript npm package: npm install elmah.io.javascript Reference elmahio.min.js just before the </body> tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: <script src=\"~/node_modules/elmah.io.javascript/dist/elmahio.min.js?apiKey=API_KEY&logId=LOG_ID\" type=\"text/javascript\"></script> Since Bower is no longer maintained , installing elmah.io.javascript through Bower, is supported using bower-npm-resolver . Install the resolver: npm install bower-npm-resolver --save Add the resolver in your .bowerrc file: { \"resolvers\": [ \"bower-npm-resolver\" ] } Install the elmah.io.javascript npm package: bower install npm:elmah.io.javascript --save Reference elmahio.min.js just before the </body> tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: <script src=\"~/bower_components/elmah.io.javascript/dist/elmahio.min.js?apiKey=API_KEY&logId=LOG_ID\" type=\"text/javascript\"></script> Add the elmah.io.javascript library in your libman.json file: { // ... \"libraries\": [ // ... { \"provider\": \"filesystem\", \"library\": \"https://raw.githubusercontent.com/elmahio/elmah.io.javascript/4.1.1/dist/elmahio.min.js\", \"destination\": \"wwwroot/lib/elmahio\" } ] } or using the LibMan CLI: libman install https://raw.githubusercontent.com/elmahio/elmah.io.javascript/4.1.1/dist/elmahio.min.js --provider filesystem --destination wwwroot\\lib\\elmahio Reference elmahio.min.js just before the </body> tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: <script src=\"~/lib/elmahio/dist/elmahio.min.js?apiKey=API_KEY&logId=LOG_ID\" type=\"text/javascript\"></script> Warning NuGet is not a good distribution channel for JavaScript libraries so this package has been deprecated. The elmah.io.javascript package installs the JavaScript file in the /Scripts/ folder. This no longer works with modern web frameworks like ASP.NET Core. We recommend installing the JavaScript through one of the other options instead. Install the elmah.io.javascript NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package elmah.io.javascript Install-Package elmah.io.javascript <PackageReference Include=\"elmah.io.javascript\" Version=\"4.*\" /> paket add elmah.io.javascript Reference elmahio.min.js just before the </body> tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: <script src=\"~/Scripts/elmahio.min.js?apiKey=API_KEY&logId=LOG_ID\" type=\"text/javascript\"></script> If not already configured, follow the guide installing elmah.io in ASP.NET Core . Install the Elmah.Io.AspNetCore.TagHelpers NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.AspNetCore.TagHelpers Install-Package Elmah.Io.AspNetCore.TagHelpers <PackageReference Include=\"Elmah.Io.AspNetCore.TagHelpers\" Version=\"5.*\" /> paket add Elmah.Io.AspNetCore.TagHelpers Copy and paste the following line to the top of the _Layout.cshtml file: @addTagHelper *, Elmah.Io.AspNetCore.TagHelpers In the bottom of the file (but before referencing other JavaScript files), add the following tag helper: <elmah-io/> If you want to log JavaScript errors from production only, make sure to move the elmah-io element inside the tag <environment exclude=\"Development\"> . elmah.io automatically pulls your API key and log ID from the options specified as part of the installation for logging serverside errors from ASP.NET Core. If you haven't installed that code already, include the following lines in the Program.cs file: builder.Services.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); That's it. All uncaught errors on your website, are now logged to elmah.io.","title":"Installation"},{"location":"logging-to-elmah-io-from-javascript/#options","text":"If you prefer configuring in code (or need to access the options for something else), API key and log ID can be configured by referencing the elmahio.min.js script without parameters: <script src=\"~/scripts/elmahio.min.js\" type=\"text/javascript\"></script> Then initialize the logger in JavaScript: new Elmahio({ apiKey: 'API_KEY', logId: 'LOG_ID' });","title":"Options"},{"location":"logging-to-elmah-io-from-javascript/#application-name","text":"The application property on elmah.io can be set on all log messages by setting the application option: new Elmahio({ apiKey: 'API_KEY', logId: 'LOG_ID', application: 'My application name' });","title":"Application name"},{"location":"logging-to-elmah-io-from-javascript/#debug-output","text":"For debug purposes, debug output from the logger to the console can be enabled using the debug option: new Elmahio({ apiKey: 'API_KEY', logId: 'LOG_ID', debug: true });","title":"Debug output"},{"location":"logging-to-elmah-io-from-javascript/#message-filtering","text":"Log messages can be filtered, by adding a filter handler in options: new Elmahio({ // ... filter: function(msg) { return msg.severity === 'Verbose'; } }); In the example, all log messages with a severity of Verbose , are not logged to elmah.io.","title":"Message filtering"},{"location":"logging-to-elmah-io-from-javascript/#events","text":"","title":"Events"},{"location":"logging-to-elmah-io-from-javascript/#enriching-log-messages","text":"Log messages can be enriched by subscribing to the message event: new Elmahio({ // ... }).on('message', function(msg) { if (!msg.data) msg.data = []; msg.data.push({key: 'MyCustomKey', value: 'MyCustomValue'}); }); In the example, all log messages are enriched with a data variable with the key MyCustomKey and value MyCustomValue .","title":"Enriching log messages"},{"location":"logging-to-elmah-io-from-javascript/#handling-errors","text":"To react to errors happening in elmah.io.javascript, subscribe to the error event: new Elmahio({ // ... }).on('error', function(status, text) { console.log('An error happened in elmah.io.javascript', status, text); }); In the example, all errors are written to the console.","title":"Handling errors"},{"location":"logging-to-elmah-io-from-javascript/#breadcrumbs","text":"Breadcrumbs can be used to decorate errors with events or actions happening just before logging the error. Breadcrumbs can be added manually: logger.addBreadcrumb('User clicked button x', 'Information', 'click'); You would want to enrich your code with a range of different breadcrumbs depending on important user actions in your application. As default, a maximum of 10 breadcrumbs are stored in memory at all times. The list acts as first in first out, where adding a new breadcrumb to a full list will automatically remove the oldest breadcrumb in the list. The allowed number of breadcrumbs in the list can be changed using the breadcrumbsNumber option: var logger = new Elmahio({ // ... breadcrumbsNumber: 15 }); This will store a maximum of 15 breadcrumbs. Currently, we allow 25 as the highest possible value. elmah.io.javascript can also be configured to automatically generate breadcrumbs from important actions like click events and xhr: var logger = new Elmahio({ // ... breadcrumbs: true }); We are planning to enable automatic breadcrumbs in the future but for now, it's an opt-in feature. Automatic breadcrumbs will be included in the same list as manually added breadcrumbs why the breadcrumbsNumber option is still valid.","title":"Breadcrumbs"},{"location":"logging-to-elmah-io-from-javascript/#logging-manually","text":"You may want to log errors manually or even log information messages from JavaScript. To do so, Elmahio is a logging framework too: var logger = new Elmahio({ apiKey: 'API_KEY', logId: 'LOG_ID' }); logger.verbose('This is verbose'); logger.verbose('This is verbose', new Error('A JavaScript error object')); logger.debug('This is debug'); logger.debug('This is debug', new Error('A JavaScript error object')); logger.information('This is information'); logger.information('This is information', new Error('A JavaScript error object')); logger.warning('This is warning'); logger.warning('This is warning', new Error('A JavaScript error object')); logger.error('This is error'); logger.error('This is error', new Error('A JavaScript error object')); logger.fatal('This is fatal'); logger.fatal('This is fatal', new Error('A JavaScript error object')); logger.log({ title: 'This is a custom log message', type: 'Of some type', severity: 'Error' }); var msg = logger.message(); // Get a prefilled message msg.title = \"This is a custom log message\"; logger.log(msg); var msg = logger.message(new Error('A JavaScript error object')); // Get a prefilled message including error details // Set custom variables. If not needed, simply use logger.error(...) instead. logger.log(msg); The Error object used, should be a JavaScript Error object . As for the log -function, check out message reference . Note Manual logging only works when initializing the elmah.io logger from code.","title":"Logging manually"},{"location":"logging-to-elmah-io-from-javascript/#logging-from-console","text":"If you don't like to share the Elmahio logger or you want to hook elmah.io logging up to existing code, you can capture log messages from console . To do so, set the captureConsoleMinimumLevel option: var log = new Elmahio({ apiKey: 'API_KEY', logId: 'LOG_ID', captureConsoleMinimumLevel: 'error' }); console.error('This is an %s message.', 'error'); captureConsoleMinimumLevel can be set to one of the following values: none : will disable logging from console (default). debug : will capture logging from console.debug , console.info , console.warn , console.error . info : will capture logging from console.info , console.warn , console.error . warn : will capture logging from console.warn , console.error . error : will capture logging from console.error . Note Capturing the console only works when initializing the elmah.io logger from code. Also, console.log is not captured.","title":"Logging from console"},{"location":"logging-to-elmah-io-from-javascript/#intellisense","text":"If installing through npm or similar, Visual Studio should pick up the TypeScript mappings from the elmah.io.javascript package. If not, add the following line at the top of the JavaScript file where you want elmah.io.javascript IntelliSense: /// <reference path=\"/path/to/elmahio.d.ts\" />","title":"IntelliSense"},{"location":"logging-to-elmah-io-from-javascript/#message-reference","text":"This is an example of the elmah.io.javascript Message object that is used in various callbacks, etc.: { title: 'this.remove is not a function', detail: 'TypeError: this.remove is not a function\\n at (undefined:12:14)', source: 'index.js', severity: 'Error', type: 'TypeError', url: '/current/page', method: 'GET', application: 'MyApp', hostname: 'WOPR', statusCode: 400, user: 'DavidLightman', version: '1.0.0', cookies: [ { key: '_ga', value: 'GA1.3.1580453215.1783132008' } ], queryString: [ { key: 'id', value: '42' } ], data: [ { key: 'User-Language', value: 'en-US' }, { key: 'Color-Depth', value: '24' } ], serverVariables: [ { key: 'User-Agent', value: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36' } ], breadcrumbs: [ { severity: 'Information', event: 'click', message: 'A user clicked' } ] } For a complete definition, check out the Message interface in the elmah.io.javascript TypeScript mappings .","title":"Message reference"},{"location":"logging-to-elmah-io-from-jsnlog/","text":"Logging to elmah.io from JSNLog Warning While logging through JSNLog still works, we recommend using our native integration with JavaScript: Logging to elmah.io from JavaScript Using JSNLog you will be able to log JavaScript errors to elmah.io. In this sample, we will focus on logging JavaScript errors from an ASP.NET MVC web application, but you can use JSNLog to log anything to elmah.io, so please check out their documentation. Start by installing the JSNLog.Elmah package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package JSNLog.Elmah Install-Package JSNLog.Elmah <PackageReference Include=\"JSNLog.Elmah\" Version=\"2.*\" /> paket add JSNLog.Elmah This installs and setup JSNLog into your project, using ELMAH as an appender. Then, install Elmah.Io : .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io Install-Package Elmah.Io <PackageReference Include=\"Elmah.Io\" Version=\"5.*\" /> paket add Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Add the JSNLog code before any script imports in your _Layout.cshtml file: @Html.Raw(JSNLog.JavascriptLogging.Configure()) You are ready to log errors from JavaScript to elmah.io. To test that everything is installed correctly, launch your web application and execute the following JavaScript using Chrome Developer Tools or similar: JL().fatal(\"log message\"); Navigate to your log at elmah.io and observe the new error. As you can see, logging JavaScript errors is now extremely simple and can be built into any try-catch, jQuery fail handlers, and pretty much anywhere else. To log every JavaScript error, add the following to the bottom of the _Layout.cshtml file: <script> window.onerror = function (errorMsg, url, lineNumber, column, errorObj) { // Send object with all data to server side log, using severity fatal, // from logger \"onerrorLogger\" JL(\"onerrorLogger\").fatalException({ \"msg\": \"Exception!\", \"errorMsg\": errorMsg, \"url\": url, \"line number\": lineNumber, \"column\": column }, errorObj); // Tell browser to run its own error handler as well return false; } </script>","title":"Logging from JSNLog"},{"location":"logging-to-elmah-io-from-jsnlog/#logging-to-elmahio-from-jsnlog","text":"Warning While logging through JSNLog still works, we recommend using our native integration with JavaScript: Logging to elmah.io from JavaScript Using JSNLog you will be able to log JavaScript errors to elmah.io. In this sample, we will focus on logging JavaScript errors from an ASP.NET MVC web application, but you can use JSNLog to log anything to elmah.io, so please check out their documentation. Start by installing the JSNLog.Elmah package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package JSNLog.Elmah Install-Package JSNLog.Elmah <PackageReference Include=\"JSNLog.Elmah\" Version=\"2.*\" /> paket add JSNLog.Elmah This installs and setup JSNLog into your project, using ELMAH as an appender. Then, install Elmah.Io : .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io Install-Package Elmah.Io <PackageReference Include=\"Elmah.Io\" Version=\"5.*\" /> paket add Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Add the JSNLog code before any script imports in your _Layout.cshtml file: @Html.Raw(JSNLog.JavascriptLogging.Configure()) You are ready to log errors from JavaScript to elmah.io. To test that everything is installed correctly, launch your web application and execute the following JavaScript using Chrome Developer Tools or similar: JL().fatal(\"log message\"); Navigate to your log at elmah.io and observe the new error. As you can see, logging JavaScript errors is now extremely simple and can be built into any try-catch, jQuery fail handlers, and pretty much anywhere else. To log every JavaScript error, add the following to the bottom of the _Layout.cshtml file: <script> window.onerror = function (errorMsg, url, lineNumber, column, errorObj) { // Send object with all data to server side log, using severity fatal, // from logger \"onerrorLogger\" JL(\"onerrorLogger\").fatalException({ \"msg\": \"Exception!\", \"errorMsg\": errorMsg, \"url\": url, \"line number\": lineNumber, \"column\": column }, errorObj); // Tell browser to run its own error handler as well return false; } </script>","title":"Logging to elmah.io from JSNLog"},{"location":"logging-to-elmah-io-from-log4net/","text":"Logging to elmah.io from log4net Logging to elmah.io from log4net Logging custom properties Setting category Message hooks Decorating log messages Include source code Specify API key and log ID in appSettings ASP.NET Core log4net Troubleshooting System.IO.FileLoadException: Could not load file or assembly 'log4net ... In this tutorial we'll add logging to elmah.io from a .NET application with log4net. Install the elmah.io appender: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Log4Net Install-Package Elmah.Io.Log4Net <PackageReference Include=\"Elmah.Io.Log4Net\" Version=\"5.*\" /> paket add Elmah.Io.Log4Net Add the following to your AssemblyInfo.cs file: [assembly: log4net.Config.XmlConfigurator(Watch = true)] Add the following config section to your web/app.config file: <section name=\"log4net\" type=\"log4net.Config.Log4NetConfigurationSectionHandler, log4net\" /> Finally, add the log4net configuration element to web/app.config : <log4net> <appender name=\"ElmahIoAppender\" type=\"elmah.io.log4net.ElmahIoAppender, elmah.io.log4net\"> <logId value=\"LOG_ID\" /> <apiKey value=\"API_KEY\" /> </appender> <root> <level value=\"Info\" /> <appender-ref ref=\"ElmahIoAppender\" /> </root> </log4net> That\u2019s it! log4net is now configured and log messages to elmah.io. Remember to replace API_KEY ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with your actual log Id. To start logging, write your usual log4net log statements: var log = log4net.LogManager.GetLogger(typeof(HomeController)); try { log.Info(\"Trying something\"); throw new ApplicationException(); } catch (ApplicationException ex) { log.Error(\"Error happening\", ex); } Logging custom properties log4net offers a feature called context properties. With context properties, you can log additional key/value pairs with every log message. The elmah.io appender for log4net, supports context properties as well. Context properties are handled like custom properties in the elmah.io UI. Let's utilize two different hooks in log4net, to add context properties to elmah.io: log4net.GlobalContext.Properties[\"ApplicationIdentifier\"] = \"MyCoolApp\"; log4net.ThreadContext.Properties[\"ThreadId\"] = Thread.CurrentThread.ManagedThreadId; log.Info(\"This is a message with custom properties\"); log4net offer a set of contextual classes, which we use to enrich log messages to elmah.io. When looking up the log message in elmah.io, we see the context properties in the Data tab. Besides the two custom variables that we set through GlobalContext and ThreadContext , we see a couple of build-in properties in log4net, both prefixed with log4net: . In addition, Elmah.Io.Log4Net provides a range of reserved property names, that can be used to fill in data in the correct fields on the elmah.io UI. Let's say you want to fill the User field: var properties = new PropertiesDictionary(); properties[\"User\"] = \"Arnold Schwarzenegger\"; log.Logger.Log(new LoggingEvent(new LoggingEventData { Level = Level.Error, TimeStampUtc = DateTime.UtcNow, Properties = properties, Message = \"Hasta la vista, baby\", })); This will fill in the value Arnold Schwarzenegger in the User field, as well as add a key/value pair to the Data tab on elmah.io. For a reference of all possible property names, check out the property names on CreateMessage . Setting category elmah.io provide a field named Category to better group log messages by class name, namespace, or similar. Category maps to log4net's LoggerName field automatically when using Elmah.Io.Log4Net . The category field can be overwritten using one of the context features available in log4net: log4net.ThreadContext.Properties[\"Category\"] = \"The category\"; log.Info(\"This is an information message with custom category\"); Message hooks Decorating log messages In case you want to set one or more core properties on each elmah.io message logged, using message hooks may be a better solution. In that case you will need to add a bit of log4net magic. An example could be setting the Version property on all log messages. In the following code, we set a hard-coded version number on all log messages, but the value could come from assembly info, a text file, or similar: Hierarchy hier = log4net.LogManager.GetRepository(Assembly.GetEntryAssembly()) as Hierarchy; var elmahIoAppender = (ElmahIoAppender)(hier?.GetAppenders()) .FirstOrDefault(appender => appender.Name .Equals(\"ElmahIoAppender\", StringComparison.InvariantCultureIgnoreCase)); elmahIoAppender.ActivateOptions(); elmahIoAppender.Client.Messages.OnMessage += (sender, a) => { a.Message.Version = \"1.0.0\"; }; This rather ugly piece of code would go into an initalization block, depending on the project type. The code starts by getting the configured elmah.io appender (typically set up in web/app.config or log4net.config ). With the appender, you can access the underlying elmah.io client and subscribe to the OnMessage event. This let you trigger a small piece of code, just before sending log messages to elmah.io. In this case, we set the Version property to 1.0.0 . Remember to call the ActiveOptions method, to make sure that the Client property is initialized. Include source code You can use the OnMessage event to include source code to log messages. This will require a stack trace in the Detail property with filenames and line numbers in it. There are multiple ways of including source code to log messages. In short, you will need to install the Elmah.Io.Client.Extensions.SourceCode NuGet package and call the WithSourceCodeFromPdb method in the OnMessage event handler: elmahIoAppender.Client.Messages.OnMessage += (sender, a) => { a.Message.WithSourceCodeFromPdb(); }; Check out How to include source code in log messages for additional requirements to make source code show up on elmah.io. Note Including source code on log messages is available in the Elmah.Io.Client v4 package and forward. Specify API key and log ID in appSettings You may prefer storing the API key and log ID in the appSettings element over having the values embedded into the appender element. This can be the case for easy config transformation, overwriting values on Azure, or similar. log4net provides a feature named pattern strings to address just that: <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <configSections> <section name=\"log4net\" type=\"log4net.Config.Log4NetConfigurationSectionHandler, log4net\" /> </configSections> <appSettings> <add key=\"logId\" value=\"LOG_ID\"/> <add key=\"apiKey\" value=\"API_KEY\"/> </appSettings> <log4net> <root> <level value=\"ALL\" /> <appender-ref ref=\"ElmahIoAppender\" /> </root> <appender name=\"ElmahIoAppender\" type=\"elmah.io.log4net.ElmahIoAppender, elmah.io.log4net\"> <logId type=\"log4net.Util.PatternString\" value=\"%appSetting{logId}\" /> <apiKey type=\"log4net.Util.PatternString\" value=\"%appSetting{apiKey}\" /> </appender> </log4net> </configuration> The logId and apiKey elements underneath the elmah.io appender have been extended to include type=\"log4net.Util.PatternString\" . This allows for complex patterns in the value attribute. In this example, I reference an app setting from its name, by adding a value of %appSetting{logId} where logId is a reference to the app setting key specified above. ASP.NET Core Like other logging frameworks, logging through log4net from ASP.NET Core is also supported. We have a sample to show you how to set it up. The required NuGet packages and configuration are documented in this section. To start logging to elmah.io from Microsoft.Extensions.Logging (through log4net), install the Elmah.Io.Log4Net and Microsoft.Extensions.Logging.Log4Net.AspNetCore NuGet packages: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Log4Net dotnet add package Microsoft.Extensions.Logging.Log4Net.AspNetCore Install-Package Elmah.Io.Log4Net Install-Package Microsoft.Extensions.Logging.Log4Net.AspNetCore <PackageReference Include=\"Elmah.Io.Log4Net\" Version=\"5.*\" /> <PackageReference Include=\"Microsoft.Extensions.Logging.Log4Net.AspNetCore\" Version=\"6.*\" /> paket add Elmah.Io.Log4Net paket add Microsoft.Extensions.Logging.Log4Net.AspNetCore The version of Microsoft.Extensions.Logging.Log4Net.AspNetCore should match the version of .NET you are targeting. Include a log4net config file to the root of the project: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <log4net> <root> <level value=\"WARN\" /> <appender-ref ref=\"ElmahIoAppender\" /> <appender-ref ref=\"ConsoleAppender\" /> </root> <appender name=\"ElmahIoAppender\" type=\"elmah.io.log4net.ElmahIoAppender, elmah.io.log4net\"> <logId value=\"LOG_ID\" /> <apiKey value=\"API_KEY\" /> <!--<application value=\"My app\" />--> </appender> <appender name=\"ConsoleAppender\" type=\"log4net.Appender.ConsoleAppender\"> <layout type=\"log4net.Layout.PatternLayout\"> <conversionPattern value=\"%date [%thread] %-5level %logger [%property{NDC}] - %message%newline\" /> </layout> </appender> </log4net> In the Program.cs file, make sure to set up log4net: builder.Logging.AddLog4Net(); All internal logging from ASP.NET Core, as well as manual logging you create through the ILogger interface, now goes directly into elmah.io. A common request is to include all of the HTTP contextual information you usually get logged when using a package like Elmah.Io.AspNetCore . We have developed a specialized NuGet package to include cookies, server variables, etc. when logging through log4net from ASP.NET Core. To set it up, install the Elmah.Io.AspNetCore.Log4Net NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.AspNetCore.Log4Net Install-Package Elmah.Io.AspNetCore.Log4Net <PackageReference Include=\"Elmah.Io.AspNetCore.Log4Net\" Version=\"5.*\" /> paket add Elmah.Io.AspNetCore.Log4Net Finally, make sure to call the UseElmahIoLog4Net method in the Program.cs file: // ... Exception handling middleware app.UseElmahIoLog4Net(); // ... UseMvc etc. log4net Troubleshooting Here are some things to try out if logging from log4net to elmah.io doesn't work: Run the diagnose command with the elmah.io CLI as shown here: Diagnose potential problems with an elmah.io installation . Make sure that you have the newest Elmah.Io.Log4Net and Elmah.Io.Client packages installed. Make sure to include all of the configuration from the example above. That includes both the <root> and <appender> element. Make sure that the API key is valid and allow the Messages | Write permission . Make sure to include a valid log ID. Make sure that you have sufficient log messages in your subscription and that you didn't disable logging to the log or include any ignore filters/rules. Enable and inspect log4net's internal debug log by including the following code in your web/app.config file to reveal any exceptions happening inside the log4net engine room or one of the appenders: <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <appSettings> <add key=\"log4net.Internal.Debug\" value=\"true\"/> </appSettings> <system.diagnostics> <trace autoflush=\"true\"> <listeners> <add name=\"textWriterTraceListener\" type=\"System.Diagnostics.TextWriterTraceListener\" initializeData=\"C:\\temp\\log4net-debug.log\" /> </listeners> </trace> </system.diagnostics> </configuration> System.IO.FileLoadException: Could not load file or assembly 'log4net ... In case you get the following exception while trying to log messages to elmah.io: System.IO.FileLoadException: Could not load file or assembly 'log4net, Version=2.0.8.0, Culture=neutral, PublicKeyToken=669e0ddf0bb1aa2a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040) This indicates they either the log4net.dll file is missing or there's a problem with assembly bindings. You can include a binding redirect to the newest version of log4net by including the following code in your web/app.config file: <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <runtime> <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <dependentAssembly> <assemblyIdentity name=\"log4net\" publicKeyToken=\"669e0ddf0bb1aa2a\" culture=\"neutral\"/> <bindingRedirect oldVersion=\"0.0.0.0-2.0.12.0\" newVersion=\"2.0.12.0\"/> </dependentAssembly> </assemblyBinding> </runtime> </configuration>","title":"Logging from log4net"},{"location":"logging-to-elmah-io-from-log4net/#logging-to-elmahio-from-log4net","text":"Logging to elmah.io from log4net Logging custom properties Setting category Message hooks Decorating log messages Include source code Specify API key and log ID in appSettings ASP.NET Core log4net Troubleshooting System.IO.FileLoadException: Could not load file or assembly 'log4net ... In this tutorial we'll add logging to elmah.io from a .NET application with log4net. Install the elmah.io appender: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Log4Net Install-Package Elmah.Io.Log4Net <PackageReference Include=\"Elmah.Io.Log4Net\" Version=\"5.*\" /> paket add Elmah.Io.Log4Net Add the following to your AssemblyInfo.cs file: [assembly: log4net.Config.XmlConfigurator(Watch = true)] Add the following config section to your web/app.config file: <section name=\"log4net\" type=\"log4net.Config.Log4NetConfigurationSectionHandler, log4net\" /> Finally, add the log4net configuration element to web/app.config : <log4net> <appender name=\"ElmahIoAppender\" type=\"elmah.io.log4net.ElmahIoAppender, elmah.io.log4net\"> <logId value=\"LOG_ID\" /> <apiKey value=\"API_KEY\" /> </appender> <root> <level value=\"Info\" /> <appender-ref ref=\"ElmahIoAppender\" /> </root> </log4net> That\u2019s it! log4net is now configured and log messages to elmah.io. Remember to replace API_KEY ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with your actual log Id. To start logging, write your usual log4net log statements: var log = log4net.LogManager.GetLogger(typeof(HomeController)); try { log.Info(\"Trying something\"); throw new ApplicationException(); } catch (ApplicationException ex) { log.Error(\"Error happening\", ex); }","title":"Logging to elmah.io from log4net"},{"location":"logging-to-elmah-io-from-log4net/#logging-custom-properties","text":"log4net offers a feature called context properties. With context properties, you can log additional key/value pairs with every log message. The elmah.io appender for log4net, supports context properties as well. Context properties are handled like custom properties in the elmah.io UI. Let's utilize two different hooks in log4net, to add context properties to elmah.io: log4net.GlobalContext.Properties[\"ApplicationIdentifier\"] = \"MyCoolApp\"; log4net.ThreadContext.Properties[\"ThreadId\"] = Thread.CurrentThread.ManagedThreadId; log.Info(\"This is a message with custom properties\"); log4net offer a set of contextual classes, which we use to enrich log messages to elmah.io. When looking up the log message in elmah.io, we see the context properties in the Data tab. Besides the two custom variables that we set through GlobalContext and ThreadContext , we see a couple of build-in properties in log4net, both prefixed with log4net: . In addition, Elmah.Io.Log4Net provides a range of reserved property names, that can be used to fill in data in the correct fields on the elmah.io UI. Let's say you want to fill the User field: var properties = new PropertiesDictionary(); properties[\"User\"] = \"Arnold Schwarzenegger\"; log.Logger.Log(new LoggingEvent(new LoggingEventData { Level = Level.Error, TimeStampUtc = DateTime.UtcNow, Properties = properties, Message = \"Hasta la vista, baby\", })); This will fill in the value Arnold Schwarzenegger in the User field, as well as add a key/value pair to the Data tab on elmah.io. For a reference of all possible property names, check out the property names on CreateMessage .","title":"Logging custom properties"},{"location":"logging-to-elmah-io-from-log4net/#setting-category","text":"elmah.io provide a field named Category to better group log messages by class name, namespace, or similar. Category maps to log4net's LoggerName field automatically when using Elmah.Io.Log4Net . The category field can be overwritten using one of the context features available in log4net: log4net.ThreadContext.Properties[\"Category\"] = \"The category\"; log.Info(\"This is an information message with custom category\");","title":"Setting category"},{"location":"logging-to-elmah-io-from-log4net/#message-hooks","text":"","title":"Message hooks"},{"location":"logging-to-elmah-io-from-log4net/#decorating-log-messages","text":"In case you want to set one or more core properties on each elmah.io message logged, using message hooks may be a better solution. In that case you will need to add a bit of log4net magic. An example could be setting the Version property on all log messages. In the following code, we set a hard-coded version number on all log messages, but the value could come from assembly info, a text file, or similar: Hierarchy hier = log4net.LogManager.GetRepository(Assembly.GetEntryAssembly()) as Hierarchy; var elmahIoAppender = (ElmahIoAppender)(hier?.GetAppenders()) .FirstOrDefault(appender => appender.Name .Equals(\"ElmahIoAppender\", StringComparison.InvariantCultureIgnoreCase)); elmahIoAppender.ActivateOptions(); elmahIoAppender.Client.Messages.OnMessage += (sender, a) => { a.Message.Version = \"1.0.0\"; }; This rather ugly piece of code would go into an initalization block, depending on the project type. The code starts by getting the configured elmah.io appender (typically set up in web/app.config or log4net.config ). With the appender, you can access the underlying elmah.io client and subscribe to the OnMessage event. This let you trigger a small piece of code, just before sending log messages to elmah.io. In this case, we set the Version property to 1.0.0 . Remember to call the ActiveOptions method, to make sure that the Client property is initialized.","title":"Decorating log messages"},{"location":"logging-to-elmah-io-from-log4net/#include-source-code","text":"You can use the OnMessage event to include source code to log messages. This will require a stack trace in the Detail property with filenames and line numbers in it. There are multiple ways of including source code to log messages. In short, you will need to install the Elmah.Io.Client.Extensions.SourceCode NuGet package and call the WithSourceCodeFromPdb method in the OnMessage event handler: elmahIoAppender.Client.Messages.OnMessage += (sender, a) => { a.Message.WithSourceCodeFromPdb(); }; Check out How to include source code in log messages for additional requirements to make source code show up on elmah.io. Note Including source code on log messages is available in the Elmah.Io.Client v4 package and forward.","title":"Include source code"},{"location":"logging-to-elmah-io-from-log4net/#specify-api-key-and-log-id-in-appsettings","text":"You may prefer storing the API key and log ID in the appSettings element over having the values embedded into the appender element. This can be the case for easy config transformation, overwriting values on Azure, or similar. log4net provides a feature named pattern strings to address just that: <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <configSections> <section name=\"log4net\" type=\"log4net.Config.Log4NetConfigurationSectionHandler, log4net\" /> </configSections> <appSettings> <add key=\"logId\" value=\"LOG_ID\"/> <add key=\"apiKey\" value=\"API_KEY\"/> </appSettings> <log4net> <root> <level value=\"ALL\" /> <appender-ref ref=\"ElmahIoAppender\" /> </root> <appender name=\"ElmahIoAppender\" type=\"elmah.io.log4net.ElmahIoAppender, elmah.io.log4net\"> <logId type=\"log4net.Util.PatternString\" value=\"%appSetting{logId}\" /> <apiKey type=\"log4net.Util.PatternString\" value=\"%appSetting{apiKey}\" /> </appender> </log4net> </configuration> The logId and apiKey elements underneath the elmah.io appender have been extended to include type=\"log4net.Util.PatternString\" . This allows for complex patterns in the value attribute. In this example, I reference an app setting from its name, by adding a value of %appSetting{logId} where logId is a reference to the app setting key specified above.","title":"Specify API key and log ID in appSettings"},{"location":"logging-to-elmah-io-from-log4net/#aspnet-core","text":"Like other logging frameworks, logging through log4net from ASP.NET Core is also supported. We have a sample to show you how to set it up. The required NuGet packages and configuration are documented in this section. To start logging to elmah.io from Microsoft.Extensions.Logging (through log4net), install the Elmah.Io.Log4Net and Microsoft.Extensions.Logging.Log4Net.AspNetCore NuGet packages: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Log4Net dotnet add package Microsoft.Extensions.Logging.Log4Net.AspNetCore Install-Package Elmah.Io.Log4Net Install-Package Microsoft.Extensions.Logging.Log4Net.AspNetCore <PackageReference Include=\"Elmah.Io.Log4Net\" Version=\"5.*\" /> <PackageReference Include=\"Microsoft.Extensions.Logging.Log4Net.AspNetCore\" Version=\"6.*\" /> paket add Elmah.Io.Log4Net paket add Microsoft.Extensions.Logging.Log4Net.AspNetCore The version of Microsoft.Extensions.Logging.Log4Net.AspNetCore should match the version of .NET you are targeting. Include a log4net config file to the root of the project: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <log4net> <root> <level value=\"WARN\" /> <appender-ref ref=\"ElmahIoAppender\" /> <appender-ref ref=\"ConsoleAppender\" /> </root> <appender name=\"ElmahIoAppender\" type=\"elmah.io.log4net.ElmahIoAppender, elmah.io.log4net\"> <logId value=\"LOG_ID\" /> <apiKey value=\"API_KEY\" /> <!--<application value=\"My app\" />--> </appender> <appender name=\"ConsoleAppender\" type=\"log4net.Appender.ConsoleAppender\"> <layout type=\"log4net.Layout.PatternLayout\"> <conversionPattern value=\"%date [%thread] %-5level %logger [%property{NDC}] - %message%newline\" /> </layout> </appender> </log4net> In the Program.cs file, make sure to set up log4net: builder.Logging.AddLog4Net(); All internal logging from ASP.NET Core, as well as manual logging you create through the ILogger interface, now goes directly into elmah.io. A common request is to include all of the HTTP contextual information you usually get logged when using a package like Elmah.Io.AspNetCore . We have developed a specialized NuGet package to include cookies, server variables, etc. when logging through log4net from ASP.NET Core. To set it up, install the Elmah.Io.AspNetCore.Log4Net NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.AspNetCore.Log4Net Install-Package Elmah.Io.AspNetCore.Log4Net <PackageReference Include=\"Elmah.Io.AspNetCore.Log4Net\" Version=\"5.*\" /> paket add Elmah.Io.AspNetCore.Log4Net Finally, make sure to call the UseElmahIoLog4Net method in the Program.cs file: // ... Exception handling middleware app.UseElmahIoLog4Net(); // ... UseMvc etc.","title":"ASP.NET Core"},{"location":"logging-to-elmah-io-from-log4net/#log4net-troubleshooting","text":"Here are some things to try out if logging from log4net to elmah.io doesn't work: Run the diagnose command with the elmah.io CLI as shown here: Diagnose potential problems with an elmah.io installation . Make sure that you have the newest Elmah.Io.Log4Net and Elmah.Io.Client packages installed. Make sure to include all of the configuration from the example above. That includes both the <root> and <appender> element. Make sure that the API key is valid and allow the Messages | Write permission . Make sure to include a valid log ID. Make sure that you have sufficient log messages in your subscription and that you didn't disable logging to the log or include any ignore filters/rules. Enable and inspect log4net's internal debug log by including the following code in your web/app.config file to reveal any exceptions happening inside the log4net engine room or one of the appenders: <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <appSettings> <add key=\"log4net.Internal.Debug\" value=\"true\"/> </appSettings> <system.diagnostics> <trace autoflush=\"true\"> <listeners> <add name=\"textWriterTraceListener\" type=\"System.Diagnostics.TextWriterTraceListener\" initializeData=\"C:\\temp\\log4net-debug.log\" /> </listeners> </trace> </system.diagnostics> </configuration>","title":"log4net Troubleshooting"},{"location":"logging-to-elmah-io-from-log4net/#systemiofileloadexception-could-not-load-file-or-assembly-log4net","text":"In case you get the following exception while trying to log messages to elmah.io: System.IO.FileLoadException: Could not load file or assembly 'log4net, Version=2.0.8.0, Culture=neutral, PublicKeyToken=669e0ddf0bb1aa2a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040) This indicates they either the log4net.dll file is missing or there's a problem with assembly bindings. You can include a binding redirect to the newest version of log4net by including the following code in your web/app.config file: <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <runtime> <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <dependentAssembly> <assemblyIdentity name=\"log4net\" publicKeyToken=\"669e0ddf0bb1aa2a\" culture=\"neutral\"/> <bindingRedirect oldVersion=\"0.0.0.0-2.0.12.0\" newVersion=\"2.0.12.0\"/> </dependentAssembly> </assemblyBinding> </runtime> </configuration>","title":"System.IO.FileLoadException: Could not load file or assembly 'log4net ..."},{"location":"logging-to-elmah-io-from-logary/","text":"Logging to elmah.io from Logary Logary is a semantic logging framework like Serilog and Microsoft Semantic Logging. Combining semantic logs with elmah.io is a perfect fit since elmah.io has been designed with semantics from the ground up. In this tutorial, we\u2019ll add Logary to a Console application, but the process is almost identical to other project types. Create a new console application and add the elmah.io target for Logary: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Logary.Targets.ElmahIO Install-Package Logary.Targets.ElmahIO <PackageReference Include=\"Logary.Targets.ElmahIO\" Version=\"5.*\" /> paket add Logary.Targets.ElmahIO Configuration in F# Configure elmah.io just like you would any normal target: withTargets [ // ... ElmahIO.create { logId = Guid.Parse \"LOG_ID\"; apiKey = \"API_KEY\" } \"elmah.io\" ] >> withRules [ // ... Rule.createForTarget \"elmah.io\" ] where LOG_ID is the id of your log ( Where is my log ID? ). Configuration in C# Configuration in C# is just as easy: .Target<ElmahIO.Builder>( \"elmah.io\", conf => conf.Target.SendTo(logId: \"LOG_ID\", apiKey: \"API_KEY\")) where API_KEY is your API key and LOG_ID is the ID of your log. Logging To start logging messages to elmah.io, you can use the following F# code: let logger = logary.getLogger (PointName [| \"Logary\"; \"Samples\"; \"main\" |]) Message.event Info \"User logged in\" |> Message.setField \"userName\" \"haf\" |> Logger.logSimple logger or in C#: var logger = logary.GetLogger(\"Logary.CSharpExample\"); logger.LogEventFormat(LogLevel.Fatal, \"Unhandled {exception}!\", e);","title":"Logging from Logary"},{"location":"logging-to-elmah-io-from-logary/#logging-to-elmahio-from-logary","text":"Logary is a semantic logging framework like Serilog and Microsoft Semantic Logging. Combining semantic logs with elmah.io is a perfect fit since elmah.io has been designed with semantics from the ground up. In this tutorial, we\u2019ll add Logary to a Console application, but the process is almost identical to other project types. Create a new console application and add the elmah.io target for Logary: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Logary.Targets.ElmahIO Install-Package Logary.Targets.ElmahIO <PackageReference Include=\"Logary.Targets.ElmahIO\" Version=\"5.*\" /> paket add Logary.Targets.ElmahIO","title":"Logging to elmah.io from Logary"},{"location":"logging-to-elmah-io-from-logary/#configuration-in-f","text":"Configure elmah.io just like you would any normal target: withTargets [ // ... ElmahIO.create { logId = Guid.Parse \"LOG_ID\"; apiKey = \"API_KEY\" } \"elmah.io\" ] >> withRules [ // ... Rule.createForTarget \"elmah.io\" ] where LOG_ID is the id of your log ( Where is my log ID? ).","title":"Configuration in F&#35;"},{"location":"logging-to-elmah-io-from-logary/#configuration-in-c","text":"Configuration in C# is just as easy: .Target<ElmahIO.Builder>( \"elmah.io\", conf => conf.Target.SendTo(logId: \"LOG_ID\", apiKey: \"API_KEY\")) where API_KEY is your API key and LOG_ID is the ID of your log.","title":"Configuration in C&#35;"},{"location":"logging-to-elmah-io-from-logary/#logging","text":"To start logging messages to elmah.io, you can use the following F# code: let logger = logary.getLogger (PointName [| \"Logary\"; \"Samples\"; \"main\" |]) Message.event Info \"User logged in\" |> Message.setField \"userName\" \"haf\" |> Logger.logSimple logger or in C#: var logger = logary.GetLogger(\"Logary.CSharpExample\"); logger.LogEventFormat(LogLevel.Fatal, \"Unhandled {exception}!\", e);","title":"Logging"},{"location":"logging-to-elmah-io-from-maui/","text":"Logging to elmah.io from MAUI We just started looking into .NET MAUI. If you want to go for the stable choice, check out the integration with Xamarin (the NuGet package is also in prerelease but more stable than the integration described on this page). A quick way to get started with logging from MAUI to elmah.io is by installing the Elmah.Io.Blazor.Wasm NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Blazor.Wasm --prerelease Install-Package Elmah.Io.Blazor.Wasm -IncludePrerelease <PackageReference Include=\"Elmah.Io.Blazor.Wasm\" Version=\"4.*\" /> paket add Elmah.Io.Blazor.Wasm The name is, admittedly, misleading here. The Elmah.Io.Blazor.Wasm package contains a simplified version of the Elmah.Io.Extensions.Logging package that doesn't make use of the Elmah.Io.Client package to communicate with the elmah.io API. Finally, configure the elmah.io logger in the MauiProgram.cs file: public static MauiApp CreateMauiApp() { var builder = MauiApp.CreateBuilder(); builder .UseMauiApp<App>() // ... .Logging .AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); return builder.Build(); } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the ID of the log you want messages sent to ( Where is my log ID? ). The logging initialization code will log all exceptions logged through ILogger both manually and by MAUI itself. MAUI supports dependency injection of the ILogger like most other web and mobile frameworks built on top of .NET. Some exceptions are not logged through Microsoft.Extensions.Logging why you need to handle these manually. If you have worked with Xamarin, you probably know about the various exceptions-related events (like UnhandledException ). Which event you need to subscribe to depends on the current platform. An easy approach is to use Matt Johnson-Pint's MauiExceptions class available here . When the class is added, logging uncaught exceptions is using a few lines of code: // Replace with an instance of the ILogger ILogger logger; // Subscribe to the UnhandledException event and log it through ILogger MauiExceptions.UnhandledException += (sender, args) => { var exception = (Exception)args.ExceptionObject; logger.LogError(exception, exception.GetBaseException().Message); } In case MauiExceptions doesn't trigger the UnhandledException event you can implement the code yourself. The event you need to implements depends on the platform where the application is executed. Look through the code for MauiExceptions to get inspiration. For Windows the code will look like this: public class MauiProgram { public static MauiApp CreateMauiApp() { var builder = MauiApp.CreateBuilder(); // ... builder.Logging.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); var provider = builder.Build(); AppDomain.CurrentDomain.FirstChanceException += (_, args) => { var logger = provider.Services.GetRequiredService<ILogger<MauiProgram>>(); logger.LogError(args.Exception, args.Exception.Message); }; return provider; } }","title":"Logging from MAUI"},{"location":"logging-to-elmah-io-from-maui/#logging-to-elmahio-from-maui","text":"We just started looking into .NET MAUI. If you want to go for the stable choice, check out the integration with Xamarin (the NuGet package is also in prerelease but more stable than the integration described on this page). A quick way to get started with logging from MAUI to elmah.io is by installing the Elmah.Io.Blazor.Wasm NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Blazor.Wasm --prerelease Install-Package Elmah.Io.Blazor.Wasm -IncludePrerelease <PackageReference Include=\"Elmah.Io.Blazor.Wasm\" Version=\"4.*\" /> paket add Elmah.Io.Blazor.Wasm The name is, admittedly, misleading here. The Elmah.Io.Blazor.Wasm package contains a simplified version of the Elmah.Io.Extensions.Logging package that doesn't make use of the Elmah.Io.Client package to communicate with the elmah.io API. Finally, configure the elmah.io logger in the MauiProgram.cs file: public static MauiApp CreateMauiApp() { var builder = MauiApp.CreateBuilder(); builder .UseMauiApp<App>() // ... .Logging .AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); return builder.Build(); } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the ID of the log you want messages sent to ( Where is my log ID? ). The logging initialization code will log all exceptions logged through ILogger both manually and by MAUI itself. MAUI supports dependency injection of the ILogger like most other web and mobile frameworks built on top of .NET. Some exceptions are not logged through Microsoft.Extensions.Logging why you need to handle these manually. If you have worked with Xamarin, you probably know about the various exceptions-related events (like UnhandledException ). Which event you need to subscribe to depends on the current platform. An easy approach is to use Matt Johnson-Pint's MauiExceptions class available here . When the class is added, logging uncaught exceptions is using a few lines of code: // Replace with an instance of the ILogger ILogger logger; // Subscribe to the UnhandledException event and log it through ILogger MauiExceptions.UnhandledException += (sender, args) => { var exception = (Exception)args.ExceptionObject; logger.LogError(exception, exception.GetBaseException().Message); } In case MauiExceptions doesn't trigger the UnhandledException event you can implement the code yourself. The event you need to implements depends on the platform where the application is executed. Look through the code for MauiExceptions to get inspiration. For Windows the code will look like this: public class MauiProgram { public static MauiApp CreateMauiApp() { var builder = MauiApp.CreateBuilder(); // ... builder.Logging.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); var provider = builder.Build(); AppDomain.CurrentDomain.FirstChanceException += (_, args) => { var logger = provider.Services.GetRequiredService<ILogger<MauiProgram>>(); logger.LogError(args.Exception, args.Exception.Message); }; return provider; } }","title":"Logging to elmah.io from MAUI"},{"location":"logging-to-elmah-io-from-microsoft-extensions-logging/","text":"Logging to elmah.io from Microsoft.Extensions.Logging Logging to elmah.io from Microsoft.Extensions.Logging Logging from ASP.NET Core Include HTTP context Logging from a console application Logging custom properties Setting category Logging with LoggerMessage Include source code Options Setting application name appsettings.json configuration Filtering log messages Logging through a proxy Microsoft.Extensions.Logging Troubleshooting Microsoft.Extensions.Logging is both a logging framework itself and a logging abstraction on top of other logging frameworks like log4net and Serilog. Start by installing the Elmah.Io.Extensions.Logging package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Extensions.Logging Install-Package Elmah.Io.Extensions.Logging <PackageReference Include=\"Elmah.Io.Extensions.Logging\" Version=\"5.*\" /> paket add Elmah.Io.Extensions.Logging Locate your API key ( Where is my API key? ) and log ID. The two values will be referenced as API_KEY and LOG_ID ( Where is my log ID? ) in the following. Logging from ASP.NET Core In the Program.cs file, add a new using statement: using Elmah.Io.Extensions.Logging; Then call the AddElmahIo -method as shown here: builder.Logging.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); builder.Logging.AddFilter<ElmahIoLoggerProvider>(null, LogLevel.Warning); By calling, the AddFilter -method, you ensure that only warnings and up are logged to elmah.io. The API key and log ID can also be configured in appsettings.json : { // ... \"ElmahIo\": { \"ApiKey\": \"API_KEY\", \"LogId\": \"LOG_ID\" } } To tell Microsoft.Extensions.Logging to use configuration from the appsettings.json file, include the following code in Program.cs : builder.Services.Configure<ElmahIoProviderOptions>(builder.Configuration.GetSection(\"ElmahIo\")); builder.Logging.AddConfiguration(builder.Configuration.GetSection(\"Logging\")); builder.Logging.AddElmahIo(); The first line fetches elmah.io configuration from the ElmahIo object in the appsettings.json file. The second line configures log levels in Microsoft.Extensions.Logging from the Logging object in appsettings.json . The third line adds the elmah.io logger to Microsoft.Extensions.Logging. Notice how the overload without any options object is called since options are already loaded from appsettings.json . Start logging messages by injecting an ILogger in your controllers: public class HomeController : Controller { private readonly ILogger<HomeController> logger; public HomeController(ILogger<HomeController> logger) { this.logger = logger; } public IActionResult Index() { logger.LogWarning(\"Request to index\"); return View(); } } Include HTTP context A common use case for using Microsoft.Extensions.Logging is part of an ASP.NET Core project. When combining the two, you would expect the log messages to contain relevant information from the HTTP context (like URL, status code, cookies, etc.). This is not the case out of the box, since Microsoft.Extensions.Logging doesn't know which project type includes it. Note Logging HTTP context requires Elmah.Io.Extensions.Logging version 3.6.x or newer. To add HTTP context properties to log messages when logging from ASP.NET Core, install the Elmah.Io.AspNetCore.ExtensionsLogging NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.AspNetCore.ExtensionsLogging Install-Package Elmah.Io.AspNetCore.ExtensionsLogging <PackageReference Include=\"Elmah.Io.AspNetCore.ExtensionsLogging\" Version=\"5.*\" /> paket add Elmah.Io.AspNetCore.ExtensionsLogging Then call the UseElmahIoExtensionsLogging method in the Program.cs file: // ... Exception handling middleware app.UseElmahIoExtensionsLogging(); // ... UseMvc etc. It's important to call the UseElmahIoExtensionsLogging method after any calls to UseElmahIo , UseAuthentication , and other exception handling middleware but before UseMvc and UseEndpoints . If you experience logged errors without the HTTP context, try moving the UseElmahIoExtensionsLogging method as the first call in the Configure method. Logging from a console application Choose the right framework version: .NET >= 6 .NET Core 3 Configure logging to elmah.io using a new or existing ServiceCollection : var services = new ServiceCollection(); services.AddLogging(logging => logging.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); })); Get a reference to the LoggerFactory : using var serviceProvider = services.BuildServiceProvider(); var loggerFactory = serviceProvider.GetService<ILoggerFactory>(); Create a new LoggerFactory and configure it to use elmah.io: using var loggerFactory = LoggerFactory.Create(builder => builder .AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); })); Adding the using keyword is important to let elmah.io store messages before exiting the application. Finally, create a new logger and start logging exceptions: var logger = factory.CreateLogger(\"MyLog\"); logger.LogError(ex, \"Unexpected error\"); Logging custom properties Elmah.Io.Extensions.Logging support Microsoft.Extensions.Logging scopes from version 3.6.x . In short, scopes are a way to decorate your log messages like enrichers in Serilog and context in NLog and log4net. By including properties in a scope, these properties automatically go into the Data tab on elmah.io. To define a new scope, wrap your logging code in a using : using (logger.BeginScope(new Dictionary<string, object> { { \"UserId\", 42 } })) { logger.LogInformation(\"Someone says hello\"); } In the example above, the UserId key will be added on the Data tab with the value of 42 . Like the other logging framework integrations, Elmah.Io.Extensions.Logging supports a range of known keys that can be used to insert value in the correct fields on the elmah.io UI. using (logger.BeginScope(new Dictionary<string, object> { { \"statuscode\", 500 }, { \"method\", \"GET\" } })) { logger.LogError(\"Request to {url} caused an error\", \"/profile\"); } In this example, a log message with the template Request to {url} caused an error to be logged. The use of the variable names statuscode , method , and url will fill in those values in the correct fields on elmah.io. For a reference of all possible property names, check out the property names on CreateMessage . An alternative is to use the OnMessage action. As an example, we'll add a version number to all messages: logging .AddElmahIo(options => { // ... options.OnMessage = msg => { msg.Version = \"2.0.0\"; }; }); You can even access the current HTTP context in the OnMessage action. To do so, start by creating a new class named DecorateElmahIoMessages : public class DecorateElmahIoMessages : IConfigureOptions<ElmahIoProviderOptions> { private readonly IHttpContextAccessor httpContextAccessor; public DecorateElmahIoMessages(IHttpContextAccessor httpContextAccessor) { this.httpContextAccessor = httpContextAccessor; } public void Configure(ElmahIoProviderOptions options) { options.OnMessage = msg => { var context = httpContextAccessor.HttpContext; if (context == null) return; msg.User = context.User?.Identity?.Name; }; } } Then register IHttpContextAccessor and the new class in the Program.cs file: builder.Services.AddHttpContextAccessor(); builder.Services.AddSingleton<IConfigureOptions<ElmahIoProviderOptions>, DecorateElmahIoMessages>(); Setting category elmah.io provide a field named Category to better group log messages by class name, namespace, or similar. Category maps to Microsoft.Extensions.Logging field of the same name. The category field is automatically set when using a typed logger: ILogger<MyType> logger = ...; logger.LogInformation(\"This is an information message with category\"); The category can be overwritten using a property named category on either the log message or a new scope: using (logger.BeginScope(new Dictionary<string, object> { { \"category\", \"The category\" } })) { logger.LogInformation(\"This is an information message with category\"); } Logging with LoggerMessage .NET 6 introduced the LoggerMessage attribute that uses source generators for highly usable and performant log statements. Elmah.Io.Extensions.Logging fully supports log messages sent through logger messages. [LoggerMessage(Level = LogLevel.Information, Message = \"Created {UserId}\")] private static partial void LogUserCreated(ILogger logger, int userId); // ... LogUserCreated(logger, 42); This will log a message saying Created 42 to elmah.io. Remember that the class including the LogUserCreated method needs to be declared as partial as well. .NET 8 extends this even further by offering a new LogProperties attribute: [LoggerMessage(Level = LogLevel.Information, Message = \"Created user\")] private static partial void LogUserCreated(ILogger logger, [LogProperties]User user); // ... LogUserCreated(logger, new User { Firstname = \"Tyrion\", Lastname = \"Lannister\" }); By adding the LogProperties attribute to the User parameter, a log message saying Created user will be sent to elmah.io. In addition, the Data tab on the extended log message details will show the keys user.Firstname and user.Lastname with the values from the User object provided for the LogUserCreated method. Include source code You can use the OnMessage action already described to include source code to log messages. This will require a stack trace in the Detail property with filenames and line numbers in it. There are multiple ways of including source code to log messages. In short, you will need to install the Elmah.Io.Client.Extensions.SourceCode NuGet package and call the WithSourceCodeFromPdb method in the OnMessage action: logging .AddElmahIo(options => { // ... options.OnMessage = msg => { msg.WithSourceCodeFromPdb(); }; }); Check out How to include source code in log messages for additional requirements to make source code show up on elmah.io. Note Including source code on log messages is available in the Elmah.Io.Client v4 package and forward. Options Setting application name If logging to the same log from multiple applications it is a good idea to set unique application names from each app. This will let you search and filter errors on the elmah.io UI. To set an application name, add the following code to the options: logging.AddElmahIo(options => { // ... options.Application = \"MyApp\"; }); The application name can also be configured through appsettings.json : { // ... \"ElmahIo\": { // ... \"Application\": \"MyApp\" } } appsettings.json configuration Some of the configuration for Elmah.Io.Extensions.Logging can be done through the appsettings.json file when using ASP.NET Core 2.x or above. To configure the minimum log level, add a new logger named ElmahIo to the settings file: { \"Logging\": { // ... \"ElmahIo\": { \"LogLevel\": { \"Default\": \"Warning\" } } } } Finally, tell the logger to look for this information, by adding a bit of code to Program.cs : builder.Logging.AddConfiguration(builder.Configuration.GetSection(\"Logging\")); Filtering log messages As default, the elmah.io logger for Microsoft.Extensions.Logging only logs warnings, errors, and fatals. The rationale behind this is that we build an error management system and doesn't do much to support millions of debug messages from your code. Sometimes you may want to log non-exception messages, though. To do so, use filters in Microsoft.Extensions.Logging. To log everything from log level Information and up, do the following: Inside Program.cs change the minimum level: builder.Logging.AddFilter<ElmahIoLoggerProvider>(null, LogLevel.Information); In the code sample, every log message with a log level of Information and up will be logged to elmah.io. Logging through a proxy Note Proxy configuration requires 3.5.49 or newer. You can log through a proxy using options: logging.AddElmahIo(options => { // ... options.WebProxy = new WebProxy(\"localhost\", 8000); }); In this example, the elmah.io client routes all traffic through http://localhost:8000 . Microsoft.Extensions.Logging Troubleshooting Here are some things to try out if logging from Microsoft.Extensions.Logging to elmah.io doesn't work: Run the diagnose command with the elmah.io CLI as shown here: Diagnose potential problems with an elmah.io installation . x message(s) dropped because of queue size limit If you see this message in your log, it means that you are logging a large number of messages to elmah.io through Microsoft.Extensions.Logging within a short period of time. Either turn down the volume using filters: logging.AddElmahIo(options => { /*...*/ }); logging.AddFilter<ElmahIoLoggerProvider>(null, LogLevel.Warning); or increase the queue size of Elmah.Io.Extensions.Logging : logging.AddElmahIo(options => { // ... options.BackgroundQueueSize = 5000; }); Uncaught errors are logged twice If you have both Elmah.Io.Extensions.Logging and Elmah.Io.AspNetCore installed, you may see a pattern of uncaught errors being logged twice. This is because a range of middleware from Microsoft (and others) log uncaught exceptions through ILogger . When you have Elmah.Io.AspNetCore installed you typically don't want other pieces of middleware to log the same error but with fewer details. To ignore duplicate errors you need to figure out which middleware class that trigger the logging and in which namespace it is located. One or more of the following ignore filters can be added to your Program.cs file: logging.AddFilter<ElmahIoLoggerProvider>( \"Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware\", LogLevel.None); logging.AddFilter<ElmahIoLoggerProvider>( \"Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware\", LogLevel.None); logging.AddFilter<ElmahIoLoggerProvider>( \"Microsoft.AspNetCore.Server.IIS.Core\", LogLevel.None); Be aware that these lines will ignore all messages from the specified class or namespace. To ignore specific errors you can implement the OnFilter action as shown previously in this document. Ignoring uncaught errors from IIS would look like this: options.OnFilter = msg => { return msg.TitleTemplate == \"Connection ID \\\"{ConnectionId}\\\", Request ID \\\"{TraceIdentifier}\\\": An unhandled exception was thrown by the application.\"; };","title":"Logging from Microsoft.Extensions.Logging"},{"location":"logging-to-elmah-io-from-microsoft-extensions-logging/#logging-to-elmahio-from-microsoftextensionslogging","text":"Logging to elmah.io from Microsoft.Extensions.Logging Logging from ASP.NET Core Include HTTP context Logging from a console application Logging custom properties Setting category Logging with LoggerMessage Include source code Options Setting application name appsettings.json configuration Filtering log messages Logging through a proxy Microsoft.Extensions.Logging Troubleshooting Microsoft.Extensions.Logging is both a logging framework itself and a logging abstraction on top of other logging frameworks like log4net and Serilog. Start by installing the Elmah.Io.Extensions.Logging package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Extensions.Logging Install-Package Elmah.Io.Extensions.Logging <PackageReference Include=\"Elmah.Io.Extensions.Logging\" Version=\"5.*\" /> paket add Elmah.Io.Extensions.Logging Locate your API key ( Where is my API key? ) and log ID. The two values will be referenced as API_KEY and LOG_ID ( Where is my log ID? ) in the following.","title":"Logging to elmah.io from Microsoft.Extensions.Logging"},{"location":"logging-to-elmah-io-from-microsoft-extensions-logging/#logging-from-aspnet-core","text":"In the Program.cs file, add a new using statement: using Elmah.Io.Extensions.Logging; Then call the AddElmahIo -method as shown here: builder.Logging.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); builder.Logging.AddFilter<ElmahIoLoggerProvider>(null, LogLevel.Warning); By calling, the AddFilter -method, you ensure that only warnings and up are logged to elmah.io. The API key and log ID can also be configured in appsettings.json : { // ... \"ElmahIo\": { \"ApiKey\": \"API_KEY\", \"LogId\": \"LOG_ID\" } } To tell Microsoft.Extensions.Logging to use configuration from the appsettings.json file, include the following code in Program.cs : builder.Services.Configure<ElmahIoProviderOptions>(builder.Configuration.GetSection(\"ElmahIo\")); builder.Logging.AddConfiguration(builder.Configuration.GetSection(\"Logging\")); builder.Logging.AddElmahIo(); The first line fetches elmah.io configuration from the ElmahIo object in the appsettings.json file. The second line configures log levels in Microsoft.Extensions.Logging from the Logging object in appsettings.json . The third line adds the elmah.io logger to Microsoft.Extensions.Logging. Notice how the overload without any options object is called since options are already loaded from appsettings.json . Start logging messages by injecting an ILogger in your controllers: public class HomeController : Controller { private readonly ILogger<HomeController> logger; public HomeController(ILogger<HomeController> logger) { this.logger = logger; } public IActionResult Index() { logger.LogWarning(\"Request to index\"); return View(); } }","title":"Logging from ASP.NET Core"},{"location":"logging-to-elmah-io-from-microsoft-extensions-logging/#include-http-context","text":"A common use case for using Microsoft.Extensions.Logging is part of an ASP.NET Core project. When combining the two, you would expect the log messages to contain relevant information from the HTTP context (like URL, status code, cookies, etc.). This is not the case out of the box, since Microsoft.Extensions.Logging doesn't know which project type includes it. Note Logging HTTP context requires Elmah.Io.Extensions.Logging version 3.6.x or newer. To add HTTP context properties to log messages when logging from ASP.NET Core, install the Elmah.Io.AspNetCore.ExtensionsLogging NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.AspNetCore.ExtensionsLogging Install-Package Elmah.Io.AspNetCore.ExtensionsLogging <PackageReference Include=\"Elmah.Io.AspNetCore.ExtensionsLogging\" Version=\"5.*\" /> paket add Elmah.Io.AspNetCore.ExtensionsLogging Then call the UseElmahIoExtensionsLogging method in the Program.cs file: // ... Exception handling middleware app.UseElmahIoExtensionsLogging(); // ... UseMvc etc. It's important to call the UseElmahIoExtensionsLogging method after any calls to UseElmahIo , UseAuthentication , and other exception handling middleware but before UseMvc and UseEndpoints . If you experience logged errors without the HTTP context, try moving the UseElmahIoExtensionsLogging method as the first call in the Configure method.","title":"Include HTTP context"},{"location":"logging-to-elmah-io-from-microsoft-extensions-logging/#logging-from-a-console-application","text":"Choose the right framework version: .NET >= 6 .NET Core 3 Configure logging to elmah.io using a new or existing ServiceCollection : var services = new ServiceCollection(); services.AddLogging(logging => logging.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); })); Get a reference to the LoggerFactory : using var serviceProvider = services.BuildServiceProvider(); var loggerFactory = serviceProvider.GetService<ILoggerFactory>(); Create a new LoggerFactory and configure it to use elmah.io: using var loggerFactory = LoggerFactory.Create(builder => builder .AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); })); Adding the using keyword is important to let elmah.io store messages before exiting the application. Finally, create a new logger and start logging exceptions: var logger = factory.CreateLogger(\"MyLog\"); logger.LogError(ex, \"Unexpected error\");","title":"Logging from a console application"},{"location":"logging-to-elmah-io-from-microsoft-extensions-logging/#logging-custom-properties","text":"Elmah.Io.Extensions.Logging support Microsoft.Extensions.Logging scopes from version 3.6.x . In short, scopes are a way to decorate your log messages like enrichers in Serilog and context in NLog and log4net. By including properties in a scope, these properties automatically go into the Data tab on elmah.io. To define a new scope, wrap your logging code in a using : using (logger.BeginScope(new Dictionary<string, object> { { \"UserId\", 42 } })) { logger.LogInformation(\"Someone says hello\"); } In the example above, the UserId key will be added on the Data tab with the value of 42 . Like the other logging framework integrations, Elmah.Io.Extensions.Logging supports a range of known keys that can be used to insert value in the correct fields on the elmah.io UI. using (logger.BeginScope(new Dictionary<string, object> { { \"statuscode\", 500 }, { \"method\", \"GET\" } })) { logger.LogError(\"Request to {url} caused an error\", \"/profile\"); } In this example, a log message with the template Request to {url} caused an error to be logged. The use of the variable names statuscode , method , and url will fill in those values in the correct fields on elmah.io. For a reference of all possible property names, check out the property names on CreateMessage . An alternative is to use the OnMessage action. As an example, we'll add a version number to all messages: logging .AddElmahIo(options => { // ... options.OnMessage = msg => { msg.Version = \"2.0.0\"; }; }); You can even access the current HTTP context in the OnMessage action. To do so, start by creating a new class named DecorateElmahIoMessages : public class DecorateElmahIoMessages : IConfigureOptions<ElmahIoProviderOptions> { private readonly IHttpContextAccessor httpContextAccessor; public DecorateElmahIoMessages(IHttpContextAccessor httpContextAccessor) { this.httpContextAccessor = httpContextAccessor; } public void Configure(ElmahIoProviderOptions options) { options.OnMessage = msg => { var context = httpContextAccessor.HttpContext; if (context == null) return; msg.User = context.User?.Identity?.Name; }; } } Then register IHttpContextAccessor and the new class in the Program.cs file: builder.Services.AddHttpContextAccessor(); builder.Services.AddSingleton<IConfigureOptions<ElmahIoProviderOptions>, DecorateElmahIoMessages>();","title":"Logging custom properties"},{"location":"logging-to-elmah-io-from-microsoft-extensions-logging/#setting-category","text":"elmah.io provide a field named Category to better group log messages by class name, namespace, or similar. Category maps to Microsoft.Extensions.Logging field of the same name. The category field is automatically set when using a typed logger: ILogger<MyType> logger = ...; logger.LogInformation(\"This is an information message with category\"); The category can be overwritten using a property named category on either the log message or a new scope: using (logger.BeginScope(new Dictionary<string, object> { { \"category\", \"The category\" } })) { logger.LogInformation(\"This is an information message with category\"); }","title":"Setting category"},{"location":"logging-to-elmah-io-from-microsoft-extensions-logging/#logging-with-loggermessage","text":".NET 6 introduced the LoggerMessage attribute that uses source generators for highly usable and performant log statements. Elmah.Io.Extensions.Logging fully supports log messages sent through logger messages. [LoggerMessage(Level = LogLevel.Information, Message = \"Created {UserId}\")] private static partial void LogUserCreated(ILogger logger, int userId); // ... LogUserCreated(logger, 42); This will log a message saying Created 42 to elmah.io. Remember that the class including the LogUserCreated method needs to be declared as partial as well. .NET 8 extends this even further by offering a new LogProperties attribute: [LoggerMessage(Level = LogLevel.Information, Message = \"Created user\")] private static partial void LogUserCreated(ILogger logger, [LogProperties]User user); // ... LogUserCreated(logger, new User { Firstname = \"Tyrion\", Lastname = \"Lannister\" }); By adding the LogProperties attribute to the User parameter, a log message saying Created user will be sent to elmah.io. In addition, the Data tab on the extended log message details will show the keys user.Firstname and user.Lastname with the values from the User object provided for the LogUserCreated method.","title":"Logging with LoggerMessage"},{"location":"logging-to-elmah-io-from-microsoft-extensions-logging/#include-source-code","text":"You can use the OnMessage action already described to include source code to log messages. This will require a stack trace in the Detail property with filenames and line numbers in it. There are multiple ways of including source code to log messages. In short, you will need to install the Elmah.Io.Client.Extensions.SourceCode NuGet package and call the WithSourceCodeFromPdb method in the OnMessage action: logging .AddElmahIo(options => { // ... options.OnMessage = msg => { msg.WithSourceCodeFromPdb(); }; }); Check out How to include source code in log messages for additional requirements to make source code show up on elmah.io. Note Including source code on log messages is available in the Elmah.Io.Client v4 package and forward.","title":"Include source code"},{"location":"logging-to-elmah-io-from-microsoft-extensions-logging/#options","text":"","title":"Options"},{"location":"logging-to-elmah-io-from-microsoft-extensions-logging/#setting-application-name","text":"If logging to the same log from multiple applications it is a good idea to set unique application names from each app. This will let you search and filter errors on the elmah.io UI. To set an application name, add the following code to the options: logging.AddElmahIo(options => { // ... options.Application = \"MyApp\"; }); The application name can also be configured through appsettings.json : { // ... \"ElmahIo\": { // ... \"Application\": \"MyApp\" } }","title":"Setting application name"},{"location":"logging-to-elmah-io-from-microsoft-extensions-logging/#appsettingsjson-configuration","text":"Some of the configuration for Elmah.Io.Extensions.Logging can be done through the appsettings.json file when using ASP.NET Core 2.x or above. To configure the minimum log level, add a new logger named ElmahIo to the settings file: { \"Logging\": { // ... \"ElmahIo\": { \"LogLevel\": { \"Default\": \"Warning\" } } } } Finally, tell the logger to look for this information, by adding a bit of code to Program.cs : builder.Logging.AddConfiguration(builder.Configuration.GetSection(\"Logging\"));","title":"appsettings.json configuration"},{"location":"logging-to-elmah-io-from-microsoft-extensions-logging/#filtering-log-messages","text":"As default, the elmah.io logger for Microsoft.Extensions.Logging only logs warnings, errors, and fatals. The rationale behind this is that we build an error management system and doesn't do much to support millions of debug messages from your code. Sometimes you may want to log non-exception messages, though. To do so, use filters in Microsoft.Extensions.Logging. To log everything from log level Information and up, do the following: Inside Program.cs change the minimum level: builder.Logging.AddFilter<ElmahIoLoggerProvider>(null, LogLevel.Information); In the code sample, every log message with a log level of Information and up will be logged to elmah.io.","title":"Filtering log messages"},{"location":"logging-to-elmah-io-from-microsoft-extensions-logging/#logging-through-a-proxy","text":"Note Proxy configuration requires 3.5.49 or newer. You can log through a proxy using options: logging.AddElmahIo(options => { // ... options.WebProxy = new WebProxy(\"localhost\", 8000); }); In this example, the elmah.io client routes all traffic through http://localhost:8000 .","title":"Logging through a proxy"},{"location":"logging-to-elmah-io-from-microsoft-extensions-logging/#microsoftextensionslogging-troubleshooting","text":"Here are some things to try out if logging from Microsoft.Extensions.Logging to elmah.io doesn't work: Run the diagnose command with the elmah.io CLI as shown here: Diagnose potential problems with an elmah.io installation . x message(s) dropped because of queue size limit If you see this message in your log, it means that you are logging a large number of messages to elmah.io through Microsoft.Extensions.Logging within a short period of time. Either turn down the volume using filters: logging.AddElmahIo(options => { /*...*/ }); logging.AddFilter<ElmahIoLoggerProvider>(null, LogLevel.Warning); or increase the queue size of Elmah.Io.Extensions.Logging : logging.AddElmahIo(options => { // ... options.BackgroundQueueSize = 5000; }); Uncaught errors are logged twice If you have both Elmah.Io.Extensions.Logging and Elmah.Io.AspNetCore installed, you may see a pattern of uncaught errors being logged twice. This is because a range of middleware from Microsoft (and others) log uncaught exceptions through ILogger . When you have Elmah.Io.AspNetCore installed you typically don't want other pieces of middleware to log the same error but with fewer details. To ignore duplicate errors you need to figure out which middleware class that trigger the logging and in which namespace it is located. One or more of the following ignore filters can be added to your Program.cs file: logging.AddFilter<ElmahIoLoggerProvider>( \"Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware\", LogLevel.None); logging.AddFilter<ElmahIoLoggerProvider>( \"Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware\", LogLevel.None); logging.AddFilter<ElmahIoLoggerProvider>( \"Microsoft.AspNetCore.Server.IIS.Core\", LogLevel.None); Be aware that these lines will ignore all messages from the specified class or namespace. To ignore specific errors you can implement the OnFilter action as shown previously in this document. Ignoring uncaught errors from IIS would look like this: options.OnFilter = msg => { return msg.TitleTemplate == \"Connection ID \\\"{ConnectionId}\\\", Request ID \\\"{TraceIdentifier}\\\": An unhandled exception was thrown by the application.\"; };","title":"Microsoft.Extensions.Logging Troubleshooting"},{"location":"logging-to-elmah-io-from-nancy/","text":"Logging to elmah.io from Nancy Warning Nancy is no longer maintained. While the installation steps on this page (probably) still work, we no longer test the Nancy.Elmah package. As with MVC and WebAPI, Nancy already provides ELMAH support out of the box. Start by installing the Elmah.Io NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io Install-Package Elmah.Io <PackageReference Include=\"Elmah.Io\" Version=\"5.*\" /> paket add Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). To integrate Nancy and ELMAH, Christian Westman already did a great job with his Nancy.Elmah package. Install it using NuGet: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Nancy.Elmah Install-Package Nancy.Elmah <PackageReference Include=\"Nancy.Elmah\" Version=\"0.*\" /> paket add Nancy.Elmah You must install the Elmah.Io package before Nancy.Elmah , because both packages like to add the ELMAH configuration to the web.config file. If you install it the other way around, you will need to add the elmah.io ErrorLog element manually. For Nancy to know how to log errors to Elmah, you need to add an override of the DefaultNancyBootstrapper. Create a new class in the root named Bootstrapper: using Nancy; using Nancy.Bootstrapper; using Nancy.Elmah; using Nancy.TinyIoc; namespace Elmah.Io.NancyExample { public class Bootstrapper : DefaultNancyBootstrapper { protected override void ApplicationStartup(TinyIoCContainer container, IPipelines pipelines) { base.ApplicationStartup(container, pipelines); Elmahlogging.Enable(pipelines, \"elmah\"); } } } The important thing in the code sample is line 13, where we tell Nancy.Elmah to hook into the pipeline of Nancy for it to catch and log HTTP errors. The second parameter for the Enable-method, lets us define a URL for the ELMAH error page, which can be used as an alternative to elmah.io for quick viewing of errors.","title":"Logging from Nancy"},{"location":"logging-to-elmah-io-from-nancy/#logging-to-elmahio-from-nancy","text":"Warning Nancy is no longer maintained. While the installation steps on this page (probably) still work, we no longer test the Nancy.Elmah package. As with MVC and WebAPI, Nancy already provides ELMAH support out of the box. Start by installing the Elmah.Io NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io Install-Package Elmah.Io <PackageReference Include=\"Elmah.Io\" Version=\"5.*\" /> paket add Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). To integrate Nancy and ELMAH, Christian Westman already did a great job with his Nancy.Elmah package. Install it using NuGet: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Nancy.Elmah Install-Package Nancy.Elmah <PackageReference Include=\"Nancy.Elmah\" Version=\"0.*\" /> paket add Nancy.Elmah You must install the Elmah.Io package before Nancy.Elmah , because both packages like to add the ELMAH configuration to the web.config file. If you install it the other way around, you will need to add the elmah.io ErrorLog element manually. For Nancy to know how to log errors to Elmah, you need to add an override of the DefaultNancyBootstrapper. Create a new class in the root named Bootstrapper: using Nancy; using Nancy.Bootstrapper; using Nancy.Elmah; using Nancy.TinyIoc; namespace Elmah.Io.NancyExample { public class Bootstrapper : DefaultNancyBootstrapper { protected override void ApplicationStartup(TinyIoCContainer container, IPipelines pipelines) { base.ApplicationStartup(container, pipelines); Elmahlogging.Enable(pipelines, \"elmah\"); } } } The important thing in the code sample is line 13, where we tell Nancy.Elmah to hook into the pipeline of Nancy for it to catch and log HTTP errors. The second parameter for the Enable-method, lets us define a URL for the ELMAH error page, which can be used as an alternative to elmah.io for quick viewing of errors.","title":"Logging to elmah.io from Nancy"},{"location":"logging-to-elmah-io-from-nlog/","text":"Logging to elmah.io from NLog Logging to elmah.io from NLog Configuration in .NET Specify API key and log ID in appSettings IntelliSense Configuration in appsettings.json elmah.io configuration outside the NLog section IntelliSense Configuration in code Logging custom properties Setting application name Setting version number Setting category Message hooks Decorating log messages Include source code Handle errors Error filtering Include HTTP context in ASP.NET and ASP.NET Core NLog Troubleshooting System.IO.FileLoadException: Could not load file or assembly 'Newtonsoft.Json' NLog is one of the most popular logging frameworks for .NET. With an active history of almost 10 years, the possibilities with NLog are many and it\u2019s easy to find documentation on how to use it. To start logging messages from NLog to elmah.io, you need to install the Elmah.Io.NLog NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.NLog Install-Package Elmah.Io.NLog <PackageReference Include=\"Elmah.Io.NLog\" Version=\"5.*\" /> paket add Elmah.Io.NLog Warning Please don't use NLog 4.6.0 since that version contains a bug that causes the elmah.io target to not load correctly. 4.5.11 , 4.6.1 , or newer. Configuration in .NET To configure the elmah.io target, add the following configuration to your app.config/web.config/nlog.config depending on what kind of project you\u2019ve created: Elmah.Io.NLog 3.x/4.x Elmah.Io.NLog >= 5 <extensions> <add assembly=\"Elmah.Io.NLog\"/> </extensions> <targets> <target name=\"elmahio\" type=\"elmah.io\" apiKey=\"API_KEY\" logId=\"LOG_ID\"/> </targets> <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"elmahio\" /> </rules> <targets> <target name=\"elmahio\" type=\"elmah.io, Elmah.Io.NLog\" apiKey=\"API_KEY\" logId=\"LOG_ID\"/> </targets> <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"elmahio\" /> </rules> Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the ID of the log you want messages sent to ( Where is my log ID? ). In the example, we specify the level minimum as Info. This tells NLog to log only information, warning, error, and fatal messages. You may adjust this, but be aware that your elmah.io log may run full pretty fast, especially if you log thousands and thousands of trace and debug messages. Log messages to elmah.io, just as with every other target and NLog: log.Warn(\"This is a warning message\"); log.Error(new Exception(), \"This is an error message\"); Specify API key and log ID in appSettings If you are already using elmah.io, you may have your API key and log ID in the appSettings element already. To use these settings from withing the NLog target configuration you can use an NLog layout formatter: <targets> <target name=\"elmahio\" type=\"elmah.io\" apiKey=\"${appsetting:item=apiKey}\" logId=\"${appsetting:item=logId}\"/> </targets> By using the layout ${appsetting:item=apiKey} you tell NLog that the value for this attribute is in an appSettings element named elmahKey : <appSettings> <add key=\"apiKey\" value=\"API_KEY\" /> <add key=\"logId\" value=\"LOG_ID\" /> </appSettings> Note The appSettings layout formatter only works when targeting .NET Full Framework and requires Elmah.Io.NLog version 3.3.x or above and NLog version 4.6.x or above. IntelliSense There is support for adding IntelliSense in Visual Studio for the NLog.config file. Extend the nlog root element like this: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:elmahio=\"http://www.nlog-project.org/schemas/NLog.Targets.Elmah.Io.xsd\" xsi:schemaLocation=\"http://www.nlog-project.org/schemas/NLog.Targets.Elmah.Io.xsd http://www.nlog-project.org/schemas/NLog.Targets.Elmah.Io.xsd\"> <!-- ... --> </nlog> Then change the type attribute in the target to xsi:type : <target xsi:type=\"elmahio:elmah.io\" /> Configuration in appsettings.json .NET 5 (previously Core) and newer switched from declaring XML configuration in app/web/nlog.config files to JSON configuration in an appsettings.json file. To configure elmah.io in JSON, install the NLog.Extensions.Logging NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package NLog.Extensions.Logging Install-Package NLog.Extensions.Logging <PackageReference Include=\"NLog.Extensions.Logging\" Version=\"1.*\" /> paket add NLog.Extensions.Logging Extend the appsettings.json file with a new NLog section: Elmah.Io.NLog 3.x/4.x Elmah.Io.NLog >= 5 { \"NLog\": { \"throwConfigExceptions\": true, \"extensions\": [ { \"assembly\": \"Elmah.Io.NLog\" } ], \"targets\": { \"elmahio\": { \"type\": \"elmah.io\", \"apiKey\": \"API_KEY\", \"logId\": \"LOG_ID\" } }, \"rules\": [ { \"logger\": \"*\", \"minLevel\": \"Info\", \"writeTo\": \"elmahio\" } ] } } { \"NLog\": { \"throwConfigExceptions\": true, \"targets\": { \"elmahio\": { \"type\": \"elmah.io, Elmah.Io.NLog\", \"apiKey\": \"API_KEY\", \"logId\": \"LOG_ID\" } }, \"rules\": [ { \"logger\": \"*\", \"minLevel\": \"Info\", \"writeTo\": \"elmahio\" } ] } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the ID of the log you want messages sent to ( Where is my log ID? ). If you haven't already loaded the configuration in your application, make sure to do so: var config = new ConfigurationBuilder() .AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true) .Build(); Finally, tell NLog how to load the NLog configuration section: LogManager.Configuration = new NLogLoggingConfiguration(config.GetSection(\"NLog\")); elmah.io configuration outside the NLog section You might not want the elmah.io API key and log Id inside the NLog section or already have an ElmahIo section defined and want to reuse that. Splitting up configuration like that is supported through NLog layout renderers: { \"NLog\": { // ... \"targets\": { \"elmahio\": { \"type\": \"elmah.io\", \"apiKey\": \"${configsetting:item=ElmahIo.ApiKey}\", \"logId\": \"${configsetting:item=ElmahIo.LogId}\" } }, // ... }, \"ElmahIo\": { \"ApiKey\": \"API_KEY\", \"LogId\": \"LOG_ID\" } } Notice how the value of the apiKey and logId parameters have been replaced with ${configsetting:item=ElmahIo.*} . At the bottom, the ElmahIo section wraps the API key and log Id. To make this work, you will need an additional line of C# when setting up NLog logging: var config = new ConfigurationBuilder() .AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true) .Build(); ConfigSettingLayoutRenderer.DefaultConfiguration = config; // \ud83d\udc48 add this line LogManager.Configuration = new NLogLoggingConfiguration(config.GetSection(\"NLog\")); IntelliSense There is support for adding IntelliSense in Visual Studio for the NLog section in the appsettings.json file. Copy and paste the following link into the Schema textbox above the file content: https://nlog-project.org/schemas/appsettings.schema.json Configuration in code The elmah.io target can be configured from C# code if you prefer or need to access the built-in events (see more later). The following adds logging to elmah.io: var config = new LoggingConfiguration(); var elmahIoTarget = new ElmahIoTarget(); elmahIoTarget.Name = \"elmahio\"; elmahIoTarget.ApiKey = \"API_KEY\"; elmahIoTarget.LogId = \"LOG_ID\"; config.AddTarget(elmahIoTarget); config.AddRuleForAllLevels(elmahIoTarget); LogManager.Configuration = config; The example will log all log levels to elmah.io. For more information about how to configure individual log levels, check out the NLog documentation on GitHub . Logging custom properties NLog supports logging custom properties in multiple ways. If you want to include a property (like a version number) in all log messages, you might want to look into the OnMessage feature on Elmah.Io.NLog . With custom properties, you can log additional key/value pairs with every log message. The elmah.io target for NLog supports custom properties as well. Properties are persisted alongside every log message in elmah.io and searchable if named correctly . One way to log custom properties with NLog and elmah.io is to use the overload of each logging-method that takes a LogEventInfo object as a parameter: var infoMessage = new LogEventInfo(LogLevel.Info, \"\", \"This is an information message\"); infoMessage.Properties.Add(\"Some Property Key\", \"Some Property Value\"); log.Info(infoMessage); This saves the information message in elmah.io with a custom property with key Some Property Key and value Some Property Value . As of NLog 4.5, structured logging is supported as well. To log a property as part of the log message, use the new syntax as shown here: log.Warn(\"Property named {FirstName}\", \"Donald\"); In the example, NLog will log the message Property named \"Donald\" , but the key ( FirstName ) and value ( Donald ), will also be available in the Data tab inside elmah.io. Elmah.Io.NLog provides a range of reserved property names, that can be used to fill in data in the correct fields on the elmah.io UI. Let's say you want to fill the User field using structured logging only: log.Info(\"{Quote} from {User}\", \"Hasta la vista, baby\", \"T-800\"); This will fill in the value T-800 in the User field, as well as add two key/value pairs ( Quote and User ) to the Data tab on elmah.io. For a reference of all possible property names, check out the property names on CreateMessage . NLog also provides a fluent API (available in the NLog.Fluent namespace) that some might find more readable: logger.Info() .Message(\"I'll be back\") .Property(\"User\", \"T-800\") .Write(); If you want to use the normal logging methods like Info and Error , you can do so injunction with the MappedDiagnosticsLogicalContext class, also provided by NLog: using (MappedDiagnosticsLogicalContext.SetScoped(\"User\", \"T-800\")) { logger.Info(\"I'll be back\"); } This will create the same result as the example above. In NLog 5 MappedDiagnosticsLogicalContext has been deprecated in favor of a scope context: using (logger.PushScopeProperty(\"User\", \"T-800\")) { logger.Info(\"I'll be back\"); } Setting application name The application field on elmah.io can be set globally using NLog's global context: GlobalDiagnosticsContext.Set(\"Application\", \"My application name\"); Setting version number The version field on elmah.io can be set globally using NLog's global context: GlobalDiagnosticsContext.Set(\"Version\", \"1.2.3\"); Setting category elmah.io provide a field named Category to better group log messages by class name, namespace, or similar. Category maps to NLog's logger field automatically when using Elmah.Io.NLog . The category field can be overwritten using a scoped property (NLog 5): using (logger.PushScopeProperty(\"category\", \"The category\")) { logger.Info(\"This is an information message with category\"); } Message hooks Elmah.Io.NLog provides message hooks similar to the integrations with ASP.NET and ASP.NET Core. Message hooks need to be implemented in C#. Either configure the elmah.io target in C# or fetch the target already configured in XML: var elmahIoTarget = (ElmahIoTarget)LogManager.Configuration.FindTargetByName(\"elmahio\"); You also need to install the most recent version of the Elmah.Io.Client NuGet package to use message hooks. Decorating log messages To include additional information on log messages, you can use the OnMessage action: elmahIoTarget.OnMessage = msg => { msg.Version = \"1.0.0\"; }; The example above includes a version number on all errors. Include source code You can use the OnMessage action to include source code to log messages. This will require a stack trace in the Detail property with filenames and line numbers in it. There are multiple ways of including source code to log messages. In short, you will need to install the Elmah.Io.Client.Extensions.SourceCode NuGet package and call the WithSourceCodeFromPdb method in the OnMessage action: elmahIoTarget.OnMessage = msg => { msg.WithSourceCodeFromPdb(); }; Check out How to include source code in log messages for additional requirements to make source code show up on elmah.io. Note Including source code on log messages is available in the Elmah.Io.Client v4 package and forward. Handle errors To handle any errors happening while processing a log message, you can use the OnError event when initializing the elmah.io target: elmahIoTarget.OnError = (msg, err) => { // Do something here }; The example implements a callback if logging to elmah.io fails. How you choose to implement this is entirely up to your application and tech stack. Error filtering To ignore specific errors based on their content, you can use the OnFilter event when initializing the elmah.io target: elmahIoTarget.OnFilter = msg => { return msg.Title.Contains(\"trace\"); }; The example above ignores any log messages with the word trace in the title. Include HTTP context in ASP.NET and ASP.NET Core When logging through NLog from a web application, you may want to include HTTP contextual information like the current URL, status codes, server variables, etc. NLog provides two web-packages to include this information. For ASP.NET, MVC, and Web API you can install the NLog.Web NuGet package and include the following code in web.config : <system.webServer> <modules runAllManagedModulesForAllRequests=\"true\"> <add name=\"NLog\" type=\"NLog.Web.NLogHttpModule, NLog.Web\" /> </modules> </system.webServer> For ASP.NET Core you can install the NLog.Web.AspNetCore NuGet package. When installed, the elmah.io NLog target automatically picks up the HTTP context and fills in all possible fields on messages sent to elmah.io. NLog Troubleshooting Here are some things to try out if logging from NLog to elmah.io doesn't work: Run the diagnose command with the elmah.io CLI as shown here: Diagnose potential problems with an elmah.io installation . Make sure that you have the newest Elmah.Io.NLog and Elmah.Io.Client packages installed. Make sure to include all of the configuration from the example above. That includes both the <extensions> (Only needed in Elmah.Io.NLog 3 and 4), <targets> , and <rules> element. Make sure that the API key is valid and allow the Messages | Write permission . Make sure to include a valid log ID. Make sure that you have sufficient log messages in your subscription and that you didn't disable logging to the log or include any ignore filters/rules. Always make sure to call LogManager.Shutdown() before exiting the application to make sure that all log messages are flushed. If you are re-using the logger but only want to shut down the thread that is logging messages or similar you can call LogManager.Flush() which will store all batched messages. Extend the nlog element with internalLogLevel=\"Warn\" internalLogFile=\"c:\\temp\\nlog-internal.log and inspect that log file for any internal NLog errors. System.IO.FileLoadException: Could not load file or assembly 'Newtonsoft.Json' If you see this error in the internal NLog file it means that there's a problem with multiple assemblies referencing different versions of Newtonsoft.Json (also known as NuGet dependency hell ). This can be fixed by redirecting to the installed version in the App.config or Web.config file: <runtime> <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <dependentAssembly> <assemblyIdentity name=\"Newtonsoft.Json\" publicKeyToken=\"30ad4fe6b2a6aeed\" culture=\"neutral\" /> <bindingRedirect oldVersion=\"0.0.0.0-13.0.1.0\" newVersion=\"13.0.1.0\"/> </dependentAssembly> </assemblyBinding> </runtime>","title":"Logging from NLog"},{"location":"logging-to-elmah-io-from-nlog/#logging-to-elmahio-from-nlog","text":"Logging to elmah.io from NLog Configuration in .NET Specify API key and log ID in appSettings IntelliSense Configuration in appsettings.json elmah.io configuration outside the NLog section IntelliSense Configuration in code Logging custom properties Setting application name Setting version number Setting category Message hooks Decorating log messages Include source code Handle errors Error filtering Include HTTP context in ASP.NET and ASP.NET Core NLog Troubleshooting System.IO.FileLoadException: Could not load file or assembly 'Newtonsoft.Json' NLog is one of the most popular logging frameworks for .NET. With an active history of almost 10 years, the possibilities with NLog are many and it\u2019s easy to find documentation on how to use it. To start logging messages from NLog to elmah.io, you need to install the Elmah.Io.NLog NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.NLog Install-Package Elmah.Io.NLog <PackageReference Include=\"Elmah.Io.NLog\" Version=\"5.*\" /> paket add Elmah.Io.NLog Warning Please don't use NLog 4.6.0 since that version contains a bug that causes the elmah.io target to not load correctly. 4.5.11 , 4.6.1 , or newer.","title":"Logging to elmah.io from NLog"},{"location":"logging-to-elmah-io-from-nlog/#configuration-in-net","text":"To configure the elmah.io target, add the following configuration to your app.config/web.config/nlog.config depending on what kind of project you\u2019ve created: Elmah.Io.NLog 3.x/4.x Elmah.Io.NLog >= 5 <extensions> <add assembly=\"Elmah.Io.NLog\"/> </extensions> <targets> <target name=\"elmahio\" type=\"elmah.io\" apiKey=\"API_KEY\" logId=\"LOG_ID\"/> </targets> <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"elmahio\" /> </rules> <targets> <target name=\"elmahio\" type=\"elmah.io, Elmah.Io.NLog\" apiKey=\"API_KEY\" logId=\"LOG_ID\"/> </targets> <rules> <logger name=\"*\" minlevel=\"Info\" writeTo=\"elmahio\" /> </rules> Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the ID of the log you want messages sent to ( Where is my log ID? ). In the example, we specify the level minimum as Info. This tells NLog to log only information, warning, error, and fatal messages. You may adjust this, but be aware that your elmah.io log may run full pretty fast, especially if you log thousands and thousands of trace and debug messages. Log messages to elmah.io, just as with every other target and NLog: log.Warn(\"This is a warning message\"); log.Error(new Exception(), \"This is an error message\");","title":"Configuration in .NET"},{"location":"logging-to-elmah-io-from-nlog/#specify-api-key-and-log-id-in-appsettings","text":"If you are already using elmah.io, you may have your API key and log ID in the appSettings element already. To use these settings from withing the NLog target configuration you can use an NLog layout formatter: <targets> <target name=\"elmahio\" type=\"elmah.io\" apiKey=\"${appsetting:item=apiKey}\" logId=\"${appsetting:item=logId}\"/> </targets> By using the layout ${appsetting:item=apiKey} you tell NLog that the value for this attribute is in an appSettings element named elmahKey : <appSettings> <add key=\"apiKey\" value=\"API_KEY\" /> <add key=\"logId\" value=\"LOG_ID\" /> </appSettings> Note The appSettings layout formatter only works when targeting .NET Full Framework and requires Elmah.Io.NLog version 3.3.x or above and NLog version 4.6.x or above.","title":"Specify API key and log ID in appSettings"},{"location":"logging-to-elmah-io-from-nlog/#intellisense","text":"There is support for adding IntelliSense in Visual Studio for the NLog.config file. Extend the nlog root element like this: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:elmahio=\"http://www.nlog-project.org/schemas/NLog.Targets.Elmah.Io.xsd\" xsi:schemaLocation=\"http://www.nlog-project.org/schemas/NLog.Targets.Elmah.Io.xsd http://www.nlog-project.org/schemas/NLog.Targets.Elmah.Io.xsd\"> <!-- ... --> </nlog> Then change the type attribute in the target to xsi:type : <target xsi:type=\"elmahio:elmah.io\" />","title":"IntelliSense"},{"location":"logging-to-elmah-io-from-nlog/#configuration-in-appsettingsjson","text":".NET 5 (previously Core) and newer switched from declaring XML configuration in app/web/nlog.config files to JSON configuration in an appsettings.json file. To configure elmah.io in JSON, install the NLog.Extensions.Logging NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package NLog.Extensions.Logging Install-Package NLog.Extensions.Logging <PackageReference Include=\"NLog.Extensions.Logging\" Version=\"1.*\" /> paket add NLog.Extensions.Logging Extend the appsettings.json file with a new NLog section: Elmah.Io.NLog 3.x/4.x Elmah.Io.NLog >= 5 { \"NLog\": { \"throwConfigExceptions\": true, \"extensions\": [ { \"assembly\": \"Elmah.Io.NLog\" } ], \"targets\": { \"elmahio\": { \"type\": \"elmah.io\", \"apiKey\": \"API_KEY\", \"logId\": \"LOG_ID\" } }, \"rules\": [ { \"logger\": \"*\", \"minLevel\": \"Info\", \"writeTo\": \"elmahio\" } ] } } { \"NLog\": { \"throwConfigExceptions\": true, \"targets\": { \"elmahio\": { \"type\": \"elmah.io, Elmah.Io.NLog\", \"apiKey\": \"API_KEY\", \"logId\": \"LOG_ID\" } }, \"rules\": [ { \"logger\": \"*\", \"minLevel\": \"Info\", \"writeTo\": \"elmahio\" } ] } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the ID of the log you want messages sent to ( Where is my log ID? ). If you haven't already loaded the configuration in your application, make sure to do so: var config = new ConfigurationBuilder() .AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true) .Build(); Finally, tell NLog how to load the NLog configuration section: LogManager.Configuration = new NLogLoggingConfiguration(config.GetSection(\"NLog\"));","title":"Configuration in appsettings.json"},{"location":"logging-to-elmah-io-from-nlog/#elmahio-configuration-outside-the-nlog-section","text":"You might not want the elmah.io API key and log Id inside the NLog section or already have an ElmahIo section defined and want to reuse that. Splitting up configuration like that is supported through NLog layout renderers: { \"NLog\": { // ... \"targets\": { \"elmahio\": { \"type\": \"elmah.io\", \"apiKey\": \"${configsetting:item=ElmahIo.ApiKey}\", \"logId\": \"${configsetting:item=ElmahIo.LogId}\" } }, // ... }, \"ElmahIo\": { \"ApiKey\": \"API_KEY\", \"LogId\": \"LOG_ID\" } } Notice how the value of the apiKey and logId parameters have been replaced with ${configsetting:item=ElmahIo.*} . At the bottom, the ElmahIo section wraps the API key and log Id. To make this work, you will need an additional line of C# when setting up NLog logging: var config = new ConfigurationBuilder() .AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true) .Build(); ConfigSettingLayoutRenderer.DefaultConfiguration = config; // \ud83d\udc48 add this line LogManager.Configuration = new NLogLoggingConfiguration(config.GetSection(\"NLog\"));","title":"elmah.io configuration outside the NLog section"},{"location":"logging-to-elmah-io-from-nlog/#intellisense_1","text":"There is support for adding IntelliSense in Visual Studio for the NLog section in the appsettings.json file. Copy and paste the following link into the Schema textbox above the file content: https://nlog-project.org/schemas/appsettings.schema.json","title":"IntelliSense"},{"location":"logging-to-elmah-io-from-nlog/#configuration-in-code","text":"The elmah.io target can be configured from C# code if you prefer or need to access the built-in events (see more later). The following adds logging to elmah.io: var config = new LoggingConfiguration(); var elmahIoTarget = new ElmahIoTarget(); elmahIoTarget.Name = \"elmahio\"; elmahIoTarget.ApiKey = \"API_KEY\"; elmahIoTarget.LogId = \"LOG_ID\"; config.AddTarget(elmahIoTarget); config.AddRuleForAllLevels(elmahIoTarget); LogManager.Configuration = config; The example will log all log levels to elmah.io. For more information about how to configure individual log levels, check out the NLog documentation on GitHub .","title":"Configuration in code"},{"location":"logging-to-elmah-io-from-nlog/#logging-custom-properties","text":"NLog supports logging custom properties in multiple ways. If you want to include a property (like a version number) in all log messages, you might want to look into the OnMessage feature on Elmah.Io.NLog . With custom properties, you can log additional key/value pairs with every log message. The elmah.io target for NLog supports custom properties as well. Properties are persisted alongside every log message in elmah.io and searchable if named correctly . One way to log custom properties with NLog and elmah.io is to use the overload of each logging-method that takes a LogEventInfo object as a parameter: var infoMessage = new LogEventInfo(LogLevel.Info, \"\", \"This is an information message\"); infoMessage.Properties.Add(\"Some Property Key\", \"Some Property Value\"); log.Info(infoMessage); This saves the information message in elmah.io with a custom property with key Some Property Key and value Some Property Value . As of NLog 4.5, structured logging is supported as well. To log a property as part of the log message, use the new syntax as shown here: log.Warn(\"Property named {FirstName}\", \"Donald\"); In the example, NLog will log the message Property named \"Donald\" , but the key ( FirstName ) and value ( Donald ), will also be available in the Data tab inside elmah.io. Elmah.Io.NLog provides a range of reserved property names, that can be used to fill in data in the correct fields on the elmah.io UI. Let's say you want to fill the User field using structured logging only: log.Info(\"{Quote} from {User}\", \"Hasta la vista, baby\", \"T-800\"); This will fill in the value T-800 in the User field, as well as add two key/value pairs ( Quote and User ) to the Data tab on elmah.io. For a reference of all possible property names, check out the property names on CreateMessage . NLog also provides a fluent API (available in the NLog.Fluent namespace) that some might find more readable: logger.Info() .Message(\"I'll be back\") .Property(\"User\", \"T-800\") .Write(); If you want to use the normal logging methods like Info and Error , you can do so injunction with the MappedDiagnosticsLogicalContext class, also provided by NLog: using (MappedDiagnosticsLogicalContext.SetScoped(\"User\", \"T-800\")) { logger.Info(\"I'll be back\"); } This will create the same result as the example above. In NLog 5 MappedDiagnosticsLogicalContext has been deprecated in favor of a scope context: using (logger.PushScopeProperty(\"User\", \"T-800\")) { logger.Info(\"I'll be back\"); }","title":"Logging custom properties"},{"location":"logging-to-elmah-io-from-nlog/#setting-application-name","text":"The application field on elmah.io can be set globally using NLog's global context: GlobalDiagnosticsContext.Set(\"Application\", \"My application name\");","title":"Setting application name"},{"location":"logging-to-elmah-io-from-nlog/#setting-version-number","text":"The version field on elmah.io can be set globally using NLog's global context: GlobalDiagnosticsContext.Set(\"Version\", \"1.2.3\");","title":"Setting version number"},{"location":"logging-to-elmah-io-from-nlog/#setting-category","text":"elmah.io provide a field named Category to better group log messages by class name, namespace, or similar. Category maps to NLog's logger field automatically when using Elmah.Io.NLog . The category field can be overwritten using a scoped property (NLog 5): using (logger.PushScopeProperty(\"category\", \"The category\")) { logger.Info(\"This is an information message with category\"); }","title":"Setting category"},{"location":"logging-to-elmah-io-from-nlog/#message-hooks","text":"Elmah.Io.NLog provides message hooks similar to the integrations with ASP.NET and ASP.NET Core. Message hooks need to be implemented in C#. Either configure the elmah.io target in C# or fetch the target already configured in XML: var elmahIoTarget = (ElmahIoTarget)LogManager.Configuration.FindTargetByName(\"elmahio\"); You also need to install the most recent version of the Elmah.Io.Client NuGet package to use message hooks.","title":"Message hooks"},{"location":"logging-to-elmah-io-from-nlog/#decorating-log-messages","text":"To include additional information on log messages, you can use the OnMessage action: elmahIoTarget.OnMessage = msg => { msg.Version = \"1.0.0\"; }; The example above includes a version number on all errors.","title":"Decorating log messages"},{"location":"logging-to-elmah-io-from-nlog/#include-source-code","text":"You can use the OnMessage action to include source code to log messages. This will require a stack trace in the Detail property with filenames and line numbers in it. There are multiple ways of including source code to log messages. In short, you will need to install the Elmah.Io.Client.Extensions.SourceCode NuGet package and call the WithSourceCodeFromPdb method in the OnMessage action: elmahIoTarget.OnMessage = msg => { msg.WithSourceCodeFromPdb(); }; Check out How to include source code in log messages for additional requirements to make source code show up on elmah.io. Note Including source code on log messages is available in the Elmah.Io.Client v4 package and forward.","title":"Include source code"},{"location":"logging-to-elmah-io-from-nlog/#handle-errors","text":"To handle any errors happening while processing a log message, you can use the OnError event when initializing the elmah.io target: elmahIoTarget.OnError = (msg, err) => { // Do something here }; The example implements a callback if logging to elmah.io fails. How you choose to implement this is entirely up to your application and tech stack.","title":"Handle errors"},{"location":"logging-to-elmah-io-from-nlog/#error-filtering","text":"To ignore specific errors based on their content, you can use the OnFilter event when initializing the elmah.io target: elmahIoTarget.OnFilter = msg => { return msg.Title.Contains(\"trace\"); }; The example above ignores any log messages with the word trace in the title.","title":"Error filtering"},{"location":"logging-to-elmah-io-from-nlog/#include-http-context-in-aspnet-and-aspnet-core","text":"When logging through NLog from a web application, you may want to include HTTP contextual information like the current URL, status codes, server variables, etc. NLog provides two web-packages to include this information. For ASP.NET, MVC, and Web API you can install the NLog.Web NuGet package and include the following code in web.config : <system.webServer> <modules runAllManagedModulesForAllRequests=\"true\"> <add name=\"NLog\" type=\"NLog.Web.NLogHttpModule, NLog.Web\" /> </modules> </system.webServer> For ASP.NET Core you can install the NLog.Web.AspNetCore NuGet package. When installed, the elmah.io NLog target automatically picks up the HTTP context and fills in all possible fields on messages sent to elmah.io.","title":"Include HTTP context in ASP.NET and ASP.NET Core"},{"location":"logging-to-elmah-io-from-nlog/#nlog-troubleshooting","text":"Here are some things to try out if logging from NLog to elmah.io doesn't work: Run the diagnose command with the elmah.io CLI as shown here: Diagnose potential problems with an elmah.io installation . Make sure that you have the newest Elmah.Io.NLog and Elmah.Io.Client packages installed. Make sure to include all of the configuration from the example above. That includes both the <extensions> (Only needed in Elmah.Io.NLog 3 and 4), <targets> , and <rules> element. Make sure that the API key is valid and allow the Messages | Write permission . Make sure to include a valid log ID. Make sure that you have sufficient log messages in your subscription and that you didn't disable logging to the log or include any ignore filters/rules. Always make sure to call LogManager.Shutdown() before exiting the application to make sure that all log messages are flushed. If you are re-using the logger but only want to shut down the thread that is logging messages or similar you can call LogManager.Flush() which will store all batched messages. Extend the nlog element with internalLogLevel=\"Warn\" internalLogFile=\"c:\\temp\\nlog-internal.log and inspect that log file for any internal NLog errors.","title":"NLog Troubleshooting"},{"location":"logging-to-elmah-io-from-nlog/#systemiofileloadexception-could-not-load-file-or-assembly-newtonsoftjson","text":"If you see this error in the internal NLog file it means that there's a problem with multiple assemblies referencing different versions of Newtonsoft.Json (also known as NuGet dependency hell ). This can be fixed by redirecting to the installed version in the App.config or Web.config file: <runtime> <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <dependentAssembly> <assemblyIdentity name=\"Newtonsoft.Json\" publicKeyToken=\"30ad4fe6b2a6aeed\" culture=\"neutral\" /> <bindingRedirect oldVersion=\"0.0.0.0-13.0.1.0\" newVersion=\"13.0.1.0\"/> </dependentAssembly> </assemblyBinding> </runtime>","title":"System.IO.FileLoadException: Could not load file or assembly 'Newtonsoft.Json'"},{"location":"logging-to-elmah-io-from-opentelemetry/","text":"Logging to elmah.io from OpenTelemetry Logging to elmah.io from OpenTelemetry Enriching log messages elmah.io provides an exporter for OpenTelemetry that will store log entries sent through OpenTelemetry in elmah.io. Start by installing the Elmah.Io.OpenTelemetry package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.OpenTelemetry --prerelease Install-Package Elmah.Io.OpenTelemetry -IncludePrerelease <PackageReference Include=\"Elmah.Io.OpenTelemetry\" Version=\"5.*\" /> paket add Elmah.Io.OpenTelemetry In the Program.cs file, configure the elmah.io exporter: builder.Logging.AddOpenTelemetry(options => { options.AddElmahIoExporter(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); }); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the log ID of the log you want to log to. This will store log messages sent through OpenTelemetry in elmah.io. It is recommended only to send warnings and up to avoid spending your message quota with debug and information messages: builder.Logging.AddFilter<OpenTelemetryLoggerProvider>(\"*\", LogLevel.Warning); Enriching log messages The elmah.io exporter pulls as much information as possible, but you might want to enrich log messages with even more data. This can be done in numerous ways. The export options provide an OnMessage action that you may already know from other client integrations: options.AddElmahIoExporter(options => { // ... options.OnMessage = msg => msg.Version = \"42\"; }); You can include a service name on log messages using the ResourceBuilder part of OpenTelemetry: builder.Logging.AddOpenTelemetry(options => { // ... options.SetResourceBuilder(ResourceBuilder .CreateEmpty() .AddService(\"Elmah.Io.OpenTelemetry.AspNetCore80\")); }); OpenTelemetry supports custom properties as Attributes . Global attributes can be added using the ResourceBuilder too: options.SetResourceBuilder(ResourceBuilder .CreateEmpty() // ... .AddAttributes(new Dictionary<string, object> { { \"deployment.environment\", builder.Environment.EnvironmentName } })); When logging messages through the ILogger interface, logging scopes can be configured by setting the IncludeScopes property: builder.Logging.AddOpenTelemetry(options => { // ... options.IncludeScopes = true; }); When enabling scopes, log messages can be enriched by wrapping the log message in a new scope: using (logger.BeginScope(new { CorrelationId = \"42\" })) { logger.LogInformation(\"A log message\"); }","title":"Logging from OpenTelemetry"},{"location":"logging-to-elmah-io-from-opentelemetry/#logging-to-elmahio-from-opentelemetry","text":"Logging to elmah.io from OpenTelemetry Enriching log messages elmah.io provides an exporter for OpenTelemetry that will store log entries sent through OpenTelemetry in elmah.io. Start by installing the Elmah.Io.OpenTelemetry package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.OpenTelemetry --prerelease Install-Package Elmah.Io.OpenTelemetry -IncludePrerelease <PackageReference Include=\"Elmah.Io.OpenTelemetry\" Version=\"5.*\" /> paket add Elmah.Io.OpenTelemetry In the Program.cs file, configure the elmah.io exporter: builder.Logging.AddOpenTelemetry(options => { options.AddElmahIoExporter(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); }); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the log ID of the log you want to log to. This will store log messages sent through OpenTelemetry in elmah.io. It is recommended only to send warnings and up to avoid spending your message quota with debug and information messages: builder.Logging.AddFilter<OpenTelemetryLoggerProvider>(\"*\", LogLevel.Warning);","title":"Logging to elmah.io from OpenTelemetry"},{"location":"logging-to-elmah-io-from-opentelemetry/#enriching-log-messages","text":"The elmah.io exporter pulls as much information as possible, but you might want to enrich log messages with even more data. This can be done in numerous ways. The export options provide an OnMessage action that you may already know from other client integrations: options.AddElmahIoExporter(options => { // ... options.OnMessage = msg => msg.Version = \"42\"; }); You can include a service name on log messages using the ResourceBuilder part of OpenTelemetry: builder.Logging.AddOpenTelemetry(options => { // ... options.SetResourceBuilder(ResourceBuilder .CreateEmpty() .AddService(\"Elmah.Io.OpenTelemetry.AspNetCore80\")); }); OpenTelemetry supports custom properties as Attributes . Global attributes can be added using the ResourceBuilder too: options.SetResourceBuilder(ResourceBuilder .CreateEmpty() // ... .AddAttributes(new Dictionary<string, object> { { \"deployment.environment\", builder.Environment.EnvironmentName } })); When logging messages through the ILogger interface, logging scopes can be configured by setting the IncludeScopes property: builder.Logging.AddOpenTelemetry(options => { // ... options.IncludeScopes = true; }); When enabling scopes, log messages can be enriched by wrapping the log message in a new scope: using (logger.BeginScope(new { CorrelationId = \"42\" })) { logger.LogInformation(\"A log message\"); }","title":"Enriching log messages"},{"location":"logging-to-elmah-io-from-orchard/","text":"Logging to elmah.io from Orchard CMS Orchard CMS is a free, open-source community-focused content management system built on the ASP.NET MVC and ASP.NET Core platforms. This tutorial is written for the ASP.NET Core version of Orchard. If you want to log to elmah.io from the MVC version, you should follow our tutorial for MVC . To start logging to elmah.io, install the Elmah.Io.Client and Elmah.Io.AspNetCore NuGet packages: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client dotnet add package Elmah.Io.AspNetCore Install-Package Elmah.Io.Client Install-Package Elmah.Io.AspNetCore <PackageReference Include=\"Elmah.Io.Client\" Version=\"5.*\" /> <PackageReference Include=\"Elmah.Io.AspNetCore\" Version=\"5.*\" /> paket add Elmah.Io.Client paket add Elmah.Io.AspNetCore Then modify your Startup.cs file: public class Startup { public void ConfigureServices(IServiceCollection services) { // ... services.AddElmahIo(o => { o.ApiKey = \"API_KEY\"; o.LogId = new Guid(\"LOG_ID\"); }); } public void Configure(IApplicationBuilder app, IHostingEnvironment env) { // ... app.UseElmahIo(); // ... } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the id of the log ( Where is my log ID? ) where you want errors logged. Like with any other ASP.NET Core application, it's important to call the UseElmahIo -method after setting up other middleware handling exceptions (like UseDeveloperExceptionPage ). Orchard uses NLog as the internal logging framework. Hooking into this pipeline is a great way to log warnings and errors through NLog to elmah.io as well. Install the Elmah.Io.Nlog NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.NLog Install-Package Elmah.Io.NLog <PackageReference Include=\"Elmah.Io.NLog\" Version=\"5.*\" /> paket add Elmah.Io.NLog Add the elmah.io target to the NLog.config -file: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog> <extensions> <!-- ... --> <add assembly=\"Elmah.Io.NLog\"/> </extensions> <targets> <!-- ... --> <target name=\"elmahio\" type=\"elmah.io\" apiKey=\"API_KEY\" logId=\"LOG_ID\"/> </targets> <rules> <!-- ... --> <logger name=\"*\" minlevel=\"Warn\" writeTo=\"elmahio\" /> </rules> </nlog> Make sure not to log Trace and Debug messages to elmah.io, which will quickly use up the included storage.","title":"Logging from Orchard"},{"location":"logging-to-elmah-io-from-orchard/#logging-to-elmahio-from-orchard-cms","text":"Orchard CMS is a free, open-source community-focused content management system built on the ASP.NET MVC and ASP.NET Core platforms. This tutorial is written for the ASP.NET Core version of Orchard. If you want to log to elmah.io from the MVC version, you should follow our tutorial for MVC . To start logging to elmah.io, install the Elmah.Io.Client and Elmah.Io.AspNetCore NuGet packages: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client dotnet add package Elmah.Io.AspNetCore Install-Package Elmah.Io.Client Install-Package Elmah.Io.AspNetCore <PackageReference Include=\"Elmah.Io.Client\" Version=\"5.*\" /> <PackageReference Include=\"Elmah.Io.AspNetCore\" Version=\"5.*\" /> paket add Elmah.Io.Client paket add Elmah.Io.AspNetCore Then modify your Startup.cs file: public class Startup { public void ConfigureServices(IServiceCollection services) { // ... services.AddElmahIo(o => { o.ApiKey = \"API_KEY\"; o.LogId = new Guid(\"LOG_ID\"); }); } public void Configure(IApplicationBuilder app, IHostingEnvironment env) { // ... app.UseElmahIo(); // ... } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the id of the log ( Where is my log ID? ) where you want errors logged. Like with any other ASP.NET Core application, it's important to call the UseElmahIo -method after setting up other middleware handling exceptions (like UseDeveloperExceptionPage ). Orchard uses NLog as the internal logging framework. Hooking into this pipeline is a great way to log warnings and errors through NLog to elmah.io as well. Install the Elmah.Io.Nlog NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.NLog Install-Package Elmah.Io.NLog <PackageReference Include=\"Elmah.Io.NLog\" Version=\"5.*\" /> paket add Elmah.Io.NLog Add the elmah.io target to the NLog.config -file: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <nlog> <extensions> <!-- ... --> <add assembly=\"Elmah.Io.NLog\"/> </extensions> <targets> <!-- ... --> <target name=\"elmahio\" type=\"elmah.io\" apiKey=\"API_KEY\" logId=\"LOG_ID\"/> </targets> <rules> <!-- ... --> <logger name=\"*\" minlevel=\"Warn\" writeTo=\"elmahio\" /> </rules> </nlog> Make sure not to log Trace and Debug messages to elmah.io, which will quickly use up the included storage.","title":"Logging to elmah.io from Orchard CMS"},{"location":"logging-to-elmah-io-from-piranha-cms/","text":"Logging to elmah.io from Piranha CMS Piranha CMS is a popular headless CMS written in ASP.NET Core. elmah.io works with Piranha CMS out of the box. This document contains a quick installation guide for setting up elmah.io logging in Piranha CMS. For the full overview of logging from ASP.NET Core, check out Logging to elmah.io from ASP.NET Core . To start logging to elmah.io, install the Elmah.Io.AspNetCore NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.AspNetCore Install-Package Elmah.Io.AspNetCore <PackageReference Include=\"Elmah.Io.AspNetCore\" Version=\"5.*\" /> paket add Elmah.Io.AspNetCore Then modify your Startup.cs file: public class Startup { public void ConfigureServices(IServiceCollection services) { // ... services.AddElmahIo(o => { o.ApiKey = \"API_KEY\"; o.LogId = new Guid(\"LOG_ID\"); }); } public void Configure(IApplicationBuilder app, IHostingEnvironment env) { // ... app.UseElmahIo(); // ... } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the id of the log ( Where is my log ID? ) where you want errors logged. Make sure to call the UseElmahIo -method after setting up other middleware handling exceptions (like UseDeveloperExceptionPage ), but before the call to UsePiranha . To use structured logging and the ILogger interface with Piranha CMS and elmah.io, set up Microsoft.Extensions.Logging as explained here: Logging to elmah.io from Microsoft.Extensions.Logging .","title":"Logging from Piranha CMS"},{"location":"logging-to-elmah-io-from-piranha-cms/#logging-to-elmahio-from-piranha-cms","text":"Piranha CMS is a popular headless CMS written in ASP.NET Core. elmah.io works with Piranha CMS out of the box. This document contains a quick installation guide for setting up elmah.io logging in Piranha CMS. For the full overview of logging from ASP.NET Core, check out Logging to elmah.io from ASP.NET Core . To start logging to elmah.io, install the Elmah.Io.AspNetCore NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.AspNetCore Install-Package Elmah.Io.AspNetCore <PackageReference Include=\"Elmah.Io.AspNetCore\" Version=\"5.*\" /> paket add Elmah.Io.AspNetCore Then modify your Startup.cs file: public class Startup { public void ConfigureServices(IServiceCollection services) { // ... services.AddElmahIo(o => { o.ApiKey = \"API_KEY\"; o.LogId = new Guid(\"LOG_ID\"); }); } public void Configure(IApplicationBuilder app, IHostingEnvironment env) { // ... app.UseElmahIo(); // ... } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the id of the log ( Where is my log ID? ) where you want errors logged. Make sure to call the UseElmahIo -method after setting up other middleware handling exceptions (like UseDeveloperExceptionPage ), but before the call to UsePiranha . To use structured logging and the ILogger interface with Piranha CMS and elmah.io, set up Microsoft.Extensions.Logging as explained here: Logging to elmah.io from Microsoft.Extensions.Logging .","title":"Logging to elmah.io from Piranha CMS"},{"location":"logging-to-elmah-io-from-powershell/","text":"Logging to elmah.io from PowerShell Logging to elmah.io from PowerShell Log through the API Log through PoShLog.Sinks.ElmahIo Log through Elmah.Io.Client Examples Log error on low remaining disk PowerShell Troubleshooting There are a couple of options for logging to elmah.io from PowerShell. If you need to log a few messages, using the API is the easiest. Log through the API Logging to elmah.io from PowerShell is easy using built-in cmdlets: $apiKey = \"API_KEY\" $logId = \"LOG_ID\" $url = \"https://api.elmah.io/v3/messages/$logId/?api_key=$apiKey\" $body = @{ title = \"Error from PowerShell\" severity = \"Error\" detail = \"This is an error message logged from PowerShell\" hostname = hostname } Invoke-RestMethod -Method Post -Uri $url -Body ($body|ConvertTo-Json) -ContentType \"application/json-patch+json\" Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the ID of the log you want messages sent to ( Where is my log ID? ). Log through PoShLog.Sinks.ElmahIo PoShLog is a PowerShell logging module built on top of Serilog. To log to elmah.io using PoShLog, install the following packages: Install-Module -Name PoShLog Install-Module -Name PoShLog.Sinks.ElmahIo Logging messages can now be done using Write-*Log : Import-Module PoShLog Import-Module PoShLog.Sinks.ElmahIo New-Logger | Add-SinkElmahIo -ApiKey 'API_KEY' -LogId 'LOG_ID' | Start-Logger Write-ErrorLog 'Say My Name' # Don't forget to close the logger Close-Logger Log through Elmah.Io.Client If you prefer to use the Elmah.Io.Client NuGet package, you can do this in PowerShell too. First of all, you will need to include elmah.io.client.dll . How you do this is entirely up to you. You can include this assembly in your script location or you can download it through NuGet on every execution. To download the package through NuGet, you will need nuget.exe : $source = \"https://dist.nuget.org/win-x86-commandline/latest/nuget.exe\" $target = \".\\nuget.exe\" Invoke-WebRequest $source -OutFile $target Set-Alias nuget $target -Scope Global This script will download the latest version of the NuGet command-line tool and make it available through the command nuget . To install Elmah.Io.Client run nuget.exe : nuget install Elmah.Io.Client This will create an Elmah.Io.Client-version folder containing the latest stable version of the Elmah.Io.Client package. You now have Elmah.Io.Client.dll loaded into your shell and everything is set up to log to elmah.io. To do so, add try-catch around critical code: $logger = [Elmah.Io.Client.ElmahioAPI]::Create(\"API_KEY\") Try { # some code that may throw exceptions } Catch { $logger.Messages.Error([guid]::new(\"LOG_ID\"), $_.Exception, \"Oh no\") } In the first line, we create a new logger object. Then, in the Catch block, the catched exception is shipped off to the elmah.io log specified in LOG_ID together with a custom message. Examples For inspiration, here's a list of examples of common scenarios where you'd want to log to elmah.io from PowerShell. Log error on low remaining disk You can monitor when a server is running low on disk space like this: $cdrive = Get-Volume -DriveLetter C $sizeremainingingb = $cdrive.SizeRemaining/1024/1024/1024 if ($sizeremainingingb -lt 10) { $apiKey = \"API_KEY\" $logId = \"LOG_ID\" $url = \"https://api.elmah.io/v3/messages/$logId/?api_key=$apiKey\" $body = @{ title = \"Disk storage less than 10 gb\" severity = \"Error\" detail = \"Remaining storage in gb: $sizeremainingingb\" hostname = hostname } Invoke-RestMethod -Method Post -Uri $url -Body ($body|ConvertTo-Json) -ContentType \"application/json-patch+json\" } PowerShell Troubleshooting Elmah.Io.Client.ElmahioAPI cannot be loaded If PowerShell complains about Elmah.Io.Client.ElmahioAPI not being found, try adding the following lines to the script after installing the Elmah.Io.Client NuGet package: $elmahIoClientPath = Get-ChildItem -Path . -Filter Elmah.Io.Client.dll -Recurse ` | Where-Object {$_.FullName -match \"net45\"} [Reflection.Assembly]::LoadFile($elmahIoClientPath.FullName) $jsonNetPath = Get-ChildItem -Path . -Filter Newtonsoft.Json.dll -Recurse ` | Where-Object {$_.FullName -match \"net45\" -and $_.FullName -notmatch \"portable\"} [Reflection.Assembly]::LoadFile($jsonNetPath.FullName) You may need to include additional assemblies if PowerShell keeps complaining. The catch block is not invoked even though a cmdlet failed Most errors in PowerShell are non-terminating meaning that they are handled internally in the cmdlet. To force a cmdlet to use terminating errors use the -ErrorAction parameter: Try { My-Cmdlet -ErrorAction Stop } Catch { // Log to elmah.io }","title":"Logging from PowerShell"},{"location":"logging-to-elmah-io-from-powershell/#logging-to-elmahio-from-powershell","text":"Logging to elmah.io from PowerShell Log through the API Log through PoShLog.Sinks.ElmahIo Log through Elmah.Io.Client Examples Log error on low remaining disk PowerShell Troubleshooting There are a couple of options for logging to elmah.io from PowerShell. If you need to log a few messages, using the API is the easiest.","title":"Logging to elmah.io from PowerShell"},{"location":"logging-to-elmah-io-from-powershell/#log-through-the-api","text":"Logging to elmah.io from PowerShell is easy using built-in cmdlets: $apiKey = \"API_KEY\" $logId = \"LOG_ID\" $url = \"https://api.elmah.io/v3/messages/$logId/?api_key=$apiKey\" $body = @{ title = \"Error from PowerShell\" severity = \"Error\" detail = \"This is an error message logged from PowerShell\" hostname = hostname } Invoke-RestMethod -Method Post -Uri $url -Body ($body|ConvertTo-Json) -ContentType \"application/json-patch+json\" Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the ID of the log you want messages sent to ( Where is my log ID? ).","title":"Log through the API"},{"location":"logging-to-elmah-io-from-powershell/#log-through-poshlogsinkselmahio","text":"PoShLog is a PowerShell logging module built on top of Serilog. To log to elmah.io using PoShLog, install the following packages: Install-Module -Name PoShLog Install-Module -Name PoShLog.Sinks.ElmahIo Logging messages can now be done using Write-*Log : Import-Module PoShLog Import-Module PoShLog.Sinks.ElmahIo New-Logger | Add-SinkElmahIo -ApiKey 'API_KEY' -LogId 'LOG_ID' | Start-Logger Write-ErrorLog 'Say My Name' # Don't forget to close the logger Close-Logger","title":"Log through PoShLog.Sinks.ElmahIo"},{"location":"logging-to-elmah-io-from-powershell/#log-through-elmahioclient","text":"If you prefer to use the Elmah.Io.Client NuGet package, you can do this in PowerShell too. First of all, you will need to include elmah.io.client.dll . How you do this is entirely up to you. You can include this assembly in your script location or you can download it through NuGet on every execution. To download the package through NuGet, you will need nuget.exe : $source = \"https://dist.nuget.org/win-x86-commandline/latest/nuget.exe\" $target = \".\\nuget.exe\" Invoke-WebRequest $source -OutFile $target Set-Alias nuget $target -Scope Global This script will download the latest version of the NuGet command-line tool and make it available through the command nuget . To install Elmah.Io.Client run nuget.exe : nuget install Elmah.Io.Client This will create an Elmah.Io.Client-version folder containing the latest stable version of the Elmah.Io.Client package. You now have Elmah.Io.Client.dll loaded into your shell and everything is set up to log to elmah.io. To do so, add try-catch around critical code: $logger = [Elmah.Io.Client.ElmahioAPI]::Create(\"API_KEY\") Try { # some code that may throw exceptions } Catch { $logger.Messages.Error([guid]::new(\"LOG_ID\"), $_.Exception, \"Oh no\") } In the first line, we create a new logger object. Then, in the Catch block, the catched exception is shipped off to the elmah.io log specified in LOG_ID together with a custom message.","title":"Log through Elmah.Io.Client"},{"location":"logging-to-elmah-io-from-powershell/#examples","text":"For inspiration, here's a list of examples of common scenarios where you'd want to log to elmah.io from PowerShell.","title":"Examples"},{"location":"logging-to-elmah-io-from-powershell/#log-error-on-low-remaining-disk","text":"You can monitor when a server is running low on disk space like this: $cdrive = Get-Volume -DriveLetter C $sizeremainingingb = $cdrive.SizeRemaining/1024/1024/1024 if ($sizeremainingingb -lt 10) { $apiKey = \"API_KEY\" $logId = \"LOG_ID\" $url = \"https://api.elmah.io/v3/messages/$logId/?api_key=$apiKey\" $body = @{ title = \"Disk storage less than 10 gb\" severity = \"Error\" detail = \"Remaining storage in gb: $sizeremainingingb\" hostname = hostname } Invoke-RestMethod -Method Post -Uri $url -Body ($body|ConvertTo-Json) -ContentType \"application/json-patch+json\" }","title":"Log error on low remaining disk"},{"location":"logging-to-elmah-io-from-powershell/#powershell-troubleshooting","text":"Elmah.Io.Client.ElmahioAPI cannot be loaded If PowerShell complains about Elmah.Io.Client.ElmahioAPI not being found, try adding the following lines to the script after installing the Elmah.Io.Client NuGet package: $elmahIoClientPath = Get-ChildItem -Path . -Filter Elmah.Io.Client.dll -Recurse ` | Where-Object {$_.FullName -match \"net45\"} [Reflection.Assembly]::LoadFile($elmahIoClientPath.FullName) $jsonNetPath = Get-ChildItem -Path . -Filter Newtonsoft.Json.dll -Recurse ` | Where-Object {$_.FullName -match \"net45\" -and $_.FullName -notmatch \"portable\"} [Reflection.Assembly]::LoadFile($jsonNetPath.FullName) You may need to include additional assemblies if PowerShell keeps complaining. The catch block is not invoked even though a cmdlet failed Most errors in PowerShell are non-terminating meaning that they are handled internally in the cmdlet. To force a cmdlet to use terminating errors use the -ErrorAction parameter: Try { My-Cmdlet -ErrorAction Stop } Catch { // Log to elmah.io }","title":"PowerShell Troubleshooting"},{"location":"logging-to-elmah-io-from-react/","text":"Logging to elmah.io from React To log all errors from a React application, install the elmah.io.javascript npm package as described in Logging from JavaScript . Then modify the index.js or index.tsx file: // ... import Elmahio from 'elmah.io.javascript'; new Elmahio({ apiKey: 'API_KEY', logId: 'LOG_ID' }); // After this the ReactDOM.render etc. will be included When launching your React app, elmah.io is configured and all errors happening in the application are logged. Check out the elmahio-react and elmahio-react-typescript samples for some real working code. Note React have a known bug/feature in DEV mode where errors are submitted twice. For better error handling in React, you should look into Error Boundaries .","title":"Logging from React"},{"location":"logging-to-elmah-io-from-react/#logging-to-elmahio-from-react","text":"To log all errors from a React application, install the elmah.io.javascript npm package as described in Logging from JavaScript . Then modify the index.js or index.tsx file: // ... import Elmahio from 'elmah.io.javascript'; new Elmahio({ apiKey: 'API_KEY', logId: 'LOG_ID' }); // After this the ReactDOM.render etc. will be included When launching your React app, elmah.io is configured and all errors happening in the application are logged. Check out the elmahio-react and elmahio-react-typescript samples for some real working code. Note React have a known bug/feature in DEV mode where errors are submitted twice. For better error handling in React, you should look into Error Boundaries .","title":"Logging to elmah.io from React"},{"location":"logging-to-elmah-io-from-serilog/","text":"Logging to elmah.io from Serilog Logging to elmah.io from Serilog Logging custom properties Message hooks Decorating log messages Include source code Handle errors Error filtering ASP.NET Core ASP.NET Config using appsettings.json Extended exception details with Serilog.Exceptions Remove sensitive data Setting a category Serilog Troubleshooting PeriodicBatchingSink is marked as sealed Serilog is a great addition to the flowering .NET logging community, described as \u201cA no-nonsense logging library for the NoSQL era\u201d on their project page. Serilog works just like other logging frameworks such as log4net and NLog but offers a great fluent API and the concept of sinks (a bit like appenders in log4net). Sinks are superior to appenders because they threat errors as objects rather than strings, a perfect fit for elmah.io which itself is built on NoSQL. Serilog already comes with native support for elmah.io, which makes it easy to integrate with any application using Serilog. Adding this type of logging to your windows and console applications is just as easy. Add the Serilog.Sinks.ElmahIo NuGet package to your project: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Serilog.Sinks.ElmahIo Install-Package Serilog.Sinks.ElmahIo <PackageReference Include=\"Serilog.Sinks.ElmahIo\" Version=\"5.*\" /> paket add Serilog.Sinks.ElmahIo To configure Serilog, add the following code to the Application_Start method in global.asax.cs: var log = new LoggerConfiguration() .WriteTo.ElmahIo(new ElmahIoSinkOptions(\"API_KEY\", new Guid(\"LOG_ID\"))) .CreateLogger(); Log.Logger = log; Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the ID of the log you want messages sent to ( Where is my log ID? ). First, we create a new LoggerConfiguration and tell it to write to elmah.io. The log object can be used to log errors and you should register this in your IoC container. In this case, we don't use IoC, that is why the log object is set as the public static Logger property, which makes it accessible from everywhere. To log exceptions to elmah.io through Serilog use the Log class provided by Serilog: try { // Do some stuff that may cause an exception } catch (Exception e) { Log.Error(e, \"The actual error message\"); } The Error method tells Serilog to log the error in the configured sinks, which in our case logs to elmah.io. Simple and beautiful. Note Always call Log.CloseAndFlush(); before your program terminates. Logging custom properties Serilog supports logging custom properties in three ways: As part of the log message, through enrichers, and using LogContext . All three types of properties are implemented in the elmah.io sink as part of the Data dictionary to elmah.io. The following example shows how to log all three types of properties: var logger = new LoggerConfiguration() .Enrich.WithProperty(\"ApplicationIdentifier\", \"MyCoolApp\") .Enrich.FromLogContext() .WriteTo.ElmahIo(new ElmahIoSinkOptions(\"API_KEY\", new Guid(\"LOG_ID\"))) .CreateLogger(); using (LogContext.PushProperty(\"ThreadId\", Thread.CurrentThread.ManagedThreadId)) { logger.Error(\"This is a message with {Type} properties\", \"custom\"); } Beneath the Data tab on the logged message details, the ApplicationIdentifier , ThreadId , and Type properties can be found. Serilog.Sinks.ElmahIo provides a range of reserved property names, that can be used to fill in data in the correct fields on the elmah.io UI. Let's say you want to fill the User field using structured logging only: logger.Information(\"{Quote} from {User}\", \"Hasta la vista, baby\", \"Arnold Schwarzenegger\"); This will fill in the value Arnold Schwarzenegger in the User field, as well as add two key/value pairs (Quote and User) to the Data tab on elmah.io. For a reference of all possible property names, check out the property names on CreateMessage . Message hooks Serilog.Sinks.ElmahIo provides message hooks similar to the integrations with ASP.NET and ASP.NET Core. Note Message hooks require Serilog.Sinks.ElmahIo version 3.3.0 or newer. Decorating log messages To include additional information on log messages, you can use the OnMessage event when initializing the elmah.io target: Log.Logger = new LoggerConfiguration() .WriteTo.ElmahIo(new ElmahIoSinkOptions(\"API_KEY\", new Guid(\"LOG_ID\")) { OnMessage = msg => { msg.Version = \"1.0.0\"; } }) .CreateLogger(); The example above includes a version number on all errors. Since the elmah.io sink also picks up enrichers specified with Serilog, this example could be implemented by enriching all log messages with a field named version . Include source code You can use the OnMessage action to include source code to log messages. This will require a stack trace in the Detail property with filenames and line numbers in it. There are multiple ways of including source code to log messages. In short, you will need to install the Elmah.Io.Client.Extensions.SourceCode NuGet package and call the WithSourceCodeFromPdb method in the OnMessage action: Log.Logger = new LoggerConfiguration() .WriteTo.ElmahIo(new ElmahIoSinkOptions(\"API_KEY\", new Guid(\"LOG_ID\")) { OnMessage = msg => { msg.WithSourceCodeFromPdb(); } }) .CreateLogger(); Check out How to include source code in log messages for additional requirements to make source code show up on elmah.io. Note Including source code on log messages is available in the Elmah.Io.Client v4 package and forward. Handle errors To handle any errors happening while processing a log message, you can use the OnError event when initializing the elmah.io sink: Log.Logger = new LoggerConfiguration() .WriteTo.ElmahIo(new ElmahIoSinkOptions(\"API_KEY\", new Guid(\"LOG_ID\")) { OnError = (msg, ex) => { Console.Error.WriteLine(ex.Message); } }) .CreateLogger(); The example implements a callback if logging to elmah.io fails. How you choose to implement this is entirely up to your application and tech stack. Error filtering To ignore specific messages based on their content, you can use the OnFilter event when initializing the elmah.io sink: Log.Logger = new LoggerConfiguration() .WriteTo.ElmahIo(new ElmahIoSinkOptions(\"API_KEY\", new Guid(\"LOG_ID\")) { OnFilter = msg => { return msg.Title.Contains(\"trace\"); } }) .CreateLogger(); The example above ignores any log message with the word trace in the title. ASP.NET Core Serilog provides a package for ASP.NET Core, that routes log messages from inside the framework through Serilog. We recommend using this package together with the elmah.io sink, in order to capture warnings and errors happening inside ASP.NET Core. To use this, install the following packages: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Serilog.AspNetCore dotnet add package Serilog.Sinks.ElmahIo Install-Package Serilog.AspNetCore Install-Package Serilog.Sinks.ElmahIo <PackageReference Include=\"Serilog.AspNetCore\" Version=\"6.*\" /> <PackageReference Include=\"Serilog.Sinks.ElmahIo\" Version=\"5.*\" /> paket add Serilog.AspNetCore paket add Serilog.Sinks.ElmahIo Configure Serilog using the UseSerilog method in the Program.cs file: builder.Host.UseSerilog((ctx, lc) => lc .WriteTo.ElmahIo(new ElmahIoSinkOptions(\"API_KEY\", new Guid(\"LOG_ID\")) { MinimumLogEventLevel = LogEventLevel.Information, })); } Now, all warnings, errors, and fatals happening inside ASP.NET Core are logged to elmah.io. A common request is to include all of the HTTP contextual information you usually get logged when using a package like Elmah.Io.AspNetCore . We have developed a specialized NuGet package to include cookies, server variables, etc. when logging through Serilog from ASP.NET Core. To set it up, install the Elmah.Io.AspNetCore.Serilog NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.AspNetCore.Serilog Install-Package Elmah.Io.AspNetCore.Serilog <PackageReference Include=\"Elmah.Io.AspNetCore.Serilog\" Version=\"5.*\" /> paket add Elmah.Io.AspNetCore.Serilog Then, call the UseElmahIoSerilog method in Program.cs file: // ... Exception handling middleware app.UseElmahIoSerilog(); // ... UseMvc etc. The middleware uses Serilog's LogContext feature to enrich each log message with additional properties. To turn on the log context, extend your Serilog config: builder.Host.UseSerilog((ctx, lc) => lc .WriteTo.ElmahIo(/*...*/) .Enrich.FromLogContext() // <-- add this line ); There's a problem with this approach when an endpoint throws an uncaught exception. Microsoft.Extensions.Logging logs all uncaught exceptions as errors, but the LogContext is already popped when doing so. The recommended approach is to ignore these errors in the elmah.io sink and install the Elmah.Io.AspNetCore package to log uncaught errors to elmah.io (as explained in Logging from ASP.NET Core ). The specific error message can be ignored in the sink by providing the following filter during initialization of Serilog: .WriteTo.ElmahIo(/*...*/) { // ... OnFilter = msg => { return msg != null && msg.TitleTemplate != null && msg.TitleTemplate.Equals( \"An unhandled exception has occurred while executing the request.\", StringComparison.InvariantCultureIgnoreCase); } }) ASP.NET Messages logged through Serilog in an ASP.NET WebForms, MVC, or Web API application can be enriched with a range of HTTP contextual information using the SerilogWeb.Classic NuGet package. Start by installing the package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package SerilogWeb.Classic Install-Package SerilogWeb.Classic <PackageReference Include=\"SerilogWeb.Classic\" Version=\"5.*\" /> paket add SerilogWeb.Classic The package includes automatic HTTP request and response logging as well as some Serilog enrichers. Unless you are trying to debug a specific problem with your website, we recommend disabling HTTP logging since that will produce a lot of messages (depending on the traffic on your website). HTTP logging can be disabled by including the following code in the Global.asax.cs file: protected void Application_Start() { SerilogWebClassic.Configure(cfg => cfg .Disable() ); // ... } To enrich log messages with HTTP contextual information you can configure one or more enrichers in the same place as you configure the elmah.io sink: Log.Logger = new LoggerConfiguration() .WriteTo.ElmahIo(new ElmahIoSinkOptions(\"API_KEY\", new Guid(\"LOG_ID\"))) .Enrich.WithHttpRequestClientHostIP() .Enrich.WithHttpRequestRawUrl() .Enrich.WithHttpRequestType() .Enrich.WithHttpRequestUrl() .Enrich.WithHttpRequestUserAgent() .Enrich.WithUserName(anonymousUsername:null) .CreateLogger(); This will automatically fill in fields on elmah.io like URL, method, client IP, and UserAgent. Check out this full sample for more details. Config using appsettings.json While Serilog provides a great fluent C# API, some prefer to configure Serilog using an appsettings.json file. To configure the elmah.io sink this way, you will need to install the Serilog.Settings.Configuration NuGet package. Then configure elmah.io in your appsettings.json file: { // ... \"Serilog\":{ \"Using\":[ \"Serilog.Sinks.ElmahIo\" ], \"MinimumLevel\": \"Warning\", \"WriteTo\":[ { \"Name\": \"ElmahIo\", \"Args\":{ \"apiKey\": \"API_KEY\", \"logId\": \"LOG_ID\" } } ] } } Note Make sure to specify the apiKey and logId arguments with the first character in lowercase. Finally, tell Serilog to read the configuration from the appsettings.json file: var configuration = new ConfigurationBuilder() .AddJsonFile(\"appsettings.json\") .Build(); var logger = new LoggerConfiguration() .ReadFrom.Configuration(configuration) .CreateLogger(); Extended exception details with Serilog.Exceptions The more information you have on an error, the easier it is to find out what went wrong. Muhammad Rehan Saeed made a nice enrichment package for Serilog named Serilog.Exceptions . The package uses reflection on a logged exception to log additional information depending on the concrete exception type. You can install the package through NuGet: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Serilog.Exceptions Install-Package Serilog.Exceptions <PackageReference Include=\"Serilog.Exceptions\" Version=\"5.*\" /> paket add Serilog.Exceptions And configure it in C# code: var logger = new LoggerConfiguration() .Enrich.WithExceptionDetails() .WriteTo.ElmahIo(/*...*/) .CreateLogger(); The elmah.io sink will automatically pick up the additional information and show them in the extended message details overlay. To navigate to this view, click an error on the search view. Then click the button in the upper right corner to open extended message details. The information logged by Serilog.Exceptions are available beneath the Data tab. Remove sensitive data Structured logging with Serilog is a great way to store a lot of contextual information about a log message. In some cases, it may result in sensitive data being stored in your log, though. We recommend you remove any sensitive data from your log messages before storing them on elmah.io and anywhere else. To implement this, you can use the OnMessage event as already shown previously in the document: OnMessage = msg => { foreach (var d in msg.Data) { if (d.Key.Equals(\"Password\")) { d.Value = \"****\"; } } } An alternative to replacing sensitive values manually is to use a custom destructuring package for Serilog. The following example shows how to achieve this using the Destructurama.Attributed package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Destructurama.Attributed Install-Package Destructurama.Attributed <PackageReference Include=\"Destructurama.Attributed\" Version=\"2.*\" /> paket add Destructurama.Attributed Set up destructuring from attributes: Log.Logger = new LoggerConfiguration() .Destructure.UsingAttributes() .WriteTo.ElmahIo(/*...*/) .CreateLogger(); Make sure to decorate any properties including sensitive data with the NotLogged attribute: public class LoginModel { public string Username { get; set; } [NotLogged] public string Password { get; set; } } Setting a category elmah.io provide a field named Category to better group log messages by class name, namespace, or similar. Category maps to Serilog's SourceContext automatically when using Serilog.Sinks.ElmahIo . To make sure that the category is correctly populated, either use the Forcontext method: Log.ForContext<Program>().Information(\"This is an information message with context\"); Log.ForContext(\"The context\").Information(\"This is another information message with context\"); Or set a SourceContext or Category property using LogContext : using (LogContext.PushProperty(\"SourceContext\", \"The context\")) Log.Information(\"This is an information message with context\"); using (LogContext.PushProperty(\"Category\", \"The context\")) Log.Information(\"This is another information message with context\"); When using Serilog through Microsoft.Extensions.Logging's ILogger<T> interface, the source context will automatically be set by Serilog. Serilog Troubleshooting Here are some things to try out if logging from Serilog to elmah.io doesn't work: Run the diagnose command with the elmah.io CLI as shown here: Diagnose potential problems with an elmah.io installation . Make sure that you have the newest Serilog.Sinks.ElmahIo and Elmah.Io.Client packages installed. Make sure to include all of the configuration from the example above. Make sure that the API key is valid and allow the Messages | Write permission . Make sure to include a valid log ID. Make sure that you have sufficient log messages in your subscription and that you didn't disable logging to the log or include any ignore filters/rules. Always make sure to call Log.CloseAndFlush() before exiting the application to make sure that all log messages are flushed. Set up Serilog's SelfLog to inspect any errors happening inside Serilog or the elmah.io sink: Serilog.Debugging.SelfLog.Enable(msg => Debug.WriteLine(msg)); . Implement the OnError action and put a breakpoint in the handler to inspect if any errors are thrown while logging to the elmah.io API. PeriodicBatchingSink is marked as sealed If you get a runtime error stating that the PeriodicBatchingSink class is sealed and cannot be extended, make sure to manually install version 3.1.0 or newer of the Serilog.Sinks.PeriodicBatching NuGet package. The bug has also been fixed in the Serilog.Sinks.ElmahIo NuGet package from version 4.3.29 and forward.","title":"Logging from Serilog"},{"location":"logging-to-elmah-io-from-serilog/#logging-to-elmahio-from-serilog","text":"Logging to elmah.io from Serilog Logging custom properties Message hooks Decorating log messages Include source code Handle errors Error filtering ASP.NET Core ASP.NET Config using appsettings.json Extended exception details with Serilog.Exceptions Remove sensitive data Setting a category Serilog Troubleshooting PeriodicBatchingSink is marked as sealed Serilog is a great addition to the flowering .NET logging community, described as \u201cA no-nonsense logging library for the NoSQL era\u201d on their project page. Serilog works just like other logging frameworks such as log4net and NLog but offers a great fluent API and the concept of sinks (a bit like appenders in log4net). Sinks are superior to appenders because they threat errors as objects rather than strings, a perfect fit for elmah.io which itself is built on NoSQL. Serilog already comes with native support for elmah.io, which makes it easy to integrate with any application using Serilog. Adding this type of logging to your windows and console applications is just as easy. Add the Serilog.Sinks.ElmahIo NuGet package to your project: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Serilog.Sinks.ElmahIo Install-Package Serilog.Sinks.ElmahIo <PackageReference Include=\"Serilog.Sinks.ElmahIo\" Version=\"5.*\" /> paket add Serilog.Sinks.ElmahIo To configure Serilog, add the following code to the Application_Start method in global.asax.cs: var log = new LoggerConfiguration() .WriteTo.ElmahIo(new ElmahIoSinkOptions(\"API_KEY\", new Guid(\"LOG_ID\"))) .CreateLogger(); Log.Logger = log; Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the ID of the log you want messages sent to ( Where is my log ID? ). First, we create a new LoggerConfiguration and tell it to write to elmah.io. The log object can be used to log errors and you should register this in your IoC container. In this case, we don't use IoC, that is why the log object is set as the public static Logger property, which makes it accessible from everywhere. To log exceptions to elmah.io through Serilog use the Log class provided by Serilog: try { // Do some stuff that may cause an exception } catch (Exception e) { Log.Error(e, \"The actual error message\"); } The Error method tells Serilog to log the error in the configured sinks, which in our case logs to elmah.io. Simple and beautiful. Note Always call Log.CloseAndFlush(); before your program terminates.","title":"Logging to elmah.io from Serilog"},{"location":"logging-to-elmah-io-from-serilog/#logging-custom-properties","text":"Serilog supports logging custom properties in three ways: As part of the log message, through enrichers, and using LogContext . All three types of properties are implemented in the elmah.io sink as part of the Data dictionary to elmah.io. The following example shows how to log all three types of properties: var logger = new LoggerConfiguration() .Enrich.WithProperty(\"ApplicationIdentifier\", \"MyCoolApp\") .Enrich.FromLogContext() .WriteTo.ElmahIo(new ElmahIoSinkOptions(\"API_KEY\", new Guid(\"LOG_ID\"))) .CreateLogger(); using (LogContext.PushProperty(\"ThreadId\", Thread.CurrentThread.ManagedThreadId)) { logger.Error(\"This is a message with {Type} properties\", \"custom\"); } Beneath the Data tab on the logged message details, the ApplicationIdentifier , ThreadId , and Type properties can be found. Serilog.Sinks.ElmahIo provides a range of reserved property names, that can be used to fill in data in the correct fields on the elmah.io UI. Let's say you want to fill the User field using structured logging only: logger.Information(\"{Quote} from {User}\", \"Hasta la vista, baby\", \"Arnold Schwarzenegger\"); This will fill in the value Arnold Schwarzenegger in the User field, as well as add two key/value pairs (Quote and User) to the Data tab on elmah.io. For a reference of all possible property names, check out the property names on CreateMessage .","title":"Logging custom properties"},{"location":"logging-to-elmah-io-from-serilog/#message-hooks","text":"Serilog.Sinks.ElmahIo provides message hooks similar to the integrations with ASP.NET and ASP.NET Core. Note Message hooks require Serilog.Sinks.ElmahIo version 3.3.0 or newer.","title":"Message hooks"},{"location":"logging-to-elmah-io-from-serilog/#decorating-log-messages","text":"To include additional information on log messages, you can use the OnMessage event when initializing the elmah.io target: Log.Logger = new LoggerConfiguration() .WriteTo.ElmahIo(new ElmahIoSinkOptions(\"API_KEY\", new Guid(\"LOG_ID\")) { OnMessage = msg => { msg.Version = \"1.0.0\"; } }) .CreateLogger(); The example above includes a version number on all errors. Since the elmah.io sink also picks up enrichers specified with Serilog, this example could be implemented by enriching all log messages with a field named version .","title":"Decorating log messages"},{"location":"logging-to-elmah-io-from-serilog/#include-source-code","text":"You can use the OnMessage action to include source code to log messages. This will require a stack trace in the Detail property with filenames and line numbers in it. There are multiple ways of including source code to log messages. In short, you will need to install the Elmah.Io.Client.Extensions.SourceCode NuGet package and call the WithSourceCodeFromPdb method in the OnMessage action: Log.Logger = new LoggerConfiguration() .WriteTo.ElmahIo(new ElmahIoSinkOptions(\"API_KEY\", new Guid(\"LOG_ID\")) { OnMessage = msg => { msg.WithSourceCodeFromPdb(); } }) .CreateLogger(); Check out How to include source code in log messages for additional requirements to make source code show up on elmah.io. Note Including source code on log messages is available in the Elmah.Io.Client v4 package and forward.","title":"Include source code"},{"location":"logging-to-elmah-io-from-serilog/#handle-errors","text":"To handle any errors happening while processing a log message, you can use the OnError event when initializing the elmah.io sink: Log.Logger = new LoggerConfiguration() .WriteTo.ElmahIo(new ElmahIoSinkOptions(\"API_KEY\", new Guid(\"LOG_ID\")) { OnError = (msg, ex) => { Console.Error.WriteLine(ex.Message); } }) .CreateLogger(); The example implements a callback if logging to elmah.io fails. How you choose to implement this is entirely up to your application and tech stack.","title":"Handle errors"},{"location":"logging-to-elmah-io-from-serilog/#error-filtering","text":"To ignore specific messages based on their content, you can use the OnFilter event when initializing the elmah.io sink: Log.Logger = new LoggerConfiguration() .WriteTo.ElmahIo(new ElmahIoSinkOptions(\"API_KEY\", new Guid(\"LOG_ID\")) { OnFilter = msg => { return msg.Title.Contains(\"trace\"); } }) .CreateLogger(); The example above ignores any log message with the word trace in the title.","title":"Error filtering"},{"location":"logging-to-elmah-io-from-serilog/#aspnet-core","text":"Serilog provides a package for ASP.NET Core, that routes log messages from inside the framework through Serilog. We recommend using this package together with the elmah.io sink, in order to capture warnings and errors happening inside ASP.NET Core. To use this, install the following packages: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Serilog.AspNetCore dotnet add package Serilog.Sinks.ElmahIo Install-Package Serilog.AspNetCore Install-Package Serilog.Sinks.ElmahIo <PackageReference Include=\"Serilog.AspNetCore\" Version=\"6.*\" /> <PackageReference Include=\"Serilog.Sinks.ElmahIo\" Version=\"5.*\" /> paket add Serilog.AspNetCore paket add Serilog.Sinks.ElmahIo Configure Serilog using the UseSerilog method in the Program.cs file: builder.Host.UseSerilog((ctx, lc) => lc .WriteTo.ElmahIo(new ElmahIoSinkOptions(\"API_KEY\", new Guid(\"LOG_ID\")) { MinimumLogEventLevel = LogEventLevel.Information, })); } Now, all warnings, errors, and fatals happening inside ASP.NET Core are logged to elmah.io. A common request is to include all of the HTTP contextual information you usually get logged when using a package like Elmah.Io.AspNetCore . We have developed a specialized NuGet package to include cookies, server variables, etc. when logging through Serilog from ASP.NET Core. To set it up, install the Elmah.Io.AspNetCore.Serilog NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.AspNetCore.Serilog Install-Package Elmah.Io.AspNetCore.Serilog <PackageReference Include=\"Elmah.Io.AspNetCore.Serilog\" Version=\"5.*\" /> paket add Elmah.Io.AspNetCore.Serilog Then, call the UseElmahIoSerilog method in Program.cs file: // ... Exception handling middleware app.UseElmahIoSerilog(); // ... UseMvc etc. The middleware uses Serilog's LogContext feature to enrich each log message with additional properties. To turn on the log context, extend your Serilog config: builder.Host.UseSerilog((ctx, lc) => lc .WriteTo.ElmahIo(/*...*/) .Enrich.FromLogContext() // <-- add this line ); There's a problem with this approach when an endpoint throws an uncaught exception. Microsoft.Extensions.Logging logs all uncaught exceptions as errors, but the LogContext is already popped when doing so. The recommended approach is to ignore these errors in the elmah.io sink and install the Elmah.Io.AspNetCore package to log uncaught errors to elmah.io (as explained in Logging from ASP.NET Core ). The specific error message can be ignored in the sink by providing the following filter during initialization of Serilog: .WriteTo.ElmahIo(/*...*/) { // ... OnFilter = msg => { return msg != null && msg.TitleTemplate != null && msg.TitleTemplate.Equals( \"An unhandled exception has occurred while executing the request.\", StringComparison.InvariantCultureIgnoreCase); } })","title":"ASP.NET Core"},{"location":"logging-to-elmah-io-from-serilog/#aspnet","text":"Messages logged through Serilog in an ASP.NET WebForms, MVC, or Web API application can be enriched with a range of HTTP contextual information using the SerilogWeb.Classic NuGet package. Start by installing the package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package SerilogWeb.Classic Install-Package SerilogWeb.Classic <PackageReference Include=\"SerilogWeb.Classic\" Version=\"5.*\" /> paket add SerilogWeb.Classic The package includes automatic HTTP request and response logging as well as some Serilog enrichers. Unless you are trying to debug a specific problem with your website, we recommend disabling HTTP logging since that will produce a lot of messages (depending on the traffic on your website). HTTP logging can be disabled by including the following code in the Global.asax.cs file: protected void Application_Start() { SerilogWebClassic.Configure(cfg => cfg .Disable() ); // ... } To enrich log messages with HTTP contextual information you can configure one or more enrichers in the same place as you configure the elmah.io sink: Log.Logger = new LoggerConfiguration() .WriteTo.ElmahIo(new ElmahIoSinkOptions(\"API_KEY\", new Guid(\"LOG_ID\"))) .Enrich.WithHttpRequestClientHostIP() .Enrich.WithHttpRequestRawUrl() .Enrich.WithHttpRequestType() .Enrich.WithHttpRequestUrl() .Enrich.WithHttpRequestUserAgent() .Enrich.WithUserName(anonymousUsername:null) .CreateLogger(); This will automatically fill in fields on elmah.io like URL, method, client IP, and UserAgent. Check out this full sample for more details.","title":"ASP.NET"},{"location":"logging-to-elmah-io-from-serilog/#config-using-appsettingsjson","text":"While Serilog provides a great fluent C# API, some prefer to configure Serilog using an appsettings.json file. To configure the elmah.io sink this way, you will need to install the Serilog.Settings.Configuration NuGet package. Then configure elmah.io in your appsettings.json file: { // ... \"Serilog\":{ \"Using\":[ \"Serilog.Sinks.ElmahIo\" ], \"MinimumLevel\": \"Warning\", \"WriteTo\":[ { \"Name\": \"ElmahIo\", \"Args\":{ \"apiKey\": \"API_KEY\", \"logId\": \"LOG_ID\" } } ] } } Note Make sure to specify the apiKey and logId arguments with the first character in lowercase. Finally, tell Serilog to read the configuration from the appsettings.json file: var configuration = new ConfigurationBuilder() .AddJsonFile(\"appsettings.json\") .Build(); var logger = new LoggerConfiguration() .ReadFrom.Configuration(configuration) .CreateLogger();","title":"Config using appsettings.json"},{"location":"logging-to-elmah-io-from-serilog/#extended-exception-details-with-serilogexceptions","text":"The more information you have on an error, the easier it is to find out what went wrong. Muhammad Rehan Saeed made a nice enrichment package for Serilog named Serilog.Exceptions . The package uses reflection on a logged exception to log additional information depending on the concrete exception type. You can install the package through NuGet: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Serilog.Exceptions Install-Package Serilog.Exceptions <PackageReference Include=\"Serilog.Exceptions\" Version=\"5.*\" /> paket add Serilog.Exceptions And configure it in C# code: var logger = new LoggerConfiguration() .Enrich.WithExceptionDetails() .WriteTo.ElmahIo(/*...*/) .CreateLogger(); The elmah.io sink will automatically pick up the additional information and show them in the extended message details overlay. To navigate to this view, click an error on the search view. Then click the button in the upper right corner to open extended message details. The information logged by Serilog.Exceptions are available beneath the Data tab.","title":"Extended exception details with Serilog.Exceptions"},{"location":"logging-to-elmah-io-from-serilog/#remove-sensitive-data","text":"Structured logging with Serilog is a great way to store a lot of contextual information about a log message. In some cases, it may result in sensitive data being stored in your log, though. We recommend you remove any sensitive data from your log messages before storing them on elmah.io and anywhere else. To implement this, you can use the OnMessage event as already shown previously in the document: OnMessage = msg => { foreach (var d in msg.Data) { if (d.Key.Equals(\"Password\")) { d.Value = \"****\"; } } } An alternative to replacing sensitive values manually is to use a custom destructuring package for Serilog. The following example shows how to achieve this using the Destructurama.Attributed package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Destructurama.Attributed Install-Package Destructurama.Attributed <PackageReference Include=\"Destructurama.Attributed\" Version=\"2.*\" /> paket add Destructurama.Attributed Set up destructuring from attributes: Log.Logger = new LoggerConfiguration() .Destructure.UsingAttributes() .WriteTo.ElmahIo(/*...*/) .CreateLogger(); Make sure to decorate any properties including sensitive data with the NotLogged attribute: public class LoginModel { public string Username { get; set; } [NotLogged] public string Password { get; set; } }","title":"Remove sensitive data"},{"location":"logging-to-elmah-io-from-serilog/#setting-a-category","text":"elmah.io provide a field named Category to better group log messages by class name, namespace, or similar. Category maps to Serilog's SourceContext automatically when using Serilog.Sinks.ElmahIo . To make sure that the category is correctly populated, either use the Forcontext method: Log.ForContext<Program>().Information(\"This is an information message with context\"); Log.ForContext(\"The context\").Information(\"This is another information message with context\"); Or set a SourceContext or Category property using LogContext : using (LogContext.PushProperty(\"SourceContext\", \"The context\")) Log.Information(\"This is an information message with context\"); using (LogContext.PushProperty(\"Category\", \"The context\")) Log.Information(\"This is another information message with context\"); When using Serilog through Microsoft.Extensions.Logging's ILogger<T> interface, the source context will automatically be set by Serilog.","title":"Setting a category"},{"location":"logging-to-elmah-io-from-serilog/#serilog-troubleshooting","text":"Here are some things to try out if logging from Serilog to elmah.io doesn't work: Run the diagnose command with the elmah.io CLI as shown here: Diagnose potential problems with an elmah.io installation . Make sure that you have the newest Serilog.Sinks.ElmahIo and Elmah.Io.Client packages installed. Make sure to include all of the configuration from the example above. Make sure that the API key is valid and allow the Messages | Write permission . Make sure to include a valid log ID. Make sure that you have sufficient log messages in your subscription and that you didn't disable logging to the log or include any ignore filters/rules. Always make sure to call Log.CloseAndFlush() before exiting the application to make sure that all log messages are flushed. Set up Serilog's SelfLog to inspect any errors happening inside Serilog or the elmah.io sink: Serilog.Debugging.SelfLog.Enable(msg => Debug.WriteLine(msg)); . Implement the OnError action and put a breakpoint in the handler to inspect if any errors are thrown while logging to the elmah.io API.","title":"Serilog Troubleshooting"},{"location":"logging-to-elmah-io-from-serilog/#periodicbatchingsink-is-marked-as-sealed","text":"If you get a runtime error stating that the PeriodicBatchingSink class is sealed and cannot be extended, make sure to manually install version 3.1.0 or newer of the Serilog.Sinks.PeriodicBatching NuGet package. The bug has also been fixed in the Serilog.Sinks.ElmahIo NuGet package from version 4.3.29 and forward.","title":"PeriodicBatchingSink is marked as sealed"},{"location":"logging-to-elmah-io-from-servicestack/","text":"Logging to elmah.io from ServiceStack Logging errors to elmah.io from ServiceStack is almost as easy as installing in MVC and Web API. The folks over at ServiceStack provide you with a NuGet package named ServiceStack.Logging.Elmah. Like Web API you need to tell ServiceStack to use ELMAH as the logging framework for errors, besides adding the standard ELMAH configuration in web.config. Start by installing both ServiceStack.Logging.Elmah and Elmah.Io into your ServiceStack web project: .NET CLI Package Manager PackageReference Paket CLI dotnet add package ServiceStack.Logging.Elmah dotnet add package Elmah.Io Install-Package ServiceStack.Logging.Elmah Install-Package Elmah.Io <PackageReference Include=\"ServiceStack.Logging.Elmah\" Version=\"5.*\" /> <PackageReference Include=\"Elmah.Io\" Version=\"5.*\" /> paket add ServiceStack.Logging.Elmah paket add Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Once installed, add the following line to your AppHost: LogManager.LogFactory = new ElmahLogFactory(new NLogFactory()); The above example assumes that you are already using NLog as the existing framework for logging. Wrapping different logger factories in each other and makes it possible to log errors through ELMAH and other types of messages like warnings and info messages through another logging framework. If you don\u2019t need anything other than ELMAH logging, use the NullLogFactory instead of NLogFactory. That\u2019s it! By installing both the ServiceStack.Logging.Elmah and elmah.io packages, you should have sufficient configuration in your web.config to start logging errors.","title":"Logging from ServiceStack"},{"location":"logging-to-elmah-io-from-servicestack/#logging-to-elmahio-from-servicestack","text":"Logging errors to elmah.io from ServiceStack is almost as easy as installing in MVC and Web API. The folks over at ServiceStack provide you with a NuGet package named ServiceStack.Logging.Elmah. Like Web API you need to tell ServiceStack to use ELMAH as the logging framework for errors, besides adding the standard ELMAH configuration in web.config. Start by installing both ServiceStack.Logging.Elmah and Elmah.Io into your ServiceStack web project: .NET CLI Package Manager PackageReference Paket CLI dotnet add package ServiceStack.Logging.Elmah dotnet add package Elmah.Io Install-Package ServiceStack.Logging.Elmah Install-Package Elmah.Io <PackageReference Include=\"ServiceStack.Logging.Elmah\" Version=\"5.*\" /> <PackageReference Include=\"Elmah.Io\" Version=\"5.*\" /> paket add ServiceStack.Logging.Elmah paket add Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Once installed, add the following line to your AppHost: LogManager.LogFactory = new ElmahLogFactory(new NLogFactory()); The above example assumes that you are already using NLog as the existing framework for logging. Wrapping different logger factories in each other and makes it possible to log errors through ELMAH and other types of messages like warnings and info messages through another logging framework. If you don\u2019t need anything other than ELMAH logging, use the NullLogFactory instead of NLogFactory. That\u2019s it! By installing both the ServiceStack.Logging.Elmah and elmah.io packages, you should have sufficient configuration in your web.config to start logging errors.","title":"Logging to elmah.io from ServiceStack"},{"location":"logging-to-elmah-io-from-signalr/","text":"Logging to elmah.io from SignalR Logging from SignalR is supported through our Elmah.Io.Extensions.Logging package. For details not included in this article, check out Logging from Microsoft.Extensions.Logging . Start by installing the Elmah.Io.Extensions.Logging package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Extensions.Logging Install-Package Elmah.Io.Extensions.Logging <PackageReference Include=\"Elmah.Io.Extensions.Logging\" Version=\"5.*\" /> paket add Elmah.Io.Extensions.Logging In the Program.cs file, add a new using statement: using Elmah.Io.Extensions.Logging; Then configure elmah.io like shown here: builder.Logging.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); builder.Logging.AddFilter<ElmahIoLoggerProvider>(null, LogLevel.Warning); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the log Id of the log you want to log to. The code only logs Warning , Error , and Fatal messages. To change that you can change the LogLevel filter specified in the line calling the AddFilter method. You may also need to change log levels for SignalR itself: logging.AddFilter(\"Microsoft.AspNetCore.SignalR\", LogLevel.Debug); logging.AddFilter(\"Microsoft.AspNetCore.Http.Connections\", LogLevel.Debug); Be aware that changing log levels to Debug or lower will cause a lot of messages to be stored in elmah.io. Log levels can be specified through the appsettings.json file as with any other ASP.NET Core application. Check out appsettings.json configuration for more details.","title":"Logging from SignalR"},{"location":"logging-to-elmah-io-from-signalr/#logging-to-elmahio-from-signalr","text":"Logging from SignalR is supported through our Elmah.Io.Extensions.Logging package. For details not included in this article, check out Logging from Microsoft.Extensions.Logging . Start by installing the Elmah.Io.Extensions.Logging package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Extensions.Logging Install-Package Elmah.Io.Extensions.Logging <PackageReference Include=\"Elmah.Io.Extensions.Logging\" Version=\"5.*\" /> paket add Elmah.Io.Extensions.Logging In the Program.cs file, add a new using statement: using Elmah.Io.Extensions.Logging; Then configure elmah.io like shown here: builder.Logging.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); builder.Logging.AddFilter<ElmahIoLoggerProvider>(null, LogLevel.Warning); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the log Id of the log you want to log to. The code only logs Warning , Error , and Fatal messages. To change that you can change the LogLevel filter specified in the line calling the AddFilter method. You may also need to change log levels for SignalR itself: logging.AddFilter(\"Microsoft.AspNetCore.SignalR\", LogLevel.Debug); logging.AddFilter(\"Microsoft.AspNetCore.Http.Connections\", LogLevel.Debug); Be aware that changing log levels to Debug or lower will cause a lot of messages to be stored in elmah.io. Log levels can be specified through the appsettings.json file as with any other ASP.NET Core application. Check out appsettings.json configuration for more details.","title":"Logging to elmah.io from SignalR"},{"location":"logging-to-elmah-io-from-sitefinity/","text":"Logging to elmah.io from Sitefinity Sitefinity is a CMS from Telerik, implemented on top of ASP.NET. Like other content management systems build on top of ASP.NET, ELMAH is supported out of the box. To install elmah.io in a Sitefinity website, start by opening the website in Visual Studio by selecting File | Open Web Site... and navigate to the Sitefinity projects folder (something similar to this: C:\\Program Files (x86)\\Telerik\\Sitefinity\\Projects\\Default ). Right-click the website and install the Elmah.Io NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io Install-Package Elmah.Io <PackageReference Include=\"Elmah.Io\" Version=\"5.*\" /> paket add Elmah.Io During installation, you will be prompted for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). That's it! Uncaught errors in Sitefinity are logged to your elmah.io log. To test that the integration works, right-click the website and add a new Web Form named ELMAH.aspx. In the code-behind file add the following code: protected void Page_Load(object sender, EventArgs e) { throw new ApplicationException(); } Start the website and navigate to the ELMAH.aspx page. If everything works as intended, you will see the yellow screen of death, and a new error will pop up on elmah.io. Sitefinity Troubleshooting Config section 'system.webServer/validation' already defined In case you see an Internal Server Error with the Config error above when launching the site, it means that changes to the web.config file are required. Open the web.config file and search for validateIntegratedModeConfiguration . This attribute may be found on multiple <validation> elements. The element should only be specified in the configuration once so go ahead and remove instances bringing the total number down to one. Also, make sure to set the value of the attribute to false : <validation validateIntegratedModeConfiguration=\"false\" />","title":"Logging from Sitefinity"},{"location":"logging-to-elmah-io-from-sitefinity/#logging-to-elmahio-from-sitefinity","text":"Sitefinity is a CMS from Telerik, implemented on top of ASP.NET. Like other content management systems build on top of ASP.NET, ELMAH is supported out of the box. To install elmah.io in a Sitefinity website, start by opening the website in Visual Studio by selecting File | Open Web Site... and navigate to the Sitefinity projects folder (something similar to this: C:\\Program Files (x86)\\Telerik\\Sitefinity\\Projects\\Default ). Right-click the website and install the Elmah.Io NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io Install-Package Elmah.Io <PackageReference Include=\"Elmah.Io\" Version=\"5.*\" /> paket add Elmah.Io During installation, you will be prompted for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). That's it! Uncaught errors in Sitefinity are logged to your elmah.io log. To test that the integration works, right-click the website and add a new Web Form named ELMAH.aspx. In the code-behind file add the following code: protected void Page_Load(object sender, EventArgs e) { throw new ApplicationException(); } Start the website and navigate to the ELMAH.aspx page. If everything works as intended, you will see the yellow screen of death, and a new error will pop up on elmah.io.","title":"Logging to elmah.io from Sitefinity"},{"location":"logging-to-elmah-io-from-sitefinity/#sitefinity-troubleshooting","text":"Config section 'system.webServer/validation' already defined In case you see an Internal Server Error with the Config error above when launching the site, it means that changes to the web.config file are required. Open the web.config file and search for validateIntegratedModeConfiguration . This attribute may be found on multiple <validation> elements. The element should only be specified in the configuration once so go ahead and remove instances bringing the total number down to one. Also, make sure to set the value of the attribute to false : <validation validateIntegratedModeConfiguration=\"false\" />","title":"Sitefinity Troubleshooting"},{"location":"logging-to-elmah-io-from-sveltekit/","text":"Logging to elmah.io from SvelteKit To log all errors from a SvelteKit application, install the elmah.io.javascript npm package as described in Logging from JavaScript . Then add the following code to the hooks.client.js file. If the file does not exist, make sure to create it in the src folder since SvelteKit will automatically load it from there. import Elmahio from 'elmah.io.javascript'; var logger = new Elmahio({ apiKey: 'API_KEY', logId: 'LOG_ID' }); /** @type {import('@sveltejs/kit').HandleClientError} */ export function handleError({ error, event }) { if (error && error.message) { logger.error(error.message, error); } else { logger.error('Error in application', error); } } When launching your SvelteKit app, elmah.io is configured and all errors happening in the application are logged. For now, elmah.io.javascript only supports SvelteKit apps running inside the browser, why implementing the HandleServerError is not supported. Check out the elmahio-sveltekit sample for some real working code.","title":"Logging from SvelteKit"},{"location":"logging-to-elmah-io-from-sveltekit/#logging-to-elmahio-from-sveltekit","text":"To log all errors from a SvelteKit application, install the elmah.io.javascript npm package as described in Logging from JavaScript . Then add the following code to the hooks.client.js file. If the file does not exist, make sure to create it in the src folder since SvelteKit will automatically load it from there. import Elmahio from 'elmah.io.javascript'; var logger = new Elmahio({ apiKey: 'API_KEY', logId: 'LOG_ID' }); /** @type {import('@sveltejs/kit').HandleClientError} */ export function handleError({ error, event }) { if (error && error.message) { logger.error(error.message, error); } else { logger.error('Error in application', error); } } When launching your SvelteKit app, elmah.io is configured and all errors happening in the application are logged. For now, elmah.io.javascript only supports SvelteKit apps running inside the browser, why implementing the HandleServerError is not supported. Check out the elmahio-sveltekit sample for some real working code.","title":"Logging to elmah.io from SvelteKit"},{"location":"logging-to-elmah-io-from-system-diagnostics/","text":"Logging to elmah.io from System.Diagnostics Warning Logging through System.Diagnostics have been deprecated. Please use the Elmah.Io.Client package to log trace messages to elmah.io. .NET comes with its own tracing/logging feature located in the System.Diagnostics namespaces. A core part of System.Diagnostics is the Trace class, but that namespace contains utilities for performance counters, working with the event log, and a lot of other features. In this article, we will focus on logging to elmah.io from System.Diagnostics.Trace . To start logging, install the Elmah.Io.Trace package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Trace Install-Package Elmah.Io.Trace <PackageReference Include=\"Elmah.Io.Trace\" Version=\"3.*\" /> paket add Elmah.Io.Trace As default, Trace logs to the Win32 OutputDebugString function, but it is possible to log to multiple targets (like appenders in log4net). To do so, tell Trace about elmah.io: System.Diagnostics.Trace.Listeners.Add( new ElmahIoTraceListener(\"API_KEY\", new Guid(\"LOG_ID\"))); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with your log id ( Where is my log ID? ). To start logging, call the Trace API: try { System.Diagnostics.Trace.Write(\"Starting something dangerous\"); // ... } catch (Exception e) { System.Diagnostics.Trace.Fail(e.Message, e.ToString()); } In the example, we write an information message with the message Starting something dangerous and log any thrown exception to elmah.io.","title":"Logging from System.Diagnostics"},{"location":"logging-to-elmah-io-from-system-diagnostics/#logging-to-elmahio-from-systemdiagnostics","text":"Warning Logging through System.Diagnostics have been deprecated. Please use the Elmah.Io.Client package to log trace messages to elmah.io. .NET comes with its own tracing/logging feature located in the System.Diagnostics namespaces. A core part of System.Diagnostics is the Trace class, but that namespace contains utilities for performance counters, working with the event log, and a lot of other features. In this article, we will focus on logging to elmah.io from System.Diagnostics.Trace . To start logging, install the Elmah.Io.Trace package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Trace Install-Package Elmah.Io.Trace <PackageReference Include=\"Elmah.Io.Trace\" Version=\"3.*\" /> paket add Elmah.Io.Trace As default, Trace logs to the Win32 OutputDebugString function, but it is possible to log to multiple targets (like appenders in log4net). To do so, tell Trace about elmah.io: System.Diagnostics.Trace.Listeners.Add( new ElmahIoTraceListener(\"API_KEY\", new Guid(\"LOG_ID\"))); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with your log id ( Where is my log ID? ). To start logging, call the Trace API: try { System.Diagnostics.Trace.Write(\"Starting something dangerous\"); // ... } catch (Exception e) { System.Diagnostics.Trace.Fail(e.Message, e.ToString()); } In the example, we write an information message with the message Starting something dangerous and log any thrown exception to elmah.io.","title":"Logging to elmah.io from System.Diagnostics"},{"location":"logging-to-elmah-io-from-umbraco/","text":"Logging to elmah.io from Umbraco Logging to elmah.io from Umbraco Umbraco >= 9 Umbraco 8 Configuration Different environments Umbraco 7 Umbraco Cloud Umbraco Uno elmah.io offer great support for all newer Umbraco versions. Umbraco has been in rapid development in the last few years, so the installation instructions are very different depending on which major version you are using. Make sure to select the right version below since newer versions of the Elmah.Io.Umbraco package don't work with older versions of Umbraco and vice versa. Tip To learn more about the elmah.io integration with Umbraco and an overall introduction to the included features, make sure to check out the elmah.io and Umbraco page. During the installation steps described below, you will need your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). elmah.io integrates with Umbraco's Health Checks feature too. To learn more about how to set it up, visit Logging heartbeats from Umbraco . Umbraco >= 9 Note Umbraco 9 is targeting .NET 5.0 which is no longer supported by Microsoft. This is why we have chosen to support Umbraco 10 and up only. To install elmah.io in your Umbraco >= v10 site, install the Elmah.Io.Umbraco NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Umbraco Install-Package Elmah.Io.Umbraco <PackageReference Include=\"Elmah.Io.Umbraco\" Version=\"5.*\" /> paket add Elmah.Io.Umbraco After installing the NuGet package add the following to the Startup.cs file: public class Startup { // ... public void ConfigureServices(IServiceCollection services) { services.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); // ... } public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { // ... app.UseElmahIo(); // ... } } Note Make sure to call the UseElmahIo -method after installation of other pieces of middleware handling exceptions and auth (like UseDeveloperExceptionPage , UseExceptionHandler , UseAuthentication , and UseAuthorization ), but before the call to UseUmbraco . This will log all uncaught errors to elmah.io. If you want to hook into Umbraco's logging through Serilog, extend the configuration in the appsettings.json file with the following JSON: { \"Serilog\": { ... \"WriteTo\": [ { \"Name\": \"ElmahIo\", \"Args\": { \"apiKey\": \"API_KEY\", \"logId\": \"LOG_ID\" } } ] }, ... } This will configure elmah.io's Serilog sink in Umbraco. You may experience logging not coming through when running locally. In this case, it might help to remove the WriteTo action from the appsettings.Development.json file. Umbraco 8 To install elmah.io in your Umbraco v8 site, install the Elmah.Io.Umbraco v4 package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Umbraco --version 4.2.21 Install-Package Elmah.Io.Umbraco -Version 4.2.21 <PackageReference Include=\"Elmah.Io.Umbraco\" Version=\"4.2.21\" /> paket add Elmah.Io.Umbraco --version 4.2.21 During the installation, you will be presented with a dialog asking for your API key and log ID. Hit F5 and watch messages start flowing into elmah.io. Note Unless serious security issues in the Elmah.Io.Umbraco v4 package are found, new features will be added to the v5 package only (supporting Umbraco 10 and newer). Configuration If you are running on the default Umbraco template, all necessary configuration is added during the installation of the Elmah.Io.Umbraco NuGet package. If your web.config file for some reason isn't updated during installation, you can configure elmah.io manually: Configure elmah.io manually . Likewise, the installer configures the elmah.io sink for Serilog in your config\\serilog.user.config file. Different environments You may have different environments like Staging and Production . At least you have two: Localhost and Production . If you want to log to different error logs depending on the current environment, check out Use multiple logs for different environments . Web.config transformations work on the Web.config file only but you may have other config files that need transformation as well. In terms of elmah.io, the serilog.user.config file also includes elmah.io configuration that you may want to disable on localhost and include on production. If you are running on Umbraco Cloud this is natively supported as explained here: Config Transforms . Even in self-hosted environments, you can achieve something similar using the SlowCheetah extension. Check out this question on Our for details: Deploying different umbracoSettings.config for different environments . Umbraco 7 We still support Umbraco 7 through the Elmah.Io.Umbraco package version 3.2.35 : .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Umbraco --version 3.2.35 Install-Package Elmah.Io.Umbraco -Version 3.2.35 <PackageReference Include=\"Elmah.Io.Umbraco\" Version=\"3.2.35\" /> paket add Elmah.Io.Umbraco --version 3.2.35 Note New features will be added to the updated package for Umbraco 10 and newer only. Umbraco Cloud When using Umbraco Cloud, you may not have a local clone of the source code. To install elmah.io on Umbraco Cloud, follow these steps: Clone your Umbraco Cloud project to a local folder as explained here: Working with a Local Clone . Where you need to install and configure the Elmah.Io.Umbraco package depends on the Umbraco major version you are running on Umbraco Cloud. For Umbraco 7-8, all changes should be made in the *.Web project only and all commits from within that folder as well. Don't commit and push anything in the root folder. For Umbraco versions above 8, all changes should be made in the src\\UmbracoProject folder. Follow the installation steps for your Umbraco version as specified in the beginning of this document. Commit and push all changes to the git repository. This will add elmah.io logging to your remote Umbraco Cloud project. In case you want logging to different elmah.io logs from each Umbraco Cloud environment, please check out Umbraco's support for config transformations here: Config transforms . Umbraco Uno Warning Umbraco Uno has been discontinued. Installing elmah.io in Umbraco Uno follows the process of installing it onto Umbraco Cloud. To modify code and configuration in Uno you will need a Umbraco Uno Standard plan or higher. Also, you need to enable Custom Code to clone the code locally. This can be done from Uno by clicking the Enable custom code button: After enabling Custom Code you can create a Development environment and follow the steps in the Umbraco Cloud documentation.","title":"Logging from Umbraco"},{"location":"logging-to-elmah-io-from-umbraco/#logging-to-elmahio-from-umbraco","text":"Logging to elmah.io from Umbraco Umbraco >= 9 Umbraco 8 Configuration Different environments Umbraco 7 Umbraco Cloud Umbraco Uno elmah.io offer great support for all newer Umbraco versions. Umbraco has been in rapid development in the last few years, so the installation instructions are very different depending on which major version you are using. Make sure to select the right version below since newer versions of the Elmah.Io.Umbraco package don't work with older versions of Umbraco and vice versa. Tip To learn more about the elmah.io integration with Umbraco and an overall introduction to the included features, make sure to check out the elmah.io and Umbraco page. During the installation steps described below, you will need your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). elmah.io integrates with Umbraco's Health Checks feature too. To learn more about how to set it up, visit Logging heartbeats from Umbraco .","title":"Logging to elmah.io from Umbraco"},{"location":"logging-to-elmah-io-from-umbraco/#umbraco-9","text":"Note Umbraco 9 is targeting .NET 5.0 which is no longer supported by Microsoft. This is why we have chosen to support Umbraco 10 and up only. To install elmah.io in your Umbraco >= v10 site, install the Elmah.Io.Umbraco NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Umbraco Install-Package Elmah.Io.Umbraco <PackageReference Include=\"Elmah.Io.Umbraco\" Version=\"5.*\" /> paket add Elmah.Io.Umbraco After installing the NuGet package add the following to the Startup.cs file: public class Startup { // ... public void ConfigureServices(IServiceCollection services) { services.AddElmahIo(options => { options.ApiKey = \"API_KEY\"; options.LogId = new Guid(\"LOG_ID\"); }); // ... } public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { // ... app.UseElmahIo(); // ... } } Note Make sure to call the UseElmahIo -method after installation of other pieces of middleware handling exceptions and auth (like UseDeveloperExceptionPage , UseExceptionHandler , UseAuthentication , and UseAuthorization ), but before the call to UseUmbraco . This will log all uncaught errors to elmah.io. If you want to hook into Umbraco's logging through Serilog, extend the configuration in the appsettings.json file with the following JSON: { \"Serilog\": { ... \"WriteTo\": [ { \"Name\": \"ElmahIo\", \"Args\": { \"apiKey\": \"API_KEY\", \"logId\": \"LOG_ID\" } } ] }, ... } This will configure elmah.io's Serilog sink in Umbraco. You may experience logging not coming through when running locally. In this case, it might help to remove the WriteTo action from the appsettings.Development.json file.","title":"Umbraco &gt;= 9"},{"location":"logging-to-elmah-io-from-umbraco/#umbraco-8","text":"To install elmah.io in your Umbraco v8 site, install the Elmah.Io.Umbraco v4 package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Umbraco --version 4.2.21 Install-Package Elmah.Io.Umbraco -Version 4.2.21 <PackageReference Include=\"Elmah.Io.Umbraco\" Version=\"4.2.21\" /> paket add Elmah.Io.Umbraco --version 4.2.21 During the installation, you will be presented with a dialog asking for your API key and log ID. Hit F5 and watch messages start flowing into elmah.io. Note Unless serious security issues in the Elmah.Io.Umbraco v4 package are found, new features will be added to the v5 package only (supporting Umbraco 10 and newer).","title":"Umbraco 8"},{"location":"logging-to-elmah-io-from-umbraco/#configuration","text":"If you are running on the default Umbraco template, all necessary configuration is added during the installation of the Elmah.Io.Umbraco NuGet package. If your web.config file for some reason isn't updated during installation, you can configure elmah.io manually: Configure elmah.io manually . Likewise, the installer configures the elmah.io sink for Serilog in your config\\serilog.user.config file.","title":"Configuration"},{"location":"logging-to-elmah-io-from-umbraco/#different-environments","text":"You may have different environments like Staging and Production . At least you have two: Localhost and Production . If you want to log to different error logs depending on the current environment, check out Use multiple logs for different environments . Web.config transformations work on the Web.config file only but you may have other config files that need transformation as well. In terms of elmah.io, the serilog.user.config file also includes elmah.io configuration that you may want to disable on localhost and include on production. If you are running on Umbraco Cloud this is natively supported as explained here: Config Transforms . Even in self-hosted environments, you can achieve something similar using the SlowCheetah extension. Check out this question on Our for details: Deploying different umbracoSettings.config for different environments .","title":"Different environments"},{"location":"logging-to-elmah-io-from-umbraco/#umbraco-7","text":"We still support Umbraco 7 through the Elmah.Io.Umbraco package version 3.2.35 : .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Umbraco --version 3.2.35 Install-Package Elmah.Io.Umbraco -Version 3.2.35 <PackageReference Include=\"Elmah.Io.Umbraco\" Version=\"3.2.35\" /> paket add Elmah.Io.Umbraco --version 3.2.35 Note New features will be added to the updated package for Umbraco 10 and newer only.","title":"Umbraco 7"},{"location":"logging-to-elmah-io-from-umbraco/#umbraco-cloud","text":"When using Umbraco Cloud, you may not have a local clone of the source code. To install elmah.io on Umbraco Cloud, follow these steps: Clone your Umbraco Cloud project to a local folder as explained here: Working with a Local Clone . Where you need to install and configure the Elmah.Io.Umbraco package depends on the Umbraco major version you are running on Umbraco Cloud. For Umbraco 7-8, all changes should be made in the *.Web project only and all commits from within that folder as well. Don't commit and push anything in the root folder. For Umbraco versions above 8, all changes should be made in the src\\UmbracoProject folder. Follow the installation steps for your Umbraco version as specified in the beginning of this document. Commit and push all changes to the git repository. This will add elmah.io logging to your remote Umbraco Cloud project. In case you want logging to different elmah.io logs from each Umbraco Cloud environment, please check out Umbraco's support for config transformations here: Config transforms .","title":"Umbraco Cloud"},{"location":"logging-to-elmah-io-from-umbraco/#umbraco-uno","text":"Warning Umbraco Uno has been discontinued. Installing elmah.io in Umbraco Uno follows the process of installing it onto Umbraco Cloud. To modify code and configuration in Uno you will need a Umbraco Uno Standard plan or higher. Also, you need to enable Custom Code to clone the code locally. This can be done from Uno by clicking the Enable custom code button: After enabling Custom Code you can create a Development environment and follow the steps in the Umbraco Cloud documentation.","title":"Umbraco Uno"},{"location":"logging-to-elmah-io-from-uno/","text":"Logging to elmah.io from Uno Warning The Uno integration for elmah.io is currently in prerelease. Integrating Uno with elmah.io is done by installing the Elmah.Io.Uno NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Uno --prerelease Install-Package Elmah.Io.Uno -IncludePrerelease <PackageReference Include=\"Elmah.Io.Uno\" Version=\"4.0.19-pre\" /> paket add Elmah.Io.Uno While configured in the shared project, the NuGet package will need to be installed in all platform projects. Elmah.Io.Uno comes with a logger for Microsoft.Extensions.Logging. To configure the logger, open the App.xaml.cs file and locate the InitializeLogging method. Here you will see the logging configuration for your application. Include logging to elmah.io by calling the AddElmahIo method: var factory = LoggerFactory.Create(builder => { // ... builder.AddElmahIo(\"API_KEY\", new Guid(\"LOG_ID\")); // ... }); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the log Id of the log you want to log to. elmah.io will now automatically log all warning, error, and fatal messages to elmah.io. Uno log messages internally, but you can also do manual logging like this: this.Log().LogWarning(\"Oh no\"); Logging with Uno's log helper will require you to add the following usings: using Microsoft.Extensions.Logging; using Uno.Extensions;","title":"Logging from Uno"},{"location":"logging-to-elmah-io-from-uno/#logging-to-elmahio-from-uno","text":"Warning The Uno integration for elmah.io is currently in prerelease. Integrating Uno with elmah.io is done by installing the Elmah.Io.Uno NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Uno --prerelease Install-Package Elmah.Io.Uno -IncludePrerelease <PackageReference Include=\"Elmah.Io.Uno\" Version=\"4.0.19-pre\" /> paket add Elmah.Io.Uno While configured in the shared project, the NuGet package will need to be installed in all platform projects. Elmah.Io.Uno comes with a logger for Microsoft.Extensions.Logging. To configure the logger, open the App.xaml.cs file and locate the InitializeLogging method. Here you will see the logging configuration for your application. Include logging to elmah.io by calling the AddElmahIo method: var factory = LoggerFactory.Create(builder => { // ... builder.AddElmahIo(\"API_KEY\", new Guid(\"LOG_ID\")); // ... }); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the log Id of the log you want to log to. elmah.io will now automatically log all warning, error, and fatal messages to elmah.io. Uno log messages internally, but you can also do manual logging like this: this.Log().LogWarning(\"Oh no\"); Logging with Uno's log helper will require you to add the following usings: using Microsoft.Extensions.Logging; using Uno.Extensions;","title":"Logging to elmah.io from Uno"},{"location":"logging-to-elmah-io-from-vue/","text":"Logging to elmah.io from Vue To log all errors from a Vue.js application, install the elmah.io.javascript npm package as described in Logging from JavaScript or include it with a direct <script> include: <script src=\"https://cdn.jsdelivr.net/gh/elmahio/elmah.io.javascript@latest/dist/elmahio.min.js\" type=\"text/javascript\"></script> Before initializing the application, include the following code: var logger = new Elmahio({ apiKey: \"API_KEY\", logId: \"LOG_ID\" }); Vue.config.errorHandler = function (err, vm, info) { logger.error(err.message, err); }; Vue.config.warnHandler = function (msg, vm, trace) { logger.warning(msg); }; elmah.io.javascript will automatically log all errors raised through window.onerror and log additional errors and warnings from Vue.js through the errorHandler and warnHandler functions. If you want to exclude warnings, simply remove the warnHandler function. Check out the Elmah.Io.JavaScript.VueJs sample for some real working code.","title":"Logging from Vue"},{"location":"logging-to-elmah-io-from-vue/#logging-to-elmahio-from-vue","text":"To log all errors from a Vue.js application, install the elmah.io.javascript npm package as described in Logging from JavaScript or include it with a direct <script> include: <script src=\"https://cdn.jsdelivr.net/gh/elmahio/elmah.io.javascript@latest/dist/elmahio.min.js\" type=\"text/javascript\"></script> Before initializing the application, include the following code: var logger = new Elmahio({ apiKey: \"API_KEY\", logId: \"LOG_ID\" }); Vue.config.errorHandler = function (err, vm, info) { logger.error(err.message, err); }; Vue.config.warnHandler = function (msg, vm, trace) { logger.warning(msg); }; elmah.io.javascript will automatically log all errors raised through window.onerror and log additional errors and warnings from Vue.js through the errorHandler and warnHandler functions. If you want to exclude warnings, simply remove the warnHandler function. Check out the Elmah.Io.JavaScript.VueJs sample for some real working code.","title":"Logging to elmah.io from Vue"},{"location":"logging-to-elmah-io-from-wcf/","text":"Logging to elmah.io from WCF ELMAH (the open-source project) and WCF aren't exactly known to go hand in hand. But, with a bit of custom code, logging exceptions from WCF to elmah.io is possible. Let's get started. Install elmah.io into your WCF project using NuGet: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io Install-Package Elmah.Io <PackageReference Include=\"Elmah.Io\" Version=\"5.*\" /> paket add Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Add a new class named HttpErrorHandler : public class HttpErrorHandler : IErrorHandler { public bool HandleError(Exception error) { return false; } public void ProvideFault(Exception error, MessageVersion version, ref Message fault) { if (error != null) { Elmah.ErrorSignal.FromCurrentContext().Raise(error); } } } This is an implementation of WCF's IErrorHandler that instructs WCF to log any errors to ELMAH, using the Raise -method on ErrorSignal . Then create an attribute named ServiceErrorBehaviourAttribute : public class ServiceErrorBehaviourAttribute : Attribute, IServiceBehavior { Type errorHandlerType; public ServiceErrorBehaviourAttribute(Type errorHandlerType) { this.errorHandlerType = errorHandlerType; } public void Validate(ServiceDescription description, ServiceHostBase serviceHostBase) { } public void AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters) { } public void ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase) { IErrorHandler errorHandler; errorHandler = (IErrorHandler)Activator.CreateInstance(errorHandlerType); foreach (ChannelDispatcherBase channelDispatcherBase in serviceHostBase.ChannelDispatchers) { ChannelDispatcher channelDispatcher = channelDispatcherBase as ChannelDispatcher; channelDispatcher.ErrorHandlers.Add(errorHandler); } } } We'll use the ServiceErrorBehaviourAttribute class for decorating endpoints which we want logging uncaught errors to ELMAH. Add the new attribute to your service implementation like this: [ServiceErrorBehaviour(typeof(HttpErrorHandler))] public class Service1 : IService1 { // ... } That's it. Services decorated with the ServiceErrorBehaviourAttribute now logs exceptions to ELMAH.","title":"Logging from WCF"},{"location":"logging-to-elmah-io-from-wcf/#logging-to-elmahio-from-wcf","text":"ELMAH (the open-source project) and WCF aren't exactly known to go hand in hand. But, with a bit of custom code, logging exceptions from WCF to elmah.io is possible. Let's get started. Install elmah.io into your WCF project using NuGet: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io Install-Package Elmah.Io <PackageReference Include=\"Elmah.Io\" Version=\"5.*\" /> paket add Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Add a new class named HttpErrorHandler : public class HttpErrorHandler : IErrorHandler { public bool HandleError(Exception error) { return false; } public void ProvideFault(Exception error, MessageVersion version, ref Message fault) { if (error != null) { Elmah.ErrorSignal.FromCurrentContext().Raise(error); } } } This is an implementation of WCF's IErrorHandler that instructs WCF to log any errors to ELMAH, using the Raise -method on ErrorSignal . Then create an attribute named ServiceErrorBehaviourAttribute : public class ServiceErrorBehaviourAttribute : Attribute, IServiceBehavior { Type errorHandlerType; public ServiceErrorBehaviourAttribute(Type errorHandlerType) { this.errorHandlerType = errorHandlerType; } public void Validate(ServiceDescription description, ServiceHostBase serviceHostBase) { } public void AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters) { } public void ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase) { IErrorHandler errorHandler; errorHandler = (IErrorHandler)Activator.CreateInstance(errorHandlerType); foreach (ChannelDispatcherBase channelDispatcherBase in serviceHostBase.ChannelDispatchers) { ChannelDispatcher channelDispatcher = channelDispatcherBase as ChannelDispatcher; channelDispatcher.ErrorHandlers.Add(errorHandler); } } } We'll use the ServiceErrorBehaviourAttribute class for decorating endpoints which we want logging uncaught errors to ELMAH. Add the new attribute to your service implementation like this: [ServiceErrorBehaviour(typeof(HttpErrorHandler))] public class Service1 : IService1 { // ... } That's it. Services decorated with the ServiceErrorBehaviourAttribute now logs exceptions to ELMAH.","title":"Logging to elmah.io from WCF"},{"location":"logging-to-elmah-io-from-web-api/","text":"Logging to elmah.io from Web API Web API provides its own mechanism for handling errors, why ELMAH\u2019s modules and handlers don't work there. Luckily, Richard Dingwall created the Elmah.Contrib.WebApi NuGet package to fix this. We've built a package for ASP.NET Web API exclusively, which installs all the necessary packages. To start logging exceptions from Web API, install the Elmah.Io.WebApi NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.WebApi Install-Package Elmah.Io.WebApi <PackageReference Include=\"Elmah.Io.WebApi\" Version=\"5.*\" /> paket add Elmah.Io.WebApi During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Web API 2.x Web API 1.x Add the following code to your WebApiConfig.cs file: public static class WebApiConfig { public static void Register(HttpConfiguration config) { // ... config.Services.Add(typeof(IExceptionLogger), new ElmahExceptionLogger()); // ... } } The registered IExceptionLogger intercepts all thrown exceptions, even errors in controller constructors and routing errors. Add the following code to your Global.asax.cs file: protected void Application_Start() { // ... GlobalConfiguration.Configuration.Filters.Add(new ElmahHandleErrorApiAttribute()); // ... } In this case you register a new global filter with Web API. The downside of this approach is, that only errors thrown in controller actions are logged. All uncaught exceptions in ASP.NET Web API are now logged to elmah.io Logging from exception/action filters It's a widely used Web API approach, to handle all exceptions in a global exception/action filter and return a nicely formatted JSON/XML error response to the client. This is a nice approach to avoid throwing internal server errors, but it also puts ELMAH out of the game. When catching any exception manually and converting it to a response message, errors won't be logged in elmah.io. To overcome this, errors should be logged manually from your global exception/action filter: public class NotImplExceptionFilterAttribute : ExceptionFilterAttribute { public override void OnException(HttpActionExecutedContext context) { ErrorSignal.FromCurrentContext().Raise(context.Exception); // Now generate the result to the client } }","title":"Logging from Web API"},{"location":"logging-to-elmah-io-from-web-api/#logging-to-elmahio-from-web-api","text":"Web API provides its own mechanism for handling errors, why ELMAH\u2019s modules and handlers don't work there. Luckily, Richard Dingwall created the Elmah.Contrib.WebApi NuGet package to fix this. We've built a package for ASP.NET Web API exclusively, which installs all the necessary packages. To start logging exceptions from Web API, install the Elmah.Io.WebApi NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.WebApi Install-Package Elmah.Io.WebApi <PackageReference Include=\"Elmah.Io.WebApi\" Version=\"5.*\" /> paket add Elmah.Io.WebApi During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Web API 2.x Web API 1.x Add the following code to your WebApiConfig.cs file: public static class WebApiConfig { public static void Register(HttpConfiguration config) { // ... config.Services.Add(typeof(IExceptionLogger), new ElmahExceptionLogger()); // ... } } The registered IExceptionLogger intercepts all thrown exceptions, even errors in controller constructors and routing errors. Add the following code to your Global.asax.cs file: protected void Application_Start() { // ... GlobalConfiguration.Configuration.Filters.Add(new ElmahHandleErrorApiAttribute()); // ... } In this case you register a new global filter with Web API. The downside of this approach is, that only errors thrown in controller actions are logged. All uncaught exceptions in ASP.NET Web API are now logged to elmah.io","title":"Logging to elmah.io from Web API"},{"location":"logging-to-elmah-io-from-web-api/#logging-from-exceptionaction-filters","text":"It's a widely used Web API approach, to handle all exceptions in a global exception/action filter and return a nicely formatted JSON/XML error response to the client. This is a nice approach to avoid throwing internal server errors, but it also puts ELMAH out of the game. When catching any exception manually and converting it to a response message, errors won't be logged in elmah.io. To overcome this, errors should be logged manually from your global exception/action filter: public class NotImplExceptionFilterAttribute : ExceptionFilterAttribute { public override void OnException(HttpActionExecutedContext context) { ErrorSignal.FromCurrentContext().Raise(context.Exception); // Now generate the result to the client } }","title":"Logging from exception/action filters"},{"location":"logging-to-elmah-io-from-web-pages/","text":"Logging to elmah.io from Web Pages Logging from ASP.NET Web Pages uses our integration with ELMAH (the open-source project). This means that the installation is identical to installing elmah.io in ASP.NET Web Forms. For a full guide to installing the Elmah.Io NuGet package in your Web Pages project go to: Logging to elmah.io from ASP.NET / WebForms . If the dialog requesting you to input an API key and a Log ID is not shown during the installation of the NuGet package, ELMAH configuration needs to be checked manually as explained here: Configure elmah.io manually .","title":"Logging from Web Pages"},{"location":"logging-to-elmah-io-from-web-pages/#logging-to-elmahio-from-web-pages","text":"Logging from ASP.NET Web Pages uses our integration with ELMAH (the open-source project). This means that the installation is identical to installing elmah.io in ASP.NET Web Forms. For a full guide to installing the Elmah.Io NuGet package in your Web Pages project go to: Logging to elmah.io from ASP.NET / WebForms . If the dialog requesting you to input an API key and a Log ID is not shown during the installation of the NuGet package, ELMAH configuration needs to be checked manually as explained here: Configure elmah.io manually .","title":"Logging to elmah.io from Web Pages"},{"location":"logging-to-elmah-io-from-winforms/","text":"Logging to elmah.io from Windows Forms elmah.io logging can be easily added to Windows Forms applications. We don't provide a package specific for WinForms, but the Elmah.Io.Client package, combined with a bit of code, will achieve just the same. To start logging to elmah.io, install the Elmah.Io.Client NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client Install-Package Elmah.Io.Client <PackageReference Include=\"Elmah.Io.Client\" Version=\"5.*\" /> paket add Elmah.Io.Client Add the following usings to the Program.cs file: using Elmah.Io.Client; using System.Security.Principal; using System.Threading; Add an event handler to the ThreadException event in the Main method before calling Application.Run : Application.ThreadException += Application_ThreadException; // ApplicationConfiguration.Initialize, Application.Run, and similar Finally, add the Application_ThreadException method: static void Application_ThreadException(object sender, ThreadExceptionEventArgs e) { var logger = ElmahioAPI.Create(\"API_KEY\"); var exception = e.Exception; var baseException = exception.GetBaseException(); var data = exception.ToDataList() ?? new List<Item>(); // Include this to log screen size if (Screen.PrimaryScreen != null) { data.Add(new Item(\"Screen-Width\", Screen.PrimaryScreen.Bounds.Width.ToString())); data.Add(new Item(\"Screen-Height\", Screen.PrimaryScreen.Bounds.Height.ToString())); } logger.Messages.Create(\"LOG_ID\", new CreateMessage { DateTime = DateTime.UtcNow, Detail = exception.ToString(), Type = baseException.GetType().FullName, Title = baseException.Message ?? \"An error occurred\", Data = data, Severity = \"Error\", Source = baseException.Source, User = WindowsIdentity.GetCurrent().Name, Version = Application.ProductVersion, Hostname = Environment.MachineName ?? Environment.GetEnvironmentVariable(\"COMPUTERNAME\"), ServerVariables = new List<Item> { new Item(\"User-Agent\", $\"X-ELMAHIO-APPLICATION; OS=Windows; OSVERSION={Environment.OSVersion.Version}; ENGINE=WinForms\") } }); Application.Exit(); } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the id of the log ( Where is my log ID? ) where you want errors logged. This example closes the application when an error occurs. If you only want to log the error, make sure to re-use the logger object: private static IElmahioAPI logger; static void Application_ThreadException(object sender, ThreadExceptionEventArgs e) { if (logger == null) { logger = ElmahioAPI.Create(\"API_KEY\"); } // ... }","title":"Logging from Windows Forms"},{"location":"logging-to-elmah-io-from-winforms/#logging-to-elmahio-from-windows-forms","text":"elmah.io logging can be easily added to Windows Forms applications. We don't provide a package specific for WinForms, but the Elmah.Io.Client package, combined with a bit of code, will achieve just the same. To start logging to elmah.io, install the Elmah.Io.Client NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client Install-Package Elmah.Io.Client <PackageReference Include=\"Elmah.Io.Client\" Version=\"5.*\" /> paket add Elmah.Io.Client Add the following usings to the Program.cs file: using Elmah.Io.Client; using System.Security.Principal; using System.Threading; Add an event handler to the ThreadException event in the Main method before calling Application.Run : Application.ThreadException += Application_ThreadException; // ApplicationConfiguration.Initialize, Application.Run, and similar Finally, add the Application_ThreadException method: static void Application_ThreadException(object sender, ThreadExceptionEventArgs e) { var logger = ElmahioAPI.Create(\"API_KEY\"); var exception = e.Exception; var baseException = exception.GetBaseException(); var data = exception.ToDataList() ?? new List<Item>(); // Include this to log screen size if (Screen.PrimaryScreen != null) { data.Add(new Item(\"Screen-Width\", Screen.PrimaryScreen.Bounds.Width.ToString())); data.Add(new Item(\"Screen-Height\", Screen.PrimaryScreen.Bounds.Height.ToString())); } logger.Messages.Create(\"LOG_ID\", new CreateMessage { DateTime = DateTime.UtcNow, Detail = exception.ToString(), Type = baseException.GetType().FullName, Title = baseException.Message ?? \"An error occurred\", Data = data, Severity = \"Error\", Source = baseException.Source, User = WindowsIdentity.GetCurrent().Name, Version = Application.ProductVersion, Hostname = Environment.MachineName ?? Environment.GetEnvironmentVariable(\"COMPUTERNAME\"), ServerVariables = new List<Item> { new Item(\"User-Agent\", $\"X-ELMAHIO-APPLICATION; OS=Windows; OSVERSION={Environment.OSVersion.Version}; ENGINE=WinForms\") } }); Application.Exit(); } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the id of the log ( Where is my log ID? ) where you want errors logged. This example closes the application when an error occurs. If you only want to log the error, make sure to re-use the logger object: private static IElmahioAPI logger; static void Application_ThreadException(object sender, ThreadExceptionEventArgs e) { if (logger == null) { logger = ElmahioAPI.Create(\"API_KEY\"); } // ... }","title":"Logging to elmah.io from Windows Forms"},{"location":"logging-to-elmah-io-from-winui/","text":"Logging to elmah.io from WinUI Logging to elmah.io from WinUI Logging exceptions manually Breadcrumbs Additional options Setting application name Hooks elmah.io logging can be easily added to WinUI applications. To start logging to elmah.io, install the Elmah.Io.WinUI NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.WinUI --prerelease Install-Package Elmah.Io.WinUI -IncludePrerelease <PackageReference Include=\"Elmah.Io.WinUI\" Version=\"5.*\" /> paket add Elmah.Io.WinUI Next, initialize elmah.io in the App.xaml.cs file: public partial class App : Application { public App() { ElmahIoWinUI.Init(new ElmahIoWinUIOptions( \"API_KEY\", new Guid(\"LOG_ID\"))); } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the id of the log ( Where is my log ID? ) where you want errors logged. Note Remember to generate a new API key with messages_write permission only. This makes it easy to revoke the API key if someone starts sending messages to your log with your key. That's it. All uncaught exceptions are now logged to elmah.io. Logging exceptions manually Once initialized using the Init call, exceptions can be logged manually: ElmahIoWinUI.Log(new Exception()); Breadcrumbs The Elmah.Io.WinUI package provide an API to manually include breadcrumbs: ElmahIoWinUI.AddBreadcrumb(new Client.Breadcrumb(DateTime.UtcNow, severity:\"Information\", action:\"Save\", message:\"Record save\")); severity can be set to Verbose , Debug , Information , Warning , Error , or Fatal . The value of action is a string of your choice. If using one of the following values, the action will get a special icon in the elmah.io UI: click , submit , navigation , request , error , warning , fatal . The message field can be used to describe the breadcrumb in more detail and/or include IDs or similar related to the breadcrumb. The number of breadcrumbs to store in memory is 10 as a default. If you want to lower or increase this number, set the MaximumBreadcrumbs property during initialization: ElmahIoWinUI.Init(new ElmahIoWinUIOptions(/* ... */) { // ... MaximumBreadcrumbs = 20, }); Additional options Setting application name The application name can be set on all logged messages by setting the Application property on ElmahIoWinUIOptions during initialization: ElmahIoWinUI.Init(new ElmahIoWinUIOptions(/* ... */) { // ... Application = \"WinUI on .NET 8\", }); Hooks The ElmahIoWinUIOptions class also supports a range of actions to hook into various stages of logging errors. Hooks are registered as actions when installing Elmah.Io.WinUI : ElmahIoWinUI.Init(new ElmahIoWinUIOptions(/* ... */) { // ... OnFilter = msg => { return msg.Type.Equals(\"System.NullReferenceException\"); }, OnMessage = msg => { msg.Version = \"42\"; }, OnError = (msg, ex) => { // Log somewhere else } }); The OnFilter action can be used to ignore/filter specific errors. In this example, all errors of type System.NullReferenceException is ignored. The OnMessage action can be used to decorate/enrich all errors with different information. In this example, all errors get a version number of 42 . The OnError action can be used to handle if the elmah.io API is down. While this doesn't happen frequently, you might want to log errors elsewhere.","title":"Logging from WinUI"},{"location":"logging-to-elmah-io-from-winui/#logging-to-elmahio-from-winui","text":"Logging to elmah.io from WinUI Logging exceptions manually Breadcrumbs Additional options Setting application name Hooks elmah.io logging can be easily added to WinUI applications. To start logging to elmah.io, install the Elmah.Io.WinUI NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.WinUI --prerelease Install-Package Elmah.Io.WinUI -IncludePrerelease <PackageReference Include=\"Elmah.Io.WinUI\" Version=\"5.*\" /> paket add Elmah.Io.WinUI Next, initialize elmah.io in the App.xaml.cs file: public partial class App : Application { public App() { ElmahIoWinUI.Init(new ElmahIoWinUIOptions( \"API_KEY\", new Guid(\"LOG_ID\"))); } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the id of the log ( Where is my log ID? ) where you want errors logged. Note Remember to generate a new API key with messages_write permission only. This makes it easy to revoke the API key if someone starts sending messages to your log with your key. That's it. All uncaught exceptions are now logged to elmah.io.","title":"Logging to elmah.io from WinUI"},{"location":"logging-to-elmah-io-from-winui/#logging-exceptions-manually","text":"Once initialized using the Init call, exceptions can be logged manually: ElmahIoWinUI.Log(new Exception());","title":"Logging exceptions manually"},{"location":"logging-to-elmah-io-from-winui/#breadcrumbs","text":"The Elmah.Io.WinUI package provide an API to manually include breadcrumbs: ElmahIoWinUI.AddBreadcrumb(new Client.Breadcrumb(DateTime.UtcNow, severity:\"Information\", action:\"Save\", message:\"Record save\")); severity can be set to Verbose , Debug , Information , Warning , Error , or Fatal . The value of action is a string of your choice. If using one of the following values, the action will get a special icon in the elmah.io UI: click , submit , navigation , request , error , warning , fatal . The message field can be used to describe the breadcrumb in more detail and/or include IDs or similar related to the breadcrumb. The number of breadcrumbs to store in memory is 10 as a default. If you want to lower or increase this number, set the MaximumBreadcrumbs property during initialization: ElmahIoWinUI.Init(new ElmahIoWinUIOptions(/* ... */) { // ... MaximumBreadcrumbs = 20, });","title":"Breadcrumbs"},{"location":"logging-to-elmah-io-from-winui/#additional-options","text":"","title":"Additional options"},{"location":"logging-to-elmah-io-from-winui/#setting-application-name","text":"The application name can be set on all logged messages by setting the Application property on ElmahIoWinUIOptions during initialization: ElmahIoWinUI.Init(new ElmahIoWinUIOptions(/* ... */) { // ... Application = \"WinUI on .NET 8\", });","title":"Setting application name"},{"location":"logging-to-elmah-io-from-winui/#hooks","text":"The ElmahIoWinUIOptions class also supports a range of actions to hook into various stages of logging errors. Hooks are registered as actions when installing Elmah.Io.WinUI : ElmahIoWinUI.Init(new ElmahIoWinUIOptions(/* ... */) { // ... OnFilter = msg => { return msg.Type.Equals(\"System.NullReferenceException\"); }, OnMessage = msg => { msg.Version = \"42\"; }, OnError = (msg, ex) => { // Log somewhere else } }); The OnFilter action can be used to ignore/filter specific errors. In this example, all errors of type System.NullReferenceException is ignored. The OnMessage action can be used to decorate/enrich all errors with different information. In this example, all errors get a version number of 42 . The OnError action can be used to handle if the elmah.io API is down. While this doesn't happen frequently, you might want to log errors elsewhere.","title":"Hooks"},{"location":"logging-to-elmah-io-from-wpf/","text":"Logging to elmah.io from WPF Logging to elmah.io from WPF Logging exceptions manually Breadcrumbs Additional options Setting application name Hooks Legacy elmah.io logging can be easily added to WPF applications. To start logging to elmah.io, install the Elmah.Io.Wpf NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Wpf Install-Package Elmah.Io.Wpf <PackageReference Include=\"Elmah.Io.Wpf\" Version=\"5.*\" /> paket add Elmah.Io.Wpf Next, initialize elmah.io in the App.xaml.cs file: public partial class App : Application { public App() { ElmahIoWpf.Init(new ElmahIoWpfOptions { ApiKey = \"API_KEY\", LogId = new Guid(\"LOG_ID\") }); } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the id of the log ( Where is my log ID? ) where you want errors logged. Note Remember to generate a new API key with messages_write permission only. This makes it easy to revoke the API key if someone starts sending messages to your log with your key. That's it. All uncaught exceptions are now logged to elmah.io. Logging exceptions manually Once initialized using the Init call, exceptions can be logged manually: ElmahIoWpf.Log(new Exception()); Breadcrumbs The Elmah.Io.Wpf package automatically records breadcrumbs when clicking buttons and opening/closing windows. To manually include a breadcrumb you can include the following code: ElmahIoWpf.AddBreadcrumb(new Client.Breadcrumb(DateTime.UtcNow, severity:\"Information\", action:\"Save\", message:\"Record save\")); severity can be set to Verbose , Debug , Information , Warning , Error , or Fatal . The value of action is a string of your choice. If using one of the following values, the action will get a special icon in the elmah.io UI: click , submit , navigation , request , error , warning , fatal . The message field can be used to describe the breadcrumb in more detail and/or include IDs or similar related to the breadcrumb. The number of breadcrumbs to store in memory is 10 as a default. If you want to lower or increase this number, set the MaximumBreadcrumbs property during initialization: ElmahIoWpf.Init(new ElmahIoWpfOptions { // ... MaximumBreadcrumbs = 20, }); Additional options Setting application name The application name can be set on all logged messages by setting the Application property on ElmahIoWpfOptions during initialization: ElmahIoWpf.Init(new ElmahIoWpfOptions { // ... Application = \"WPF on .NET 6\", }); Hooks The ElmahIoWpfOptions class also supports a range of actions to hook into various stages of logging errors. Hooks are registered as actions when installing Elmah.Io.Wpf : ElmahIoWpf.Init(new ElmahIoWpfOptions { // ... OnFilter = msg => { return msg.Type.Equals(\"System.NullReferenceException\"); }, OnMessage = msg => { msg.Version = \"42\"; }, OnError = (msg, ex) => { // Log somewhere else } }); The OnFilter action can be used to ignore/filter specific errors. In this example, all errors of type System.NullReferenceException is ignored. The OnMessage action can be used to decorate/enrich all errors with different information. In this example, all errors get a version number of 42 . The OnError action can be used to handle if the elmah.io API is down. While this doesn't happen frequently, you might want to log errors elsewhere. Legacy Before the Elmah.Io.Wpf package was developed, this was the recommended way of installing elmah.io in WPF. To start logging to elmah.io, install the Elmah.Io.Client NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client Install-Package Elmah.Io.Client <PackageReference Include=\"Elmah.Io.Client\" Version=\"5.*\" /> paket add Elmah.Io.Client Add the following usings to the App.xaml.cs file: using Elmah.Io.Client; using System.Diagnostics; using System.Security.Principal; using System.Threading.Tasks; Add the following code: private IElmahioAPI logger; public App() { logger = ElmahioAPI.Create(\"API_KEY\"); AppDomain.CurrentDomain.UnhandledException += (sender, args) => LogException(args.ExceptionObject as Exception); TaskScheduler.UnobservedTaskException += (sender, args) => LogException(args.Exception); Dispatcher.UnhandledException += (sender, args) => { if (!Debugger.IsAttached) LogException(args.Exception); }; } private void LogException(Exception exception) { var baseException = exception.GetBaseException(); logger.Messages.Create(\"LOG_ID\", new CreateMessage { DateTime = DateTime.UtcNow, Detail = exception?.ToString(), Type = baseException?.GetType().FullName, Title = baseException?.Message ?? \"An error occurred\", Data = exception.ToDataList(), Severity = \"Error\", Source = baseException?.Source, User = WindowsIdentity.GetCurrent().Name, }); } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the id of the log ( Where is my log ID? ) where you want errors logged.","title":"Logging from WPF"},{"location":"logging-to-elmah-io-from-wpf/#logging-to-elmahio-from-wpf","text":"Logging to elmah.io from WPF Logging exceptions manually Breadcrumbs Additional options Setting application name Hooks Legacy elmah.io logging can be easily added to WPF applications. To start logging to elmah.io, install the Elmah.Io.Wpf NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Wpf Install-Package Elmah.Io.Wpf <PackageReference Include=\"Elmah.Io.Wpf\" Version=\"5.*\" /> paket add Elmah.Io.Wpf Next, initialize elmah.io in the App.xaml.cs file: public partial class App : Application { public App() { ElmahIoWpf.Init(new ElmahIoWpfOptions { ApiKey = \"API_KEY\", LogId = new Guid(\"LOG_ID\") }); } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the id of the log ( Where is my log ID? ) where you want errors logged. Note Remember to generate a new API key with messages_write permission only. This makes it easy to revoke the API key if someone starts sending messages to your log with your key. That's it. All uncaught exceptions are now logged to elmah.io.","title":"Logging to elmah.io from WPF"},{"location":"logging-to-elmah-io-from-wpf/#logging-exceptions-manually","text":"Once initialized using the Init call, exceptions can be logged manually: ElmahIoWpf.Log(new Exception());","title":"Logging exceptions manually"},{"location":"logging-to-elmah-io-from-wpf/#breadcrumbs","text":"The Elmah.Io.Wpf package automatically records breadcrumbs when clicking buttons and opening/closing windows. To manually include a breadcrumb you can include the following code: ElmahIoWpf.AddBreadcrumb(new Client.Breadcrumb(DateTime.UtcNow, severity:\"Information\", action:\"Save\", message:\"Record save\")); severity can be set to Verbose , Debug , Information , Warning , Error , or Fatal . The value of action is a string of your choice. If using one of the following values, the action will get a special icon in the elmah.io UI: click , submit , navigation , request , error , warning , fatal . The message field can be used to describe the breadcrumb in more detail and/or include IDs or similar related to the breadcrumb. The number of breadcrumbs to store in memory is 10 as a default. If you want to lower or increase this number, set the MaximumBreadcrumbs property during initialization: ElmahIoWpf.Init(new ElmahIoWpfOptions { // ... MaximumBreadcrumbs = 20, });","title":"Breadcrumbs"},{"location":"logging-to-elmah-io-from-wpf/#additional-options","text":"","title":"Additional options"},{"location":"logging-to-elmah-io-from-wpf/#setting-application-name","text":"The application name can be set on all logged messages by setting the Application property on ElmahIoWpfOptions during initialization: ElmahIoWpf.Init(new ElmahIoWpfOptions { // ... Application = \"WPF on .NET 6\", });","title":"Setting application name"},{"location":"logging-to-elmah-io-from-wpf/#hooks","text":"The ElmahIoWpfOptions class also supports a range of actions to hook into various stages of logging errors. Hooks are registered as actions when installing Elmah.Io.Wpf : ElmahIoWpf.Init(new ElmahIoWpfOptions { // ... OnFilter = msg => { return msg.Type.Equals(\"System.NullReferenceException\"); }, OnMessage = msg => { msg.Version = \"42\"; }, OnError = (msg, ex) => { // Log somewhere else } }); The OnFilter action can be used to ignore/filter specific errors. In this example, all errors of type System.NullReferenceException is ignored. The OnMessage action can be used to decorate/enrich all errors with different information. In this example, all errors get a version number of 42 . The OnError action can be used to handle if the elmah.io API is down. While this doesn't happen frequently, you might want to log errors elsewhere.","title":"Hooks"},{"location":"logging-to-elmah-io-from-wpf/#legacy","text":"Before the Elmah.Io.Wpf package was developed, this was the recommended way of installing elmah.io in WPF. To start logging to elmah.io, install the Elmah.Io.Client NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client Install-Package Elmah.Io.Client <PackageReference Include=\"Elmah.Io.Client\" Version=\"5.*\" /> paket add Elmah.Io.Client Add the following usings to the App.xaml.cs file: using Elmah.Io.Client; using System.Diagnostics; using System.Security.Principal; using System.Threading.Tasks; Add the following code: private IElmahioAPI logger; public App() { logger = ElmahioAPI.Create(\"API_KEY\"); AppDomain.CurrentDomain.UnhandledException += (sender, args) => LogException(args.ExceptionObject as Exception); TaskScheduler.UnobservedTaskException += (sender, args) => LogException(args.Exception); Dispatcher.UnhandledException += (sender, args) => { if (!Debugger.IsAttached) LogException(args.Exception); }; } private void LogException(Exception exception) { var baseException = exception.GetBaseException(); logger.Messages.Create(\"LOG_ID\", new CreateMessage { DateTime = DateTime.UtcNow, Detail = exception?.ToString(), Type = baseException?.GetType().FullName, Title = baseException?.Message ?? \"An error occurred\", Data = exception.ToDataList(), Severity = \"Error\", Source = baseException?.Source, User = WindowsIdentity.GetCurrent().Name, }); } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the id of the log ( Where is my log ID? ) where you want errors logged.","title":"Legacy"},{"location":"logging-to-elmah-io-from-xamarin/","text":"Logging to elmah.io from Xamarin Logging to elmah.io from Xamarin Log exceptions manually Breadcrumbs Additional configuration Application Version Decorating all messages Filtering log messages Handling errors Legacy integration Warning The Xamarin integration for elmah.io is currently in prerelease. Integrating Xamarin with elmah.io is done by installing the Elmah.Io.Xamarin NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Xamarin --prerelease Install-Package Elmah.Io.Xamarin -IncludePrerelease <PackageReference Include=\"Elmah.Io.Xamarin\" Version=\"4.0.30-pre\" /> paket add Elmah.Io.Xamarin For each platform (Android and iOS) you will need to set up elmah.io as illustrated in the following sections. The code is the same for both Xamarin and Xamarin.Forms. Android iOS Open the MainActivity.cs file and add the following using statements: using System; using Elmah.Io.Xamarin; Locate the OnCreate method and add the following code before all other lines: ElmahIoXamarin.Init(new ElmahIoXamarinOptions { ApiKey = \"API_KEY\", LogId = new Guid(\"LOG_ID\"), }); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the log Id of the log you want to log to. Calling the Init method will initialize elmah.io. For more configuration options see the Additional configuration section. Open the Main.cs file and add the following using statements: using System; using Elmah.Io.Xamarin; Locate the Main method and add the following code after the call to UIApplication.Main : ElmahIoXamarin.Init(new ElmahIoXamarinOptions { ApiKey = \"API_KEY\", LogId = new Guid(\"LOG_ID\"), }); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the log Id of the log you want to log to. Calling the Init method will initialize elmah.io. For more configuration options see the Additional configuration section. Log exceptions manually Once the ElmahIoXamarin.Init method has been configured during initialization of the app, any exception can be logged manually using the Log methods available in the Elmah.Io.Xamarin namespace: try { // Code that may break } catch (Exception e) { // Log the exception with the Log extension method: e.Log(); // or use the Log method on ElmahIoXamarin: ElmahIoXamarin.Log(e); } Breadcrumbs Breadcrumbs can be a great help when needing to figure out how a user ended up with an error. To log breadcrumbs, you can use the AddBreadcrumb method on ElmahIoXamarin . The following is a sample for Android which will log breadcrumbs on interesting events: public class MainActivity : AppCompatActivity, BottomNavigationView.IOnNavigationItemSelectedListener { public override void OnBackPressed() { ElmahIoXamarin.AddBreadcrumb(\"OnBackPressed\", DateTime.UtcNow, action: \"Navigation\"); base.OnBackPressed(); } protected override void OnPause() { ElmahIoXamarin.AddBreadcrumb(\"OnPause\", DateTime.UtcNow); base.OnPause(); } // ... public bool OnNavigationItemSelected(IMenuItem item) { switch (item.ItemId) { case Resource.Id.navigation_home: ElmahIoXamarin.AddBreadcrumb(\"Navigate to Home\", DateTime.UtcNow, action: \"Navigation\"); textMessage.SetText(Resource.String.title_home); return true; case Resource.Id.navigation_dashboard: ElmahIoXamarin.AddBreadcrumb(\"Navigate to Dashboard\", DateTime.UtcNow, action: \"Navigation\"); textMessage.SetText(Resource.String.title_dashboard); return true; case Resource.Id.navigation_notifications: ElmahIoXamarin.AddBreadcrumb(\"Navigate to Notifications\", DateTime.UtcNow, action: \"Navigation\"); textMessage.SetText(Resource.String.title_notifications); return true; } return false; } } Additional configuration Besides the mandatory properties ApiKey and LogId the ElmahIoXamarinOptions provide a range of other configuration parameters. Application The elmah.io integration for Xamarin will automatically use the package name for the Application field. To override this you can set the application name in settings: ElmahIoXamarin.Init(new ElmahIoXamarinOptions { // ... Application = \"MyApp\" }); Version The elmah.io integration for Xamarin will automatically use the package version for the Version field. To override this you can set the version string in settings: ElmahIoXamarin.Init(new ElmahIoXamarinOptions { // ... Version = \"1.0.2\" }); Decorating all messages All log messages logged through this integration can be decorated with the OnMessage action: ElmahIoXamarin.Init(new ElmahIoXamarinOptions { // ... OnMessage = msg => { msg.Source = \"Custom source\"; } }); Filtering log messages Log messages can be filtered directly on the device to avoid specific log messages from being sent to elmah.io with the OnFilter function: ElmahIoXamarin.Init(new ElmahIoXamarinOptions { // ... OnFilter = msg => msg.Title.Contains(\"foo\") }); This code will automatically ignore all log messages with the text foo in the title. Handling errors You may want to handle the scenario where the device cannot communicate with the elmah.io API. You can use the OnError action: ElmahIoXamarin.Init(new ElmahIoXamarinOptions { // ... OnError = (msg, ex) => { // Do something with ex } }); Legacy integration If you prefer you can configure elmah.io manually without the use of the Elmah.Io.Xamarin package. This is not the recommended way to integrate with elmah.io from Xamarin and this approach will be discontinued. Start by installing the Elmah.Io.Client NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client Install-Package Elmah.Io.Client <PackageReference Include=\"Elmah.Io.Client\" Version=\"5.*\" /> paket add Elmah.Io.Client If you are targeting a single platform, you can install the package directly in the startup project. If you are targeting multiple platforms, you can either install the package in all platform-specific projects or a shared project. Additional steps will vary from platform to platform. Android iOS Locate your main activity class and look for the OnCreate method. Here, you'd want to set up event handlers for when uncaught exceptions happen: protected override void OnCreate(Bundle savedInstanceState) { // ... AndroidEnvironment.UnhandledExceptionRaiser += AndroidEnvironment_UnhandledExceptionRaiser; AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException; TaskScheduler.UnobservedTaskException += TaskScheduler_UnobservedTaskException; // ... LoadApplication(new App()); etc. } Next, implement a method that can log an exception to elmah.io: private void LogExceptionToElmahIo(Exception exception) { if (exception == null) return; if (elmahIoClient == null) { elmahIoClient = ElmahioAPI.Create(\"API_KEY\"); } var packageInfo = PackageManager.GetPackageInfo(PackageName, PackageInfoFlags.MetaData); var baseException = exception?.GetBaseException(); var errorMessage = baseException?.Message ?? \"Unhandled exception\"; try { elmahIoClient.Messages.Create(\"LOG_ID\", new CreateMessage { Data = exception?.ToDataList(), DateTime = DateTime.UtcNow, Detail = exception?.ToString(), Severity = \"Error\", Source = baseException?.Source, Title = errorMessage, Type = baseException?.GetType().FullName, Version = packageInfo.VersionName, Application = packageInfo.PackageName, }); } catch (Exception inner) { Android.Util.Log.Error(\"elmahio\", inner.Message); } // Log to Android Device Logging. Android.Util.Log.Error(\"crash\", errorMessage); } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the log Id of the log you want to log to. Finally, implement the three event handlers that we added in the first step: private void TaskScheduler_UnobservedTaskException(object sender, UnobservedTaskExceptionEventArgs e) { LogExceptionToElmahIo(e.Exception); e.SetObserved(); } private void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e) { LogExceptionToElmahIo(e.ExceptionObject as Exception); } private void AndroidEnvironment_UnhandledExceptionRaiser(object sender, RaiseThrowableEventArgs e) { LogExceptionToElmahIo(e.Exception); e.Handled = true; } Locate your main application class and look for the Main method. Here, you'd want to set up event handlers for when uncaught exceptions happen: static void Main(string[] args) { // ... AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException; TaskScheduler.UnobservedTaskException += TaskScheduler_UnobservedTaskException; } Next, implement a method that can log an exception to elmah.io: private static void LogExceptionToElmahIo(Exception exception) { if (exception == null) return; if (elmahIoClient == null) { elmahIoClient = ElmahioAPI.Create(\"API_KEY\"); } var baseException = exception?.GetBaseException(); elmahIoClient.Messages.Create(\"LOG_ID\", new CreateMessage { Data = exception?.ToDataList(), DateTime = DateTime.UtcNow, Detail = exception?.ToString(), Severity = \"Error\", Source = baseException?.Source, Title = baseException?.Message ?? \"Unhandled exception\", Type = baseException?.GetType().FullName, }); } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the log Id of the log you want to log to. Finally, implement the two event handlers that we added in the first step: private static void TaskScheduler_UnobservedTaskException( object sender, UnobservedTaskExceptionEventArgs e) { LogExceptionToElmahIo(e.Exception); e.SetObserved(); } private static void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e) { LogExceptionToElmahIo(e.ExceptionObject as Exception); }","title":"Logging from Xamarin"},{"location":"logging-to-elmah-io-from-xamarin/#logging-to-elmahio-from-xamarin","text":"Logging to elmah.io from Xamarin Log exceptions manually Breadcrumbs Additional configuration Application Version Decorating all messages Filtering log messages Handling errors Legacy integration Warning The Xamarin integration for elmah.io is currently in prerelease. Integrating Xamarin with elmah.io is done by installing the Elmah.Io.Xamarin NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Xamarin --prerelease Install-Package Elmah.Io.Xamarin -IncludePrerelease <PackageReference Include=\"Elmah.Io.Xamarin\" Version=\"4.0.30-pre\" /> paket add Elmah.Io.Xamarin For each platform (Android and iOS) you will need to set up elmah.io as illustrated in the following sections. The code is the same for both Xamarin and Xamarin.Forms. Android iOS Open the MainActivity.cs file and add the following using statements: using System; using Elmah.Io.Xamarin; Locate the OnCreate method and add the following code before all other lines: ElmahIoXamarin.Init(new ElmahIoXamarinOptions { ApiKey = \"API_KEY\", LogId = new Guid(\"LOG_ID\"), }); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the log Id of the log you want to log to. Calling the Init method will initialize elmah.io. For more configuration options see the Additional configuration section. Open the Main.cs file and add the following using statements: using System; using Elmah.Io.Xamarin; Locate the Main method and add the following code after the call to UIApplication.Main : ElmahIoXamarin.Init(new ElmahIoXamarinOptions { ApiKey = \"API_KEY\", LogId = new Guid(\"LOG_ID\"), }); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the log Id of the log you want to log to. Calling the Init method will initialize elmah.io. For more configuration options see the Additional configuration section.","title":"Logging to elmah.io from Xamarin"},{"location":"logging-to-elmah-io-from-xamarin/#log-exceptions-manually","text":"Once the ElmahIoXamarin.Init method has been configured during initialization of the app, any exception can be logged manually using the Log methods available in the Elmah.Io.Xamarin namespace: try { // Code that may break } catch (Exception e) { // Log the exception with the Log extension method: e.Log(); // or use the Log method on ElmahIoXamarin: ElmahIoXamarin.Log(e); }","title":"Log exceptions manually"},{"location":"logging-to-elmah-io-from-xamarin/#breadcrumbs","text":"Breadcrumbs can be a great help when needing to figure out how a user ended up with an error. To log breadcrumbs, you can use the AddBreadcrumb method on ElmahIoXamarin . The following is a sample for Android which will log breadcrumbs on interesting events: public class MainActivity : AppCompatActivity, BottomNavigationView.IOnNavigationItemSelectedListener { public override void OnBackPressed() { ElmahIoXamarin.AddBreadcrumb(\"OnBackPressed\", DateTime.UtcNow, action: \"Navigation\"); base.OnBackPressed(); } protected override void OnPause() { ElmahIoXamarin.AddBreadcrumb(\"OnPause\", DateTime.UtcNow); base.OnPause(); } // ... public bool OnNavigationItemSelected(IMenuItem item) { switch (item.ItemId) { case Resource.Id.navigation_home: ElmahIoXamarin.AddBreadcrumb(\"Navigate to Home\", DateTime.UtcNow, action: \"Navigation\"); textMessage.SetText(Resource.String.title_home); return true; case Resource.Id.navigation_dashboard: ElmahIoXamarin.AddBreadcrumb(\"Navigate to Dashboard\", DateTime.UtcNow, action: \"Navigation\"); textMessage.SetText(Resource.String.title_dashboard); return true; case Resource.Id.navigation_notifications: ElmahIoXamarin.AddBreadcrumb(\"Navigate to Notifications\", DateTime.UtcNow, action: \"Navigation\"); textMessage.SetText(Resource.String.title_notifications); return true; } return false; } }","title":"Breadcrumbs"},{"location":"logging-to-elmah-io-from-xamarin/#additional-configuration","text":"Besides the mandatory properties ApiKey and LogId the ElmahIoXamarinOptions provide a range of other configuration parameters.","title":"Additional configuration"},{"location":"logging-to-elmah-io-from-xamarin/#application","text":"The elmah.io integration for Xamarin will automatically use the package name for the Application field. To override this you can set the application name in settings: ElmahIoXamarin.Init(new ElmahIoXamarinOptions { // ... Application = \"MyApp\" });","title":"Application"},{"location":"logging-to-elmah-io-from-xamarin/#version","text":"The elmah.io integration for Xamarin will automatically use the package version for the Version field. To override this you can set the version string in settings: ElmahIoXamarin.Init(new ElmahIoXamarinOptions { // ... Version = \"1.0.2\" });","title":"Version"},{"location":"logging-to-elmah-io-from-xamarin/#decorating-all-messages","text":"All log messages logged through this integration can be decorated with the OnMessage action: ElmahIoXamarin.Init(new ElmahIoXamarinOptions { // ... OnMessage = msg => { msg.Source = \"Custom source\"; } });","title":"Decorating all messages"},{"location":"logging-to-elmah-io-from-xamarin/#filtering-log-messages","text":"Log messages can be filtered directly on the device to avoid specific log messages from being sent to elmah.io with the OnFilter function: ElmahIoXamarin.Init(new ElmahIoXamarinOptions { // ... OnFilter = msg => msg.Title.Contains(\"foo\") }); This code will automatically ignore all log messages with the text foo in the title.","title":"Filtering log messages"},{"location":"logging-to-elmah-io-from-xamarin/#handling-errors","text":"You may want to handle the scenario where the device cannot communicate with the elmah.io API. You can use the OnError action: ElmahIoXamarin.Init(new ElmahIoXamarinOptions { // ... OnError = (msg, ex) => { // Do something with ex } });","title":"Handling errors"},{"location":"logging-to-elmah-io-from-xamarin/#legacy-integration","text":"If you prefer you can configure elmah.io manually without the use of the Elmah.Io.Xamarin package. This is not the recommended way to integrate with elmah.io from Xamarin and this approach will be discontinued. Start by installing the Elmah.Io.Client NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client Install-Package Elmah.Io.Client <PackageReference Include=\"Elmah.Io.Client\" Version=\"5.*\" /> paket add Elmah.Io.Client If you are targeting a single platform, you can install the package directly in the startup project. If you are targeting multiple platforms, you can either install the package in all platform-specific projects or a shared project. Additional steps will vary from platform to platform. Android iOS Locate your main activity class and look for the OnCreate method. Here, you'd want to set up event handlers for when uncaught exceptions happen: protected override void OnCreate(Bundle savedInstanceState) { // ... AndroidEnvironment.UnhandledExceptionRaiser += AndroidEnvironment_UnhandledExceptionRaiser; AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException; TaskScheduler.UnobservedTaskException += TaskScheduler_UnobservedTaskException; // ... LoadApplication(new App()); etc. } Next, implement a method that can log an exception to elmah.io: private void LogExceptionToElmahIo(Exception exception) { if (exception == null) return; if (elmahIoClient == null) { elmahIoClient = ElmahioAPI.Create(\"API_KEY\"); } var packageInfo = PackageManager.GetPackageInfo(PackageName, PackageInfoFlags.MetaData); var baseException = exception?.GetBaseException(); var errorMessage = baseException?.Message ?? \"Unhandled exception\"; try { elmahIoClient.Messages.Create(\"LOG_ID\", new CreateMessage { Data = exception?.ToDataList(), DateTime = DateTime.UtcNow, Detail = exception?.ToString(), Severity = \"Error\", Source = baseException?.Source, Title = errorMessage, Type = baseException?.GetType().FullName, Version = packageInfo.VersionName, Application = packageInfo.PackageName, }); } catch (Exception inner) { Android.Util.Log.Error(\"elmahio\", inner.Message); } // Log to Android Device Logging. Android.Util.Log.Error(\"crash\", errorMessage); } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the log Id of the log you want to log to. Finally, implement the three event handlers that we added in the first step: private void TaskScheduler_UnobservedTaskException(object sender, UnobservedTaskExceptionEventArgs e) { LogExceptionToElmahIo(e.Exception); e.SetObserved(); } private void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e) { LogExceptionToElmahIo(e.ExceptionObject as Exception); } private void AndroidEnvironment_UnhandledExceptionRaiser(object sender, RaiseThrowableEventArgs e) { LogExceptionToElmahIo(e.Exception); e.Handled = true; } Locate your main application class and look for the Main method. Here, you'd want to set up event handlers for when uncaught exceptions happen: static void Main(string[] args) { // ... AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException; TaskScheduler.UnobservedTaskException += TaskScheduler_UnobservedTaskException; } Next, implement a method that can log an exception to elmah.io: private static void LogExceptionToElmahIo(Exception exception) { if (exception == null) return; if (elmahIoClient == null) { elmahIoClient = ElmahioAPI.Create(\"API_KEY\"); } var baseException = exception?.GetBaseException(); elmahIoClient.Messages.Create(\"LOG_ID\", new CreateMessage { Data = exception?.ToDataList(), DateTime = DateTime.UtcNow, Detail = exception?.ToString(), Severity = \"Error\", Source = baseException?.Source, Title = baseException?.Message ?? \"Unhandled exception\", Type = baseException?.GetType().FullName, }); } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the log Id of the log you want to log to. Finally, implement the two event handlers that we added in the first step: private static void TaskScheduler_UnobservedTaskException( object sender, UnobservedTaskExceptionEventArgs e) { LogExceptionToElmahIo(e.Exception); e.SetObserved(); } private static void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e) { LogExceptionToElmahIo(e.ExceptionObject as Exception); }","title":"Legacy integration"},{"location":"logging-to-multiple-elmah-logs/","text":"Logging to multiple ELMAH logs Unfortunately, ELMAH (the open source project) doesn't support multiple log targets like other logging frameworks like Serilog. This makes logging to multiple logs a bit tricky but in no way impossible. Let's say that you're using ELMAH in your web application and configured it to log everything in SQL Server. If you look through your web.config file, you will have code looking like this somewhere: <elmah> <errorLog type=\"Elmah.SqlErrorLog, Elmah\" connectionStringName=\"elmah\"/> </elmah> As you probably know, this tells ELMAH to log all unhandled errors in SQL Server with the connection string \u201celmah\u201d. You cannot add more <errorLog> elements, why logging into a second log seems impossible. Meet ELMAH's Logged event, which is a great hook to log to multiple targets. Install the Elmah.Io NuGet package and add the following code to your global.asax.cs file: void ErrorLog_Logged(object sender, Elmah.ErrorLoggedEventArgs args) { var elmahIoLog = new Elmah.Io.ErrorLog(ElmahioAPI.Create(\"API_KEY\"), new Guid(\"LOG_ID\")); elmahIoLog.Log(args.Entry.Error); } In the above code, we listen for the Logged event by simply declaring a method named ErrorLog_Logged . When called, we create a new (Elmah.Io.)ErrorLog instance with an IElmahioAPI object and the log ID. Remember to replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with your log ID ( Where is my log ID? ). You may want to share the ElmahioAPI object between requests by declaring it as a private member. Next, we simply call the Log method with a new Error object. Bam! The error is logged both in SQL Server and in elmah.io. If you only want to log certain types of errors in elmah.io, but everything to your normal log, you can extend your code like this: void ErrorLog_Logged(object sender, Elmah.ErrorLoggedEventArgs args) { if (args.Entry.Error.StatusCode == 500) { var elmahIoLog = new Elmah.Io.ErrorLog(/*...*/); elmahIoLog.Log(args.Entry.Error); } } This time we only begin logging to elmah.io, if the thrown exception is of type HttpException and contains an HTTP status code of 500 . This example only logs errors with status code 500 in elmah.io and all errors in your normal error log. If you want to create this filter on all logs, you should use the ErrorLog_Filtering method instead. This method is called before ErrorLog_Logged and before actually logging the error to your normal error log.","title":"Logging to multiple logs"},{"location":"logging-to-multiple-elmah-logs/#logging-to-multiple-elmah-logs","text":"Unfortunately, ELMAH (the open source project) doesn't support multiple log targets like other logging frameworks like Serilog. This makes logging to multiple logs a bit tricky but in no way impossible. Let's say that you're using ELMAH in your web application and configured it to log everything in SQL Server. If you look through your web.config file, you will have code looking like this somewhere: <elmah> <errorLog type=\"Elmah.SqlErrorLog, Elmah\" connectionStringName=\"elmah\"/> </elmah> As you probably know, this tells ELMAH to log all unhandled errors in SQL Server with the connection string \u201celmah\u201d. You cannot add more <errorLog> elements, why logging into a second log seems impossible. Meet ELMAH's Logged event, which is a great hook to log to multiple targets. Install the Elmah.Io NuGet package and add the following code to your global.asax.cs file: void ErrorLog_Logged(object sender, Elmah.ErrorLoggedEventArgs args) { var elmahIoLog = new Elmah.Io.ErrorLog(ElmahioAPI.Create(\"API_KEY\"), new Guid(\"LOG_ID\")); elmahIoLog.Log(args.Entry.Error); } In the above code, we listen for the Logged event by simply declaring a method named ErrorLog_Logged . When called, we create a new (Elmah.Io.)ErrorLog instance with an IElmahioAPI object and the log ID. Remember to replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with your log ID ( Where is my log ID? ). You may want to share the ElmahioAPI object between requests by declaring it as a private member. Next, we simply call the Log method with a new Error object. Bam! The error is logged both in SQL Server and in elmah.io. If you only want to log certain types of errors in elmah.io, but everything to your normal log, you can extend your code like this: void ErrorLog_Logged(object sender, Elmah.ErrorLoggedEventArgs args) { if (args.Entry.Error.StatusCode == 500) { var elmahIoLog = new Elmah.Io.ErrorLog(/*...*/); elmahIoLog.Log(args.Entry.Error); } } This time we only begin logging to elmah.io, if the thrown exception is of type HttpException and contains an HTTP status code of 500 . This example only logs errors with status code 500 in elmah.io and all errors in your normal error log. If you want to create this filter on all logs, you should use the ErrorLog_Filtering method instead. This method is called before ErrorLog_Logged and before actually logging the error to your normal error log.","title":"Logging to multiple ELMAH logs"},{"location":"managing-environments/","text":"Managing Environments Environments is a grouping feature on elmah.io that will help you group similar logs. By default you will have four environments in your organization: Development, Test, Staging, and Production. While this is the default view, additional environments can be added or environments named differently. The names don't need to match environments if you prefer a different naming scheme. Other ways to use environments would be to group logs by customers, departments, or servers. When creating a new log from the elmah.io Dashboard, you can pick an environment in the dropdown: Once logs are added to environments, they are nicely grouped in the left menu and on the list of log boxes on the dashboard: Logs can be ordered using the drag-and-drop button at the top but only inside the same environment. If you need to move a log to another environment, click Edit (the pencil icon on the log box) and select the new environment from the dropdown. If you want to show logs within one or more specific environments on the dashboard, you can use the Environments dropdown: The list of environments can be managed from your organization settings page. To open organization settings, click the gears icon next to your organization name on either the left menu or through the dashboard: On the organization settings page, select the Environments tab: The order of environments can be changed using drag and drop. New environments can be created and existing ones deleted.","title":"Managing Environments"},{"location":"managing-environments/#managing-environments","text":"Environments is a grouping feature on elmah.io that will help you group similar logs. By default you will have four environments in your organization: Development, Test, Staging, and Production. While this is the default view, additional environments can be added or environments named differently. The names don't need to match environments if you prefer a different naming scheme. Other ways to use environments would be to group logs by customers, departments, or servers. When creating a new log from the elmah.io Dashboard, you can pick an environment in the dropdown: Once logs are added to environments, they are nicely grouped in the left menu and on the list of log boxes on the dashboard: Logs can be ordered using the drag-and-drop button at the top but only inside the same environment. If you need to move a log to another environment, click Edit (the pencil icon on the log box) and select the new environment from the dropdown. If you want to show logs within one or more specific environments on the dashboard, you can use the Environments dropdown: The list of environments can be managed from your organization settings page. To open organization settings, click the gears icon next to your organization name on either the left menu or through the dashboard: On the organization settings page, select the Environments tab: The order of environments can be changed using drag and drop. New environments can be created and existing ones deleted.","title":"Managing Environments"},{"location":"managing-organisations-and-users/","text":"Managing Organizations and Users Managing Organizations and Users Adding existing users to an organization Email validation Invite new users to an organization Control security Chances are that you are not the only one needing to access your logs. Luckily, elmah.io offers great features to manage the users in your organization and to specify who should be allowed access to what. This guide is also available as a short video tutorial here: To manage access, you will need to know about the concepts of users and organizations . A user represents a person wanting to access one or more logs. Each user logs in using a username/password or a social provider of choice. A user can be added to one or more organizations. Each user has an access level within the organization as well as an access level on each log. The access level on the organization and the logs doesn't need to be the same. An organization is a collection of users and their roles inside the organization. You will typically only need a single organization, representing all of the users in your company needing to access one or more logs on elmah.io. Your elmah.io subscription is attached to your organization and everyone with administrator access to the organization will be able to manage the subscription. Adding existing users to an organization To assign users to a log, you will need to add them to the organization first. When hovering the organization name in either the left menu or on the dashboard, you will see a small gear icon. When clicking the icon, you will be taken to the organization settings page: At first, the user creating the organization will be the only one on the list. To add a new user to the list, click the Add user button and input the user's email or name in the textbox. The dropdown will show a list of users on elmah.io matching your query. Note Each user needs to sign up on elmah.io before being visible through Add user . Jump to Invite new users to an organization to learn how to invite new users. When the new user is visible in the dropdown, click the user and select an access level. The chosen access level decides what the new user is allowed to do inside the organization. Read users are only allowed to view the organization, while Administrator users are allowed to add new users and delete the entire organization and all logs beneath it. The access level set for the user in the organization will become the user's access level on all new logs inside that organization as well. When adding a user to your organization, the user will need to click Accept in an email sent to the address associated with their profile in elmah.io, before you can see their email address in the list of users. To change the access level on an added user, click one of the grouped buttons to the right of the user's name. Changing a user's access level on the organization won't change the user's access level on each log. To delete a user from the organization, click the red delete button to the far right. When a user is added to an organization, the user will automatically have access to all new logs created in that organization. For security reasons, a new user added to the organization, will not have access to existing logs in the organization. To assign the new user to existing logs, assign an access level on each log by clicking the settings button to the right of the user: Note Awarding a user Administrator on a log doesn't give them Administrator rights to the organization. To assign a user to all logs, click the None , Read , Write , or Administrator buttons in the table header above the list of logs. Likewise, organization administrators can assign users to different emails for each log in the organization: This view is similar to the one the user has on the profile when signing into elmah.io. Make sure to notify users when you assign emails to them to avoid them marking emails as spam. Email validation A user must verify their email address when signing up for elmah.io. If the user joins through an invite, the email address will be automatically verified. Email verification hasn't always been required on elmah.io, which means you may have users in your organization who haven't verified their email yet. Unverified emails are marked in the Users list, where you can click Resend verification email to send a new verification email to the user's registered address. Invite new users to an organization If someone not already created as a user on elmah.io needs access to your organization, you can use the Invite feature. Inviting users will send them an email telling them to sign up for elmah.io and automatically add them to your organization. To invite a user click the Invite user button and input the new user's email. Select an organization access level and click the green Invite user button. This will add the new user to the organization and display it as \"Invited\" until the user signs up. Control security You may have requirements of using two-factor authentication or against using social sign-ins in your company. These requirements can be configured on elmah.io as well. Click the Security button above the user's list to set it up: Using this view you can allow or disallow sign-ins using: An elmah.io username and password Twitter Facebook Microsoft Google Notice that disallowing different sign-in types will still allow users in your organization to sign into elmah.io. As soon as a disallowed user type is trying to access pages inside the organization and/or logs a page telling them which sign-in type or required settings is shown.","title":"Managing Organisations and Users"},{"location":"managing-organisations-and-users/#managing-organizations-and-users","text":"Managing Organizations and Users Adding existing users to an organization Email validation Invite new users to an organization Control security Chances are that you are not the only one needing to access your logs. Luckily, elmah.io offers great features to manage the users in your organization and to specify who should be allowed access to what. This guide is also available as a short video tutorial here: To manage access, you will need to know about the concepts of users and organizations . A user represents a person wanting to access one or more logs. Each user logs in using a username/password or a social provider of choice. A user can be added to one or more organizations. Each user has an access level within the organization as well as an access level on each log. The access level on the organization and the logs doesn't need to be the same. An organization is a collection of users and their roles inside the organization. You will typically only need a single organization, representing all of the users in your company needing to access one or more logs on elmah.io. Your elmah.io subscription is attached to your organization and everyone with administrator access to the organization will be able to manage the subscription.","title":"Managing Organizations and Users"},{"location":"managing-organisations-and-users/#adding-existing-users-to-an-organization","text":"To assign users to a log, you will need to add them to the organization first. When hovering the organization name in either the left menu or on the dashboard, you will see a small gear icon. When clicking the icon, you will be taken to the organization settings page: At first, the user creating the organization will be the only one on the list. To add a new user to the list, click the Add user button and input the user's email or name in the textbox. The dropdown will show a list of users on elmah.io matching your query. Note Each user needs to sign up on elmah.io before being visible through Add user . Jump to Invite new users to an organization to learn how to invite new users. When the new user is visible in the dropdown, click the user and select an access level. The chosen access level decides what the new user is allowed to do inside the organization. Read users are only allowed to view the organization, while Administrator users are allowed to add new users and delete the entire organization and all logs beneath it. The access level set for the user in the organization will become the user's access level on all new logs inside that organization as well. When adding a user to your organization, the user will need to click Accept in an email sent to the address associated with their profile in elmah.io, before you can see their email address in the list of users. To change the access level on an added user, click one of the grouped buttons to the right of the user's name. Changing a user's access level on the organization won't change the user's access level on each log. To delete a user from the organization, click the red delete button to the far right. When a user is added to an organization, the user will automatically have access to all new logs created in that organization. For security reasons, a new user added to the organization, will not have access to existing logs in the organization. To assign the new user to existing logs, assign an access level on each log by clicking the settings button to the right of the user: Note Awarding a user Administrator on a log doesn't give them Administrator rights to the organization. To assign a user to all logs, click the None , Read , Write , or Administrator buttons in the table header above the list of logs. Likewise, organization administrators can assign users to different emails for each log in the organization: This view is similar to the one the user has on the profile when signing into elmah.io. Make sure to notify users when you assign emails to them to avoid them marking emails as spam.","title":"Adding existing users to an organization"},{"location":"managing-organisations-and-users/#email-validation","text":"A user must verify their email address when signing up for elmah.io. If the user joins through an invite, the email address will be automatically verified. Email verification hasn't always been required on elmah.io, which means you may have users in your organization who haven't verified their email yet. Unverified emails are marked in the Users list, where you can click Resend verification email to send a new verification email to the user's registered address.","title":"Email validation"},{"location":"managing-organisations-and-users/#invite-new-users-to-an-organization","text":"If someone not already created as a user on elmah.io needs access to your organization, you can use the Invite feature. Inviting users will send them an email telling them to sign up for elmah.io and automatically add them to your organization. To invite a user click the Invite user button and input the new user's email. Select an organization access level and click the green Invite user button. This will add the new user to the organization and display it as \"Invited\" until the user signs up.","title":"Invite new users to an organization"},{"location":"managing-organisations-and-users/#control-security","text":"You may have requirements of using two-factor authentication or against using social sign-ins in your company. These requirements can be configured on elmah.io as well. Click the Security button above the user's list to set it up: Using this view you can allow or disallow sign-ins using: An elmah.io username and password Twitter Facebook Microsoft Google Notice that disallowing different sign-in types will still allow users in your organization to sign into elmah.io. As soon as a disallowed user type is trying to access pages inside the organization and/or logs a page telling them which sign-in type or required settings is shown.","title":"Control security"},{"location":"missing-server-side-information-on-uptime-errors/","text":"Missing server-side information on uptime errors To decorate uptime errors with server-side error information, you will need a few things: The monitored website should be configured to log errors to elmah.io. The uptime check needs to be created on the same log as the monitored website. When installed in a previous version, errors generated by Uptime Monitoring are ignored by the BotBuster app (since Uptime Monitoring is also a bot). Uninstall the BotBuster app and enable the Filter Crawlers filter instead.","title":"Missing server-side information on uptime errors"},{"location":"missing-server-side-information-on-uptime-errors/#missing-server-side-information-on-uptime-errors","text":"To decorate uptime errors with server-side error information, you will need a few things: The monitored website should be configured to log errors to elmah.io. The uptime check needs to be created on the same log as the monitored website. When installed in a previous version, errors generated by Uptime Monitoring are ignored by the BotBuster app (since Uptime Monitoring is also a bot). Uninstall the BotBuster app and enable the Filter Crawlers filter instead.","title":"Missing server-side information on uptime errors"},{"location":"plans-and-pricing/","text":"Plans and Pricing elmah.io offers five subscription plans designed for different team sizes and workloads. All plans include secure error logging, daily backups, and developer-focused support. You can switch between monthly and annual billing. Annual billing provides a 10% discount. The available plans are: Startup Plan Price: $17/month (annual) or $19/month (monthly) Features: - 1 user - One person can access the logs on elmah.io. - Unlimited applications - Log data from as many applications as needed. - 1,000 messages per month - Logged error or information messages. - 40 emails per month - Notifications for new errors (daily digests excluded). - 7 days retention - Messages are automatically deleted after 7 days. - SSL encryption - 256-bit encrypted connections for secure message transfer. - Visual Studio Integration - Browse and manage logs directly from Visual Studio. - Daily Backup - Automatic backups in a separate geographic region. - Developer Support - Direct chat support from developers. - Invoices - Downloadable and emailed invoices for card payments. Small Business Plan Price: $26/month (annual) or $29/month (monthly) Includes everything in Startup, plus: - 3 users. - 10,000 messages per month. - 400 emails per month. - 30 days retention. - Business Rules - Create rules to ignore specific errors, send alerts, or call APIs. Business Plan Price: $44/month (annual) or $49/month (monthly) Includes everything in Small Business, plus: - 20 users. - 50,000 messages per month. - 2,000 emails per month. - Goodie Bag - Discounts on developer tools like MyGet, Entity Framework Profiler, and NDepend. - Uptime Checks (5) - Monitor endpoints from 5 global locations every 5 minutes. - App Store - Integrations with Slack, GitHub, and over 2,000 services via Zapier. - Deployment Tracking - Track releases and analyze error frequency per deployment. Business+ Plan Price: $89/month (annual) or $99/month (monthly) Includes everything in Business, plus: - Unlimited users and applications. - 250,000 messages per month. - 10,000 emails per month. - 90 days retention. - Uptime Checks (15). - Heartbeats (5) - Detect when background services or scheduled tasks stop reporting. Enterprise Plan Price: $269/month (annual) or $299/month (monthly) Includes everything in Business+, plus: - 1,000,000 messages per month. - 40,000 emails per month. - Uptime Checks (50). - Heartbeats (20). - AI & Machine Learning - Detect anomalies and bots automatically. Integrated ChatGPT assistant for error analysis. - Custom Documents - Option to have security questionnaires or audit documents completed. If you need more messages, custom plans are available as well. Reach out to support to hear more.","title":"Plans and Pricing"},{"location":"plans-and-pricing/#plans-and-pricing","text":"elmah.io offers five subscription plans designed for different team sizes and workloads. All plans include secure error logging, daily backups, and developer-focused support. You can switch between monthly and annual billing. Annual billing provides a 10% discount. The available plans are: Startup Plan Price: $17/month (annual) or $19/month (monthly) Features: - 1 user - One person can access the logs on elmah.io. - Unlimited applications - Log data from as many applications as needed. - 1,000 messages per month - Logged error or information messages. - 40 emails per month - Notifications for new errors (daily digests excluded). - 7 days retention - Messages are automatically deleted after 7 days. - SSL encryption - 256-bit encrypted connections for secure message transfer. - Visual Studio Integration - Browse and manage logs directly from Visual Studio. - Daily Backup - Automatic backups in a separate geographic region. - Developer Support - Direct chat support from developers. - Invoices - Downloadable and emailed invoices for card payments. Small Business Plan Price: $26/month (annual) or $29/month (monthly) Includes everything in Startup, plus: - 3 users. - 10,000 messages per month. - 400 emails per month. - 30 days retention. - Business Rules - Create rules to ignore specific errors, send alerts, or call APIs. Business Plan Price: $44/month (annual) or $49/month (monthly) Includes everything in Small Business, plus: - 20 users. - 50,000 messages per month. - 2,000 emails per month. - Goodie Bag - Discounts on developer tools like MyGet, Entity Framework Profiler, and NDepend. - Uptime Checks (5) - Monitor endpoints from 5 global locations every 5 minutes. - App Store - Integrations with Slack, GitHub, and over 2,000 services via Zapier. - Deployment Tracking - Track releases and analyze error frequency per deployment. Business+ Plan Price: $89/month (annual) or $99/month (monthly) Includes everything in Business, plus: - Unlimited users and applications. - 250,000 messages per month. - 10,000 emails per month. - 90 days retention. - Uptime Checks (15). - Heartbeats (5) - Detect when background services or scheduled tasks stop reporting. Enterprise Plan Price: $269/month (annual) or $299/month (monthly) Includes everything in Business+, plus: - 1,000,000 messages per month. - 40,000 emails per month. - Uptime Checks (50). - Heartbeats (20). - AI & Machine Learning - Detect anomalies and bots automatically. Integrated ChatGPT assistant for error analysis. - Custom Documents - Option to have security questionnaires or audit documents completed. If you need more messages, custom plans are available as well. Reach out to support to hear more.","title":"Plans and Pricing"},{"location":"query-messages-using-full-text-search/","text":"Query messages using full-text search All messages sent to elmah.io, are indexed in Elasticsearch. Storing messages in a database like Elasticsearch opens up a world of possibilities. This article explains how to query your log messages using full-text search, Search Filters, and Lucene Query Syntax. Query messages using full-text search Full-text search Search Filters Lucene Query Syntax Field specification Full-text search The easiest approach to start searching your log messages is by inputting search terms in the Search field on elmah.io: We don't want to get into too much detail on how full-text works in Elasticsearch. In short, Elasticsearch breaks the query into the terms nominavi and voluptatibus and tries to match all log messages including those terms. Full-text search work on analyzed fields in Elasticsearch, which means that wildcards and other constructs are fully supported. Full-text queries work great. when you want to do a quick search for some keywords like part of an exception message or stack trace. Remember that the entire log message is search, why a search for 500 would hit both log messages with status code 500 and the term 500 in the stack trace. Search Filters Search filters are built exclusively for elmah.io. They are built on top of Lucene Query Syntax (which we'll discuss in a minute), but much easier to write. Search filters are available through either the Add filter button below the search field or using various links and icons on the elmah.io UI. Let's say we want to find all errors with a status code of 500: Adding the two filters is possible using a few clicks. As mentioned previously, search filters are available throughout the UI too. In this example, a filter is used to find messages not matching a specified URL: Search filters can be used in combination with full-text queries for greater flexibility. Lucene Query Syntax Elasticsearch is implemented on top of Lucene; a high-performance search engine, written entirely in Java. While Elasticsearch supports a lot of nice abstractions on top of Lucene, sometimes you just want close to the metal. This is when we need to introduce you to Lucene Query Syntax. The query syntax is a query language similar to the WHERE part of a SQL statement. Unlike SQL, the query syntax supports both filters (similar to SQL) and full-text queries. All Lucene queries are made up of strings containing full-text search strings and/or terms combined with operators. A simple full-text query simply looks like this: values to search for This will search log messages for 'values', 'to', 'search', and 'for'. For exact searches you can use quotes: \"values to search for\" This will only find log messages where that exact string is present somewhere. Queries can also search inside specific fields: field:value This is similar to the WHERE part in SQL and will, in this example, search for the term 'value' inside the field named 'field'. Both full-text queries and field-based queries can be combined with other queries using AND , OR , and NOT : field1:value1 AND field2:value2 AND NOT field3:value3 You can use operators known from C# if you prefer that syntax: field1:value1 && field2:value2 && !field3:value3 Full-text and field-based queries can be combined into complex queries: field1:value1 && field2:\"exact value\" || (field1:value2 && \"a full text query\") Examples are worth a thousand words, why the rest of this document is examples of frequently used queries. If you think that examples are missing or have a problem with custom queries, let us know. We will extend this tutorial with the examples you need. Find messages with type type:\"System.Web.HttpException\" Find messages with status codes statusCode:[500 TO 599] Find messages with URL and method url:\"/tester/\" AND method:get Find messages with URL starting with url:\\/.well-known* The forward slash, in the beginning, needs to be escaped, since Lucene will understand it as the start of a regex otherwise. Find messages by IP remoteAddr:192.168.0.1 Find messages by IP's remoteAddr:192.68.0.* The examples above can be achieved using Search Filters as well. We recommend using Search Filters where possible and falling back to Lucene Query Syntax when something isn't supported through filters. An example is using OR which currently isn't possible using filters. Field specification As already illustrated through multiple examples in this document, all log messages consist of a range of fields. Here's a full overview of all fields, data types, etc. The .raw column requires a bit of explanation if you are not familiar with Elasticsearch. Fields that are marked as having .raw are indexed for full-text queries. This means that the values are tokenized and optimized for full-text search and not querying by exact values. In this case, a special raw field is created for supporting SQL like WHERE queries. To illustrate, searching for a part of a user agent would look like this: userAgent:chrome And searching for a specific user agent would look like this: userAgent.raw:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1944.0 Safari/537.36\" Here is the full set of fields: Name Type .raw Description applicationName string \u2705 Used to identify which application logged this message. You can use this if you have multiple applications and services logging into the same log. assignedTo string The id of the user assigned to the log message. elmah.io user IDs are not something that is published on the UI anywhere why this field is intended for the My errors dashboard only. browser string \u2705 A short string classifying each log message to a browser. The value can be one of the following: chrome, safari, edge, firefox, opera, ie, other. category string \u2705 The log message category. Category can be a string of choice but typically contain a logging category set by a logging framework like NLog or Serilog. When logging through a logging framework, this field will be provided by the framework and not something that needs to be set manually. correlationId string CorrelationId can be used to group similar log messages into a single discoverable batch. A correlation ID could be a session ID from ASP.NET Core, a unique string spanning multiple microservices handling the same request, or similar. country string An ISO 3166 two-letter country code in case we could resolve a country from the log message. detail string A longer description of the message. For errors, this could be a stack trace, but it's really up to you what to log in there. domain string The domain name if it could be resolved from the server variables. hash string A unique hash for a log message. The hash is used for multiple things on elmah.io like the new detection. hidden boolean A boolean indicating if a log message has been hidden through the UI, the API, or a hide rule. hostName string \u2705 The hostname of the server logging the message. isBot boolean A boolean indicating is a log message is generated by an automated bot or crawler. This flag is set manually through the UI. isBotSuggestion boolean A boolean indicating if the log message looks to be generated by an automated bot or crawler. Unlike the isBot field, this field is automatically set using machine learning and is available on the Enterprise plan only. isBurst boolean A boolean indicating if the log message is a burst. Log messages are automatically marked as burst if we have seen it more than 50 times during the retention period of the purchased plan. isFixed boolean A boolean indicating if the log message has been marked as fixed. Log messages can be marked as fixed from the UI. isHeartbeat boolean A boolean indicating if the log message is logged from the elmah.io Heartbeats feature. isNew boolean A boolean indicating if we have seen this unique log message before. isSpike boolean A boolean indicating if the log message is logged from the elmah.io Spike feature. isUptime boolean A boolean indicating if the log message is logged from the elmah.io Uptime Monitoring feature. message string \u2705 The textual title or headline of the message to log. messageTemplate string The title template of the message to log. This property can be used from logging frameworks that support structured logging like: \"{user} says {quote}\". In the example, titleTemplate will be this string and the title will be \"Gilfoyle says It's not magic. It's talent and sweat\". method string \u2705 If the log message relates to an HTTP request, you may send the HTTP method of that request. If you don't provide us with a method, we will try to find a key named REQUEST_METHOD in serverVariables. os string \u2705 A short string classifying each log message to an operating system. The value can be one of the following: ios, windows, android, macos, linux, other. remoteAddr string \u2705 The IP address of the user generating this log message if it can be resolved from server variables. severity string An enum value representing the severity of this message. The following values are allowed: Verbose, Debug, Information, Warning, Error, Fatal. source string \u2705 The source of the code logging the message. This could be the assembly name. statusCode number If the message logged relates to an HTTP status code, you can put the code in this property. This would probably only be relevant for errors but could be used for logging successful status codes as well. time date The date and time in UTC of the message. If you don't provide us with a value, this will be set the current date and time in UTC. type string \u2705 The type of message. If logging an error, the type of the exception would go into type but you can put anything in there, that makes sense for your domain. url string If the log message relates to an HTTP request, you may send the URL of that request. If you don't provide us with an URL, we will try to find a key named URL in serverVariables. user string \u2705 An identification of the user triggering this message. You can put the user's email address or your user key into this property. userAgent string \u2705 The user agent of the user causing the log message if it can be resolved from server variables. version string \u2705 Versions can be used to distinguish messages from different versions of your software. The value of the version can be a SemVer compliant string or any other syntax that you are using as your version numbering scheme.","title":"Query messages using full-text search"},{"location":"query-messages-using-full-text-search/#query-messages-using-full-text-search","text":"All messages sent to elmah.io, are indexed in Elasticsearch. Storing messages in a database like Elasticsearch opens up a world of possibilities. This article explains how to query your log messages using full-text search, Search Filters, and Lucene Query Syntax. Query messages using full-text search Full-text search Search Filters Lucene Query Syntax Field specification","title":"Query messages using full-text search"},{"location":"query-messages-using-full-text-search/#full-text-search","text":"The easiest approach to start searching your log messages is by inputting search terms in the Search field on elmah.io: We don't want to get into too much detail on how full-text works in Elasticsearch. In short, Elasticsearch breaks the query into the terms nominavi and voluptatibus and tries to match all log messages including those terms. Full-text search work on analyzed fields in Elasticsearch, which means that wildcards and other constructs are fully supported. Full-text queries work great. when you want to do a quick search for some keywords like part of an exception message or stack trace. Remember that the entire log message is search, why a search for 500 would hit both log messages with status code 500 and the term 500 in the stack trace.","title":"Full-text search"},{"location":"query-messages-using-full-text-search/#search-filters","text":"Search filters are built exclusively for elmah.io. They are built on top of Lucene Query Syntax (which we'll discuss in a minute), but much easier to write. Search filters are available through either the Add filter button below the search field or using various links and icons on the elmah.io UI. Let's say we want to find all errors with a status code of 500: Adding the two filters is possible using a few clicks. As mentioned previously, search filters are available throughout the UI too. In this example, a filter is used to find messages not matching a specified URL: Search filters can be used in combination with full-text queries for greater flexibility.","title":"Search Filters"},{"location":"query-messages-using-full-text-search/#lucene-query-syntax","text":"Elasticsearch is implemented on top of Lucene; a high-performance search engine, written entirely in Java. While Elasticsearch supports a lot of nice abstractions on top of Lucene, sometimes you just want close to the metal. This is when we need to introduce you to Lucene Query Syntax. The query syntax is a query language similar to the WHERE part of a SQL statement. Unlike SQL, the query syntax supports both filters (similar to SQL) and full-text queries. All Lucene queries are made up of strings containing full-text search strings and/or terms combined with operators. A simple full-text query simply looks like this: values to search for This will search log messages for 'values', 'to', 'search', and 'for'. For exact searches you can use quotes: \"values to search for\" This will only find log messages where that exact string is present somewhere. Queries can also search inside specific fields: field:value This is similar to the WHERE part in SQL and will, in this example, search for the term 'value' inside the field named 'field'. Both full-text queries and field-based queries can be combined with other queries using AND , OR , and NOT : field1:value1 AND field2:value2 AND NOT field3:value3 You can use operators known from C# if you prefer that syntax: field1:value1 && field2:value2 && !field3:value3 Full-text and field-based queries can be combined into complex queries: field1:value1 && field2:\"exact value\" || (field1:value2 && \"a full text query\") Examples are worth a thousand words, why the rest of this document is examples of frequently used queries. If you think that examples are missing or have a problem with custom queries, let us know. We will extend this tutorial with the examples you need. Find messages with type type:\"System.Web.HttpException\" Find messages with status codes statusCode:[500 TO 599] Find messages with URL and method url:\"/tester/\" AND method:get Find messages with URL starting with url:\\/.well-known* The forward slash, in the beginning, needs to be escaped, since Lucene will understand it as the start of a regex otherwise. Find messages by IP remoteAddr:192.168.0.1 Find messages by IP's remoteAddr:192.68.0.* The examples above can be achieved using Search Filters as well. We recommend using Search Filters where possible and falling back to Lucene Query Syntax when something isn't supported through filters. An example is using OR which currently isn't possible using filters.","title":"Lucene Query Syntax"},{"location":"query-messages-using-full-text-search/#field-specification","text":"As already illustrated through multiple examples in this document, all log messages consist of a range of fields. Here's a full overview of all fields, data types, etc. The .raw column requires a bit of explanation if you are not familiar with Elasticsearch. Fields that are marked as having .raw are indexed for full-text queries. This means that the values are tokenized and optimized for full-text search and not querying by exact values. In this case, a special raw field is created for supporting SQL like WHERE queries. To illustrate, searching for a part of a user agent would look like this: userAgent:chrome And searching for a specific user agent would look like this: userAgent.raw:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1944.0 Safari/537.36\" Here is the full set of fields: Name Type .raw Description applicationName string \u2705 Used to identify which application logged this message. You can use this if you have multiple applications and services logging into the same log. assignedTo string The id of the user assigned to the log message. elmah.io user IDs are not something that is published on the UI anywhere why this field is intended for the My errors dashboard only. browser string \u2705 A short string classifying each log message to a browser. The value can be one of the following: chrome, safari, edge, firefox, opera, ie, other. category string \u2705 The log message category. Category can be a string of choice but typically contain a logging category set by a logging framework like NLog or Serilog. When logging through a logging framework, this field will be provided by the framework and not something that needs to be set manually. correlationId string CorrelationId can be used to group similar log messages into a single discoverable batch. A correlation ID could be a session ID from ASP.NET Core, a unique string spanning multiple microservices handling the same request, or similar. country string An ISO 3166 two-letter country code in case we could resolve a country from the log message. detail string A longer description of the message. For errors, this could be a stack trace, but it's really up to you what to log in there. domain string The domain name if it could be resolved from the server variables. hash string A unique hash for a log message. The hash is used for multiple things on elmah.io like the new detection. hidden boolean A boolean indicating if a log message has been hidden through the UI, the API, or a hide rule. hostName string \u2705 The hostname of the server logging the message. isBot boolean A boolean indicating is a log message is generated by an automated bot or crawler. This flag is set manually through the UI. isBotSuggestion boolean A boolean indicating if the log message looks to be generated by an automated bot or crawler. Unlike the isBot field, this field is automatically set using machine learning and is available on the Enterprise plan only. isBurst boolean A boolean indicating if the log message is a burst. Log messages are automatically marked as burst if we have seen it more than 50 times during the retention period of the purchased plan. isFixed boolean A boolean indicating if the log message has been marked as fixed. Log messages can be marked as fixed from the UI. isHeartbeat boolean A boolean indicating if the log message is logged from the elmah.io Heartbeats feature. isNew boolean A boolean indicating if we have seen this unique log message before. isSpike boolean A boolean indicating if the log message is logged from the elmah.io Spike feature. isUptime boolean A boolean indicating if the log message is logged from the elmah.io Uptime Monitoring feature. message string \u2705 The textual title or headline of the message to log. messageTemplate string The title template of the message to log. This property can be used from logging frameworks that support structured logging like: \"{user} says {quote}\". In the example, titleTemplate will be this string and the title will be \"Gilfoyle says It's not magic. It's talent and sweat\". method string \u2705 If the log message relates to an HTTP request, you may send the HTTP method of that request. If you don't provide us with a method, we will try to find a key named REQUEST_METHOD in serverVariables. os string \u2705 A short string classifying each log message to an operating system. The value can be one of the following: ios, windows, android, macos, linux, other. remoteAddr string \u2705 The IP address of the user generating this log message if it can be resolved from server variables. severity string An enum value representing the severity of this message. The following values are allowed: Verbose, Debug, Information, Warning, Error, Fatal. source string \u2705 The source of the code logging the message. This could be the assembly name. statusCode number If the message logged relates to an HTTP status code, you can put the code in this property. This would probably only be relevant for errors but could be used for logging successful status codes as well. time date The date and time in UTC of the message. If you don't provide us with a value, this will be set the current date and time in UTC. type string \u2705 The type of message. If logging an error, the type of the exception would go into type but you can put anything in there, that makes sense for your domain. url string If the log message relates to an HTTP request, you may send the URL of that request. If you don't provide us with an URL, we will try to find a key named URL in serverVariables. user string \u2705 An identification of the user triggering this message. You can put the user's email address or your user key into this property. userAgent string \u2705 The user agent of the user causing the log message if it can be resolved from server variables. version string \u2705 Versions can be used to distinguish messages from different versions of your software. The value of the version can be a SemVer compliant string or any other syntax that you are using as your version numbering scheme.","title":"Field specification"},{"location":"remove-sensitive-form-data/","text":"Remove sensitive form data You may have something like usernames and passwords in form posts on your website. Since elmah.io automatically logs the content of a failing form POST, sensitive data potentially ends up in your log. No one else but you and your company should get to look inside your log, but remember that everyone connected to the Internet, is a potential hacking victim. In this example, we hide the value of a form value named SomeSecretFormField . Add the following code in the Application_Start method in the global.asax.cs file: Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client var logger = Elmah.Io.ErrorLog.Client; logger.OnMessage += (sender, args) => { var form = args.Message.Form.FirstOrDefault(f => f.Key == \"SomeSecretFormField\"); if (form != null) { form.Value = \"***hidden***\"; } };","title":"Remove sensitive form data"},{"location":"remove-sensitive-form-data/#remove-sensitive-form-data","text":"You may have something like usernames and passwords in form posts on your website. Since elmah.io automatically logs the content of a failing form POST, sensitive data potentially ends up in your log. No one else but you and your company should get to look inside your log, but remember that everyone connected to the Internet, is a potential hacking victim. In this example, we hide the value of a form value named SomeSecretFormField . Add the following code in the Application_Start method in the global.asax.cs file: Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client var logger = Elmah.Io.ErrorLog.Client; logger.OnMessage += (sender, args) => { var form = args.Message.Form.FirstOrDefault(f => f.Key == \"SomeSecretFormField\"); if (form != null) { form.Value = \"***hidden***\"; } };","title":"Remove sensitive form data"},{"location":"roslyn-analyzers-for-elmah-io-and-aspnet-core/","text":"Roslyn analyzers for elmah.io and ASP.NET Core Roslyn analyzers for elmah.io and ASP.NET Core Installation and usage EIO1000 ConfigureServices must call AddElmahIo EIO1001 Configure must call UseElmahIo EIO1002 UseElmahIo must be called before/after Use* Warning The Roslyn analyzers for elmah.io and ASP.NET Core has reached end of life. The analyzers are no longer updated and won't work for top-level statements or when configuring Elmah.Io.AspNetCore in the Program.cs file. To validate the installation we recommend running the diagnose command as explained here: Diagnose potential problems with an elmah.io installation . To help to install elmah.io in ASP.NET Core (by using the Elmah.Io.AspNetCore NuGet package) we have developed a range of Roslyn analyzers. Analyzers run inside Visual Studio and make it possible to validate your Startup.cs file during development. Installation and usage The analyzers can be installed in two ways. As a NuGet package or a Visual Studio extension. To install it from NuGet: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.AspNetCore.Analyzers Install-Package Elmah.Io.AspNetCore.Analyzers <PackageReference Include=\"Elmah.Io.AspNetCore.Analyzers\" Version=\"0.*\" /> paket add Elmah.Io.AspNetCore.Analyzers The package is installed as a private asset, which means that it is not distributed as part of your build. You can keep the package installed after you have used it to inspect any warnings generated or uninstall it. To install it as a Visual Studio extension, navigate to Extensions | Manage extensions | Online and search for Elmah.Io.AspNetCore.Analyzers . Then click the Download button and restart Visual Studio. As an alternative, you can download the extension directly from the Visual Studio Marketplace. Once installed, analyzers will help you add or move elmah.io-related setup code: All issues are listed as warnings in the Error list as well. The following is an explanation of possible warnings. EIO1000 ConfigureServices must call AddElmahIo AddElmahIo needs to be added as part of the ConfigureServices method: public void ConfigureServices(IServiceCollection services) { services.AddElmahIo(/*...*/); //\ud83d\udc48 } EIO1001 Configure must call UseElmahIo UseElmahIo needs to be added as part of the Configure method: public void Configure(IApplicationBuilder app, IHostingEnvironment env) { app.UseElmahIo(); //\ud83d\udc48 } EIO1002 UseElmahIo must be called before/after Use* UseElmahIo needs to be called after any calls to UseDeveloperExceptionPage , UseExceptionHandler , UseAuthorization , and UseAuthentication but before any calls to UseEndpoints and UseMvc : public void Configure(IApplicationBuilder app, IHostingEnvironment env) { if (env.IsDevelopment()) { app.UseDeveloperExceptionPage(); } else { app.UseExceptionHandler(/*...*/); } app.UseAuthentication(); app.UseAuthorization(); app.UseElmahIo(); //\ud83d\udc48 app.UseEndpoints(); app.UseMvc(/*...*/); }","title":"Roslyn analyzers for elmah.io and ASP.NET Core"},{"location":"roslyn-analyzers-for-elmah-io-and-aspnet-core/#roslyn-analyzers-for-elmahio-and-aspnet-core","text":"Roslyn analyzers for elmah.io and ASP.NET Core Installation and usage EIO1000 ConfigureServices must call AddElmahIo EIO1001 Configure must call UseElmahIo EIO1002 UseElmahIo must be called before/after Use* Warning The Roslyn analyzers for elmah.io and ASP.NET Core has reached end of life. The analyzers are no longer updated and won't work for top-level statements or when configuring Elmah.Io.AspNetCore in the Program.cs file. To validate the installation we recommend running the diagnose command as explained here: Diagnose potential problems with an elmah.io installation . To help to install elmah.io in ASP.NET Core (by using the Elmah.Io.AspNetCore NuGet package) we have developed a range of Roslyn analyzers. Analyzers run inside Visual Studio and make it possible to validate your Startup.cs file during development.","title":"Roslyn analyzers for elmah.io and ASP.NET Core"},{"location":"roslyn-analyzers-for-elmah-io-and-aspnet-core/#installation-and-usage","text":"The analyzers can be installed in two ways. As a NuGet package or a Visual Studio extension. To install it from NuGet: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.AspNetCore.Analyzers Install-Package Elmah.Io.AspNetCore.Analyzers <PackageReference Include=\"Elmah.Io.AspNetCore.Analyzers\" Version=\"0.*\" /> paket add Elmah.Io.AspNetCore.Analyzers The package is installed as a private asset, which means that it is not distributed as part of your build. You can keep the package installed after you have used it to inspect any warnings generated or uninstall it. To install it as a Visual Studio extension, navigate to Extensions | Manage extensions | Online and search for Elmah.Io.AspNetCore.Analyzers . Then click the Download button and restart Visual Studio. As an alternative, you can download the extension directly from the Visual Studio Marketplace. Once installed, analyzers will help you add or move elmah.io-related setup code: All issues are listed as warnings in the Error list as well. The following is an explanation of possible warnings.","title":"Installation and usage"},{"location":"roslyn-analyzers-for-elmah-io-and-aspnet-core/#eio1000-configureservices-must-call-addelmahio","text":"AddElmahIo needs to be added as part of the ConfigureServices method: public void ConfigureServices(IServiceCollection services) { services.AddElmahIo(/*...*/); //\ud83d\udc48 }","title":"EIO1000 ConfigureServices must call AddElmahIo"},{"location":"roslyn-analyzers-for-elmah-io-and-aspnet-core/#eio1001-configure-must-call-useelmahio","text":"UseElmahIo needs to be added as part of the Configure method: public void Configure(IApplicationBuilder app, IHostingEnvironment env) { app.UseElmahIo(); //\ud83d\udc48 }","title":"EIO1001 Configure must call UseElmahIo"},{"location":"roslyn-analyzers-for-elmah-io-and-aspnet-core/#eio1002-useelmahio-must-be-called-beforeafter-use","text":"UseElmahIo needs to be called after any calls to UseDeveloperExceptionPage , UseExceptionHandler , UseAuthorization , and UseAuthentication but before any calls to UseEndpoints and UseMvc : public void Configure(IApplicationBuilder app, IHostingEnvironment env) { if (env.IsDevelopment()) { app.UseDeveloperExceptionPage(); } else { app.UseExceptionHandler(/*...*/); } app.UseAuthentication(); app.UseAuthorization(); app.UseElmahIo(); //\ud83d\udc48 app.UseEndpoints(); app.UseMvc(/*...*/); }","title":"EIO1002 UseElmahIo must be called before/after Use*"},{"location":"sending-messages-from-elmah-io-to-azure-service-bus-using-sas-authentication/","text":"Sending Messages from elmah.io to Azure Service Bus using SAS Authentication elmah.io rules support Shared Access Signature (SAS) authentication, making it easy to forward log messages to Azure Service Bus queues. This guide walks you through creating a SAS token for a Service Bus queue and using it in an elmah.io rule to publish messages. Step 1: Create a Shared Access Signature (SAS) for a Queue To authenticate a request to Azure Service Bus using SAS, you need three components: The queue URI (like https://NAMESPACE.servicebus.windows.net/QUEUE_NAME) The SAS policy name (like elmahio-rule) The associated primary key for that policy You will need to generate a SAS from either C# code or PowerShell: Csharp Powershell using System; using System.Net; using System.Security.Cryptography; using System.Text; public static class SasTokenGenerator { public static string GenerateSasToken(string resourceUri, string keyName, string key, TimeSpan ttl) { var expiry = DateTimeOffset.UtcNow.Add(ttl).ToUnixTimeSeconds(); string stringToSign = WebUtility.UrlEncode(resourceUri) + \"\\n\" + expiry; var hmac = new HMACSHA256(Encoding.UTF8.GetBytes(key)); var signature = Convert.ToBase64String(hmac.ComputeHash(Encoding.UTF8.GetBytes(stringToSign))); return $\"SharedAccessSignature sr={WebUtility.UrlEncode(resourceUri)}&sig={WebUtility.UrlEncode(signature)}&se={expiry}&skn={keyName}\"; } } // Usage var token = SasTokenGenerator.GenerateSasToken( \"https://NAMESPACE.servicebus.windows.net/QUEUE_NAME\", \"elmahio-rule\", \"PRIMARY_KEY\", TimeSpan.FromDays(365) ); function New-ServiceBusSasToken { param ( [string]$ResourceUri, [string]$KeyName, [string]$Key, [int]$ExpiryInSeconds = 31536000 ) $Epoch = [Math]::Round((Get-Date -Date (Get-Date \"1970-01-01Z\")).TotalSeconds) + $ExpiryInSeconds $StringToSign = [System.Web.HttpUtility]::UrlEncode($ResourceUri) + \"`n\" + $Epoch $HMAC = New-Object System.Security.Cryptography.HMACSHA256 $HMAC.Key = [Text.Encoding]::UTF8.GetBytes($Key) $Signature = [Convert]::ToBase64String($HMAC.ComputeHash([Text.Encoding]::UTF8.GetBytes($StringToSign))) return \"SharedAccessSignature sr=$([System.Web.HttpUtility]::UrlEncode($ResourceUri))&sig=$([System.Web.HttpUtility]::UrlEncode($Signature))&se=$Epoch&skn=$KeyName\" } $token = New-ServiceBusSasToken ` -ResourceUri \"https://NAMESPACE.servicebus.windows.net/QUEUE_NAME\" ` -KeyName \"elmahio-rule\" ` -Key \"PRIMARY_KEY\" Both examples will generate a code valid for 1 year. Step 2: Create a Rule in elmah.io Once you have your SAS token, set up a rule in elmah.io to post messages to your Service Bus queue. Navigate to Rules on the Log Settings page. Click Add rule and configure: If condition: Select 'New Error or Fatal message' Then condition: HTTP request Method: POST URL: https://NAMESPACE.servicebus.windows.net/QUEUE_NAME/messages Content-Type: application/json Body: The JSON you want published to Service Bus Authentication Method: SharedAccessSignature Token: Paste the SAS token generated from the code above Save the rule elmah.io will now publish messages matching the rule.","title":"Sending Messages from elmah.io to Azure Service Bus using SAS Authentication"},{"location":"sending-messages-from-elmah-io-to-azure-service-bus-using-sas-authentication/#sending-messages-from-elmahio-to-azure-service-bus-using-sas-authentication","text":"elmah.io rules support Shared Access Signature (SAS) authentication, making it easy to forward log messages to Azure Service Bus queues. This guide walks you through creating a SAS token for a Service Bus queue and using it in an elmah.io rule to publish messages.","title":"Sending Messages from elmah.io to Azure Service Bus using SAS Authentication"},{"location":"sending-messages-from-elmah-io-to-azure-service-bus-using-sas-authentication/#step-1-create-a-shared-access-signature-sas-for-a-queue","text":"To authenticate a request to Azure Service Bus using SAS, you need three components: The queue URI (like https://NAMESPACE.servicebus.windows.net/QUEUE_NAME) The SAS policy name (like elmahio-rule) The associated primary key for that policy You will need to generate a SAS from either C# code or PowerShell: Csharp Powershell using System; using System.Net; using System.Security.Cryptography; using System.Text; public static class SasTokenGenerator { public static string GenerateSasToken(string resourceUri, string keyName, string key, TimeSpan ttl) { var expiry = DateTimeOffset.UtcNow.Add(ttl).ToUnixTimeSeconds(); string stringToSign = WebUtility.UrlEncode(resourceUri) + \"\\n\" + expiry; var hmac = new HMACSHA256(Encoding.UTF8.GetBytes(key)); var signature = Convert.ToBase64String(hmac.ComputeHash(Encoding.UTF8.GetBytes(stringToSign))); return $\"SharedAccessSignature sr={WebUtility.UrlEncode(resourceUri)}&sig={WebUtility.UrlEncode(signature)}&se={expiry}&skn={keyName}\"; } } // Usage var token = SasTokenGenerator.GenerateSasToken( \"https://NAMESPACE.servicebus.windows.net/QUEUE_NAME\", \"elmahio-rule\", \"PRIMARY_KEY\", TimeSpan.FromDays(365) ); function New-ServiceBusSasToken { param ( [string]$ResourceUri, [string]$KeyName, [string]$Key, [int]$ExpiryInSeconds = 31536000 ) $Epoch = [Math]::Round((Get-Date -Date (Get-Date \"1970-01-01Z\")).TotalSeconds) + $ExpiryInSeconds $StringToSign = [System.Web.HttpUtility]::UrlEncode($ResourceUri) + \"`n\" + $Epoch $HMAC = New-Object System.Security.Cryptography.HMACSHA256 $HMAC.Key = [Text.Encoding]::UTF8.GetBytes($Key) $Signature = [Convert]::ToBase64String($HMAC.ComputeHash([Text.Encoding]::UTF8.GetBytes($StringToSign))) return \"SharedAccessSignature sr=$([System.Web.HttpUtility]::UrlEncode($ResourceUri))&sig=$([System.Web.HttpUtility]::UrlEncode($Signature))&se=$Epoch&skn=$KeyName\" } $token = New-ServiceBusSasToken ` -ResourceUri \"https://NAMESPACE.servicebus.windows.net/QUEUE_NAME\" ` -KeyName \"elmahio-rule\" ` -Key \"PRIMARY_KEY\" Both examples will generate a code valid for 1 year.","title":"Step 1: Create a Shared Access Signature (SAS) for a Queue"},{"location":"sending-messages-from-elmah-io-to-azure-service-bus-using-sas-authentication/#step-2-create-a-rule-in-elmahio","text":"Once you have your SAS token, set up a rule in elmah.io to post messages to your Service Bus queue. Navigate to Rules on the Log Settings page. Click Add rule and configure: If condition: Select 'New Error or Fatal message' Then condition: HTTP request Method: POST URL: https://NAMESPACE.servicebus.windows.net/QUEUE_NAME/messages Content-Type: application/json Body: The JSON you want published to Service Bus Authentication Method: SharedAccessSignature Token: Paste the SAS token generated from the code above Save the rule elmah.io will now publish messages matching the rule.","title":"Step 2: Create a Rule in elmah.io"},{"location":"setting-application-name/","text":"Setting application name If logging to the same log from multiple applications, it might be a good idea to set an application name on all log messages. This will let you search for errors generated by a specific application through the elmah.io UI. Also, ELMAH automatically sets the application name to the Guid of the application inside IIS, why it often looks better to either clear this or set something meaningful. The application name can be easily set from the web.config file as part of the elmah.io configuration: <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKey=\"API_KEY\" logId=\"LOG_ID\" applicationName=\"MyApp\" /> This will decorate all errors logged to elmah.io with the application name MyApp . A common use of Web.config Transformations is to have a transformation per environment, customer, application, etc. If this is the case, you can replace the application name as part of the config transformation. Check out Use multiple logs for different environments for more information about how to update the errorLog element. Tip Our Web.config transformations - The definitive syntax guide contains general information about how transformations work and you can use the Web.config Transformation Tester to validate transformation files. If you, for some reason, cannot set the application name in the web.config file, it can be specified from C# by including the following code in the Application_Start method in the global.asax.cs file: Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client var logger = Elmah.Io.ErrorLog.Client; logger.OnMessage += (sender, args) => { args.Message.Application = \"MyApp\"; };","title":"Setting application name"},{"location":"setting-application-name/#setting-application-name","text":"If logging to the same log from multiple applications, it might be a good idea to set an application name on all log messages. This will let you search for errors generated by a specific application through the elmah.io UI. Also, ELMAH automatically sets the application name to the Guid of the application inside IIS, why it often looks better to either clear this or set something meaningful. The application name can be easily set from the web.config file as part of the elmah.io configuration: <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKey=\"API_KEY\" logId=\"LOG_ID\" applicationName=\"MyApp\" /> This will decorate all errors logged to elmah.io with the application name MyApp . A common use of Web.config Transformations is to have a transformation per environment, customer, application, etc. If this is the case, you can replace the application name as part of the config transformation. Check out Use multiple logs for different environments for more information about how to update the errorLog element. Tip Our Web.config transformations - The definitive syntax guide contains general information about how transformations work and you can use the Web.config Transformation Tester to validate transformation files. If you, for some reason, cannot set the application name in the web.config file, it can be specified from C# by including the following code in the Application_Start method in the global.asax.cs file: Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client var logger = Elmah.Io.ErrorLog.Client; logger.OnMessage += (sender, args) => { args.Message.Application = \"MyApp\"; };","title":"Setting application name"},{"location":"setup-deployment-tracking/","text":"Set Up Deployment Tracking Set Up Deployment Tracking Generate a new API key Tell elmah.io when you release Decorate your messages with a version number Versioning Different Services Enable/Disable logging while deploying Deployment tracking creates an overview of the different versions of your software and shows you how well each version performed. With this integration in place, you will be able to see when you released and if some of your releases caused more errors than others. While most pages on elmah.io support everything from verbose to fatal messages, the context on deployment tracking is around warnings and errors. To set up deployment tracking, you will need to tell elmah.io when you release, using our REST API or one of the integrations: PowerShell Octopus Deploy GitHub Actions Umbraco Cloud Bitbucket Pipelines Bamboo elmah.io CLI Kudu Azure Pipelines Azure Releases GitLab Pipelines Deployments are as default created on all of your logs, but this can be tweaked. More about this later. For a complete overview of the possibilities with deployment tracking, watch this video tutorial: Generate a new API key While you can use the same API key for everything, we recommend you create an API key specific to deployment tracking. To do so, go to the organization settings page by clicking the gears icon next to the organization name on either the dashboard or in the left menu. Select the API Keys tabs and click Add API Key . Fill in a name of choice and enable the Deployments > Write permission only: Click the save button and copy the API key for later use. Tell elmah.io when you release When you create a release of your software either manually or with the help of a tool like Octopus, you need to tell elmah.io about it. The elmah.io REST API v3 provides an endpoint named deployments , which you can call when creating releases. After calling the endpoint, all new messages to your logs will automatically be decorated with the most recent version number. If you release your software manually, creating the new release manually is easy using Swagger UI. Swagger UI is a graphical client for calling a Swagger-enabled endpoint (much like Postman). Navigate to https://api.elmah.io/swagger/index.html , expand the Deployments node and click the POST request: To create the release, input your API key ( Where is my API key? ) in the top right corner and click the JSON beneath Model Schema . This copies the example JSON to the deployment parameter. A minimal deployment would look like the following, but adding more information makes the experience within elmah.io even better: { \"version\": \"1.42.7\" } The version string in the example conforms to SemVer, but the content can be anything. The date of the release is automatically added if not specified in the JSON body. Click the Try it out! button and the deployment is created. We support a range of different integrations to avoid you manually having to use Swagger UI every time you release. Click one of the products below for instructions: PowerShell Octopus Deploy Kudu Azure DevOps Pipelines Azure DevOps Releases GitHub Actions Umbraco Cloud Bitbucket Pipelines Atlassian Bamboo Decorate your messages with a version number As default, all messages are decorated with the most recent deployment version. If you want to override this behavior, check out Adding Version Information for details. Versioning Different Services Chances are that your software consists of multiple services released independently and with different version numbers. This is a common pattern when splitting up a software system in microservices. How you choose to split your elmah.io logs is entirely up to you, but we almost always recommend having a separate log for each service. When doing so, you only want deployment tracking to show the releases from the service you are currently looking at. The problem here is that deployments on elmah.io are shown on all logs as default. To make sure that only deployments related to the service you are looking at are shown, you need to decorate each deployment with the log ID where it belongs. The deployments API supports this through an optional logId property. If set, the new deployment is only shown on the specified log. Enable/Disable logging while deploying Some websites and services are not built to work properly while deploying a new version. This may cause errors logged from Uptime Monitoring and similar while you deploy a new version of your software. In this case, you might consider disabling logging while deploying and enable logging once the new version is deployed. Disabling logging can be done in two ways: Through the elmah.io UI on the log settings page: By calling the Disable and Enable endpoints on the API (either manually or automatically). Powershell examples for reference: # Disable logging Invoke-RestMethod -Method Post -Uri 'https://api.elmah.io/v3/logs/LOG_ID/_disable?api_key=API_KEY' # Enable logging Invoke-RestMethod -Method Post -Uri 'https://api.elmah.io/v3/logs/LOG_ID/_enable?api_key=API_KEY'","title":"Set up Deployment Tracking"},{"location":"setup-deployment-tracking/#set-up-deployment-tracking","text":"Set Up Deployment Tracking Generate a new API key Tell elmah.io when you release Decorate your messages with a version number Versioning Different Services Enable/Disable logging while deploying Deployment tracking creates an overview of the different versions of your software and shows you how well each version performed. With this integration in place, you will be able to see when you released and if some of your releases caused more errors than others. While most pages on elmah.io support everything from verbose to fatal messages, the context on deployment tracking is around warnings and errors. To set up deployment tracking, you will need to tell elmah.io when you release, using our REST API or one of the integrations: PowerShell Octopus Deploy GitHub Actions Umbraco Cloud Bitbucket Pipelines Bamboo elmah.io CLI Kudu Azure Pipelines Azure Releases GitLab Pipelines Deployments are as default created on all of your logs, but this can be tweaked. More about this later. For a complete overview of the possibilities with deployment tracking, watch this video tutorial:","title":"Set Up Deployment Tracking"},{"location":"setup-deployment-tracking/#generate-a-new-api-key","text":"While you can use the same API key for everything, we recommend you create an API key specific to deployment tracking. To do so, go to the organization settings page by clicking the gears icon next to the organization name on either the dashboard or in the left menu. Select the API Keys tabs and click Add API Key . Fill in a name of choice and enable the Deployments > Write permission only: Click the save button and copy the API key for later use.","title":"Generate a new API key"},{"location":"setup-deployment-tracking/#tell-elmahio-when-you-release","text":"When you create a release of your software either manually or with the help of a tool like Octopus, you need to tell elmah.io about it. The elmah.io REST API v3 provides an endpoint named deployments , which you can call when creating releases. After calling the endpoint, all new messages to your logs will automatically be decorated with the most recent version number. If you release your software manually, creating the new release manually is easy using Swagger UI. Swagger UI is a graphical client for calling a Swagger-enabled endpoint (much like Postman). Navigate to https://api.elmah.io/swagger/index.html , expand the Deployments node and click the POST request: To create the release, input your API key ( Where is my API key? ) in the top right corner and click the JSON beneath Model Schema . This copies the example JSON to the deployment parameter. A minimal deployment would look like the following, but adding more information makes the experience within elmah.io even better: { \"version\": \"1.42.7\" } The version string in the example conforms to SemVer, but the content can be anything. The date of the release is automatically added if not specified in the JSON body. Click the Try it out! button and the deployment is created. We support a range of different integrations to avoid you manually having to use Swagger UI every time you release. Click one of the products below for instructions: PowerShell Octopus Deploy Kudu Azure DevOps Pipelines Azure DevOps Releases GitHub Actions Umbraco Cloud Bitbucket Pipelines Atlassian Bamboo","title":"Tell elmah.io when you release"},{"location":"setup-deployment-tracking/#decorate-your-messages-with-a-version-number","text":"As default, all messages are decorated with the most recent deployment version. If you want to override this behavior, check out Adding Version Information for details.","title":"Decorate your messages with a version number"},{"location":"setup-deployment-tracking/#versioning-different-services","text":"Chances are that your software consists of multiple services released independently and with different version numbers. This is a common pattern when splitting up a software system in microservices. How you choose to split your elmah.io logs is entirely up to you, but we almost always recommend having a separate log for each service. When doing so, you only want deployment tracking to show the releases from the service you are currently looking at. The problem here is that deployments on elmah.io are shown on all logs as default. To make sure that only deployments related to the service you are looking at are shown, you need to decorate each deployment with the log ID where it belongs. The deployments API supports this through an optional logId property. If set, the new deployment is only shown on the specified log.","title":"Versioning Different Services"},{"location":"setup-deployment-tracking/#enabledisable-logging-while-deploying","text":"Some websites and services are not built to work properly while deploying a new version. This may cause errors logged from Uptime Monitoring and similar while you deploy a new version of your software. In this case, you might consider disabling logging while deploying and enable logging once the new version is deployed. Disabling logging can be done in two ways: Through the elmah.io UI on the log settings page: By calling the Disable and Enable endpoints on the API (either manually or automatically). Powershell examples for reference: # Disable logging Invoke-RestMethod -Method Post -Uri 'https://api.elmah.io/v3/logs/LOG_ID/_disable?api_key=API_KEY' # Enable logging Invoke-RestMethod -Method Post -Uri 'https://api.elmah.io/v3/logs/LOG_ID/_enable?api_key=API_KEY'","title":"Enable/Disable logging while deploying"},{"location":"setup-heartbeats/","text":"Set up Heartbeats Set up Heartbeats Additional properties Reason Application and Version Took Checks elmah.io Heartbeats complements the Error Logging and Uptime Monitoring features already available on elmah.io. Where Uptime Monitoring is based on us pinging your public HTTP endpoints, Heartbeats is the other way around. When configured, your services, scheduled tasks, and websites ping the elmah.io in a specified interval. We call these ping Heartbeats, hence the name of the feature. Whether you should use Uptime Monitoring or Heartbeats to monitor your code, depends on a range of variables. Uptime Monitoring is great at making sure that your public endpoints can be reached from multiple locations. Scheduled tasks and services typically don't have public endpoints and are expected to run at a specified interval. With Heartbeats, setting up monitoring on these kinds of services is extremely easy, since elmah.io will automatically detect when an unhealthy heartbeat is received or if no heartbeat is received. Click one of the integrations below or continue reading to learn more about Heartbeats: ASP.NET Core Functions Isolated Functions PowerShell cURL Umbraco Hangfire Coravel Worker Services AWS Lambda Scheduled Tasks To better understand Heartbeats, let's create a simple example. For detailed instructions on how to set up Heartbeats in different languages and frameworks, select one of the specific articles in the left menu. In this example, we will extend a C# console application, executed as a Windows Scheduled task, with a heartbeat. The scheduled task is run every 30 minutes. Open a log on elmah.io and navigate to the Heartbeats tab: Click the Add Heartbeat button and fill in a name. For Interval we are selecting 30 minutes since the task is scheduled to run every 30 minutes. For Grace , we select 5 minutes to give the task a chance to complete. Selecting 30 and 5 minutes means that elmah.io will log an error if more than 35 minutes pass since we last heard from the task: To create heartbeats from our task, we will need an API key, a log ID, and a heartbeat ID. Let's start with the API key. Go to the organization settings page and click the API Keys tab. Add a new API key and check the Heartbeats - Write permission only: Copy and store the API key somewhere. Navigate back to your log and click the Instructions link on the newly created Heartbeat. This will reveal the log ID and heartbeat ID. Copy and store both values since we will need them in a minute. Time to do the integration. Like mentioned before, there are multiple ways of invoking the API. For this example, we'll use C#. Install the Elmah.Io.Client NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client Install-Package Elmah.Io.Client <PackageReference Include=\"Elmah.Io.Client\" Version=\"5.*\" /> paket add Elmah.Io.Client Extend your C# with the following code: using Elmah.Io.Client; public class Program { public static void Main() { var logId = new Guid(\"LOG_ID\"); var api = ElmahioAPI.Create(\"API_KEY\"); try { // Your task code goes here api.Heartbeats.Healthy(logId, \"HEARTBEAT_ID\"); } catch (Exception e) { api.Heartbeats.Unhealthy(logId, \"HEARTBEAT_ID\"); } } } Replace LOG_ID , API_KEY , and HEARTBEAT_ID with the values stored in the previous steps. When the code runs without throwing an exception, your task now creates a Healthy heartbeat. If an exception occurs, the code creates an Unhealthy heartbeat and uses the exception text as the reason. There's an additional method named Degraded for logging a degraded heartbeat. Depending on the heartbeat status, a log message can be created in the configured log. Log messages are only created on state changes. This means that if logging two Unhealthy requests, only the first request triggers a new error. If logging a Healthy heartbeat after logging an Unhealthy heartbeat, an information message will be logged. Transitioning to Degraded logs a warning. Additional properties Reason The Healthy , Unhealthy , and Degraded methods (or the CreateHeartbeat class when using the raw Create method) accept an additional parameter named reason . reason can be used to specify why a heartbeat check is either Degraded or Unhealthy . If your service throws an exception, the full exception including its stack trace is a good candidate for the reason parameter. When using integrations like the one with ASP.NET Core Health Checks, the health check report is used as the reason for the failing heartbeat. Application and Version When logging errors through one or more of the integrations, you may already use the Application and/or Version fields to set an application name and software version on all messages logged to elmah.io. Since Heartbeats will do the actual logging of messages, in this case, you can configure it to use the same application name and/or version number as your remaining integrations. api.Heartbeats.Unhealthy(logId, \"HEARTBEAT_ID\", application: \"MyApp\", version: \"1.0.0\"); If an application name is not configured, all messages logged from Heartbeats will get a default value of Heartbeats . If no version number is configured, log messages from Heartbeats will be assigned the latest version created through Deployment Tracking . Took A single performance metric named Took can be logged alongside a heartbeat. The value should be the elapsed time in milliseconds for the job, scheduled task, or whatever code resulting in the heartbeat. For a scheduled task, the Took value would be the time from the scheduled task start until the task ends: var stopwatch = new Stopwatch(); stopwatch.Start(); // run job stopwatch.Stop(); api.Heartbeats.Healthy( logId, heartbeatId, took: stopwatch.ElapsedMilliseconds); The value of the Took property is shown in the History modal on the Heartbeats page on elmah.io. Checks Note Checks require Elmah.Io.Client version 5.1.* or newer. Some sites and services implement a range of different checks to decide if the program is healthy or not. Consider an ASP.NET Core website that verifies that both a connection to a database and a service bus can be established. In this example, a failing heartbeat to elmah.io can be decorated with one or more Checks : api.Heartbeats.Unhealthy(logId, heartbeatId, checks: new List<Check> { new Check { Name = \"Database\", Result = \"Unhealthy\", Reason = \"Could not connect to database\" }, new Check { Name = \"Service Bus\", Result = \"Healthy\" }, }); When logging checks in a heartbeat, the elmah.io UI will list each check on the Root Cause tab part of the unhealthy heartbeat error.","title":"Set up Heartbeats"},{"location":"setup-heartbeats/#set-up-heartbeats","text":"Set up Heartbeats Additional properties Reason Application and Version Took Checks elmah.io Heartbeats complements the Error Logging and Uptime Monitoring features already available on elmah.io. Where Uptime Monitoring is based on us pinging your public HTTP endpoints, Heartbeats is the other way around. When configured, your services, scheduled tasks, and websites ping the elmah.io in a specified interval. We call these ping Heartbeats, hence the name of the feature. Whether you should use Uptime Monitoring or Heartbeats to monitor your code, depends on a range of variables. Uptime Monitoring is great at making sure that your public endpoints can be reached from multiple locations. Scheduled tasks and services typically don't have public endpoints and are expected to run at a specified interval. With Heartbeats, setting up monitoring on these kinds of services is extremely easy, since elmah.io will automatically detect when an unhealthy heartbeat is received or if no heartbeat is received. Click one of the integrations below or continue reading to learn more about Heartbeats: ASP.NET Core Functions Isolated Functions PowerShell cURL Umbraco Hangfire Coravel Worker Services AWS Lambda Scheduled Tasks To better understand Heartbeats, let's create a simple example. For detailed instructions on how to set up Heartbeats in different languages and frameworks, select one of the specific articles in the left menu. In this example, we will extend a C# console application, executed as a Windows Scheduled task, with a heartbeat. The scheduled task is run every 30 minutes. Open a log on elmah.io and navigate to the Heartbeats tab: Click the Add Heartbeat button and fill in a name. For Interval we are selecting 30 minutes since the task is scheduled to run every 30 minutes. For Grace , we select 5 minutes to give the task a chance to complete. Selecting 30 and 5 minutes means that elmah.io will log an error if more than 35 minutes pass since we last heard from the task: To create heartbeats from our task, we will need an API key, a log ID, and a heartbeat ID. Let's start with the API key. Go to the organization settings page and click the API Keys tab. Add a new API key and check the Heartbeats - Write permission only: Copy and store the API key somewhere. Navigate back to your log and click the Instructions link on the newly created Heartbeat. This will reveal the log ID and heartbeat ID. Copy and store both values since we will need them in a minute. Time to do the integration. Like mentioned before, there are multiple ways of invoking the API. For this example, we'll use C#. Install the Elmah.Io.Client NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io.Client Install-Package Elmah.Io.Client <PackageReference Include=\"Elmah.Io.Client\" Version=\"5.*\" /> paket add Elmah.Io.Client Extend your C# with the following code: using Elmah.Io.Client; public class Program { public static void Main() { var logId = new Guid(\"LOG_ID\"); var api = ElmahioAPI.Create(\"API_KEY\"); try { // Your task code goes here api.Heartbeats.Healthy(logId, \"HEARTBEAT_ID\"); } catch (Exception e) { api.Heartbeats.Unhealthy(logId, \"HEARTBEAT_ID\"); } } } Replace LOG_ID , API_KEY , and HEARTBEAT_ID with the values stored in the previous steps. When the code runs without throwing an exception, your task now creates a Healthy heartbeat. If an exception occurs, the code creates an Unhealthy heartbeat and uses the exception text as the reason. There's an additional method named Degraded for logging a degraded heartbeat. Depending on the heartbeat status, a log message can be created in the configured log. Log messages are only created on state changes. This means that if logging two Unhealthy requests, only the first request triggers a new error. If logging a Healthy heartbeat after logging an Unhealthy heartbeat, an information message will be logged. Transitioning to Degraded logs a warning.","title":"Set up Heartbeats"},{"location":"setup-heartbeats/#additional-properties","text":"","title":"Additional properties"},{"location":"setup-heartbeats/#reason","text":"The Healthy , Unhealthy , and Degraded methods (or the CreateHeartbeat class when using the raw Create method) accept an additional parameter named reason . reason can be used to specify why a heartbeat check is either Degraded or Unhealthy . If your service throws an exception, the full exception including its stack trace is a good candidate for the reason parameter. When using integrations like the one with ASP.NET Core Health Checks, the health check report is used as the reason for the failing heartbeat.","title":"Reason"},{"location":"setup-heartbeats/#application-and-version","text":"When logging errors through one or more of the integrations, you may already use the Application and/or Version fields to set an application name and software version on all messages logged to elmah.io. Since Heartbeats will do the actual logging of messages, in this case, you can configure it to use the same application name and/or version number as your remaining integrations. api.Heartbeats.Unhealthy(logId, \"HEARTBEAT_ID\", application: \"MyApp\", version: \"1.0.0\"); If an application name is not configured, all messages logged from Heartbeats will get a default value of Heartbeats . If no version number is configured, log messages from Heartbeats will be assigned the latest version created through Deployment Tracking .","title":"Application and Version"},{"location":"setup-heartbeats/#took","text":"A single performance metric named Took can be logged alongside a heartbeat. The value should be the elapsed time in milliseconds for the job, scheduled task, or whatever code resulting in the heartbeat. For a scheduled task, the Took value would be the time from the scheduled task start until the task ends: var stopwatch = new Stopwatch(); stopwatch.Start(); // run job stopwatch.Stop(); api.Heartbeats.Healthy( logId, heartbeatId, took: stopwatch.ElapsedMilliseconds); The value of the Took property is shown in the History modal on the Heartbeats page on elmah.io.","title":"Took"},{"location":"setup-heartbeats/#checks","text":"Note Checks require Elmah.Io.Client version 5.1.* or newer. Some sites and services implement a range of different checks to decide if the program is healthy or not. Consider an ASP.NET Core website that verifies that both a connection to a database and a service bus can be established. In this example, a failing heartbeat to elmah.io can be decorated with one or more Checks : api.Heartbeats.Unhealthy(logId, heartbeatId, checks: new List<Check> { new Check { Name = \"Database\", Result = \"Unhealthy\", Reason = \"Could not connect to database\" }, new Check { Name = \"Service Bus\", Result = \"Healthy\" }, }); When logging checks in a heartbeat, the elmah.io UI will list each check on the Root Cause tab part of the unhealthy heartbeat error.","title":"Checks"},{"location":"setup-uptime-monitoring/","text":"Set Up Uptime Monitoring Set Up Uptime Monitoring Uptime checks SSL certificate expiration checks Domain name expiration checks Lighthouse checks Canonical checks elmah.io Uptime Monitoring is the perfect companion for error logging. When your websites log errors, you are notified through elmah.io. But in the case where your website doesn't even respond to web requests, you will need something else to tell you that something is wrong. This is where Uptime Monitoring comes in. When set up, uptime monitoring automatically pings your websites from 5 different locations every 5 minutes. For a complete overview of the possibilities with uptime monitoring, watch this video tutorial: Uptime checks Uptime checks are automatic HTTP requests that you may already know from Azure, Pingdom, or a similar service. Uptime checks are created from the Uptime tab, directly on each log: SSL certificate expiration checks Expiring SSL certificates cause errors in your user's browser. If you ever tried forgetting to renew an SSL certificate, you know how many problems it can cause. With the SSL check option available when creating a new uptime check, elmah.io automatically validates your SSL certificates daily. When your SSL certificate is up for renewal, we start notifying you through the error logs. Domain name expiration checks Much like SSL checks, Domain name expiration checks, will notify you through your log when your domain names are about to expire. To enable this feature, enable the Domain Expiration toggle when creating a new uptime check. Lighthouse checks When enabling Lighthouse on an uptime check, we will generate Lighthouse results every night and include them on the history tab. Lighthouse is a popular tool for improving websites by running through a range of checks spread across multiple categories like performance and accessibility. Canonical checks Canonical checks are a range of checks implemented by us. It checks the URL of the uptime checks by running through a range of different best practices. Examples are HTTP to HTTPS redirect, correct use of redirect status code, and more checks.","title":"Set up Uptime Monitoring"},{"location":"setup-uptime-monitoring/#set-up-uptime-monitoring","text":"Set Up Uptime Monitoring Uptime checks SSL certificate expiration checks Domain name expiration checks Lighthouse checks Canonical checks elmah.io Uptime Monitoring is the perfect companion for error logging. When your websites log errors, you are notified through elmah.io. But in the case where your website doesn't even respond to web requests, you will need something else to tell you that something is wrong. This is where Uptime Monitoring comes in. When set up, uptime monitoring automatically pings your websites from 5 different locations every 5 minutes. For a complete overview of the possibilities with uptime monitoring, watch this video tutorial:","title":"Set Up Uptime Monitoring"},{"location":"setup-uptime-monitoring/#uptime-checks","text":"Uptime checks are automatic HTTP requests that you may already know from Azure, Pingdom, or a similar service. Uptime checks are created from the Uptime tab, directly on each log:","title":"Uptime checks"},{"location":"setup-uptime-monitoring/#ssl-certificate-expiration-checks","text":"Expiring SSL certificates cause errors in your user's browser. If you ever tried forgetting to renew an SSL certificate, you know how many problems it can cause. With the SSL check option available when creating a new uptime check, elmah.io automatically validates your SSL certificates daily. When your SSL certificate is up for renewal, we start notifying you through the error logs.","title":"SSL certificate expiration checks"},{"location":"setup-uptime-monitoring/#domain-name-expiration-checks","text":"Much like SSL checks, Domain name expiration checks, will notify you through your log when your domain names are about to expire. To enable this feature, enable the Domain Expiration toggle when creating a new uptime check.","title":"Domain name expiration checks"},{"location":"setup-uptime-monitoring/#lighthouse-checks","text":"When enabling Lighthouse on an uptime check, we will generate Lighthouse results every night and include them on the history tab. Lighthouse is a popular tool for improving websites by running through a range of checks spread across multiple categories like performance and accessibility.","title":"Lighthouse checks"},{"location":"setup-uptime-monitoring/#canonical-checks","text":"Canonical checks are a range of checks implemented by us. It checks the URL of the uptime checks by running through a range of different best practices. Examples are HTTP to HTTPS redirect, correct use of redirect status code, and more checks.","title":"Canonical checks"},{"location":"sourcemaps/","text":"Source maps Source maps Publish to your web server Upload to elmah.io Upload through the API Upload from the elmah.io CLI Upload from PowerShell Upload from C# Upload from Azure DevOps Pipelines Releases Upload from GitHub Actions Upload from Octopus Deploy elmah.io.javascript automatically tries to translate stack traces from minified and/or bundled code into developer-friendly traces using JavaScript source maps. For this to work, you will need to publish a valid .map source map file to either your web server or through the elmah.io API. In this article, we go through each of the possibilities. This is not a guide for generating source map files. There's a range of possibilities to help you do that (like gulp ). Publish to your web server The easiest way for elmah.io.javascript to translate minified/bundled stack traces is to publish a JavaScript source map alongside your minified JavaScript file. When logging a message through elmah.io.javascript , a source map is automatically used if there is a .map reference at the end of the file causing the log message/error: var v = 42; //# sourceMappingURL=/script.map This will require you to serve a source map file named script.map together with the minified/bundled file. The .map file doesn't need to be publicly available over the internet, but the elmah.io.javascript package will need to have access to it. Note De-minification from a .map file doesn't work in older browsers (like < IE10). Upload to elmah.io Publishing source map files alongside your minified and bundled files is not always the preferred way of doing things. With both the minified JavaScript file and the source map, someone outside of your organization can reverse engineer your JavaScript. In cases where this would be critical or if you want to limit the size of the published files, you can choose to upload the minified/bundled file and the corresponding source map file on the elmah.io API. When elmah.io receives a stack trace from a minified JavaScript file, we try to de-minify it if a corresponding .min.js and .map file have been uploaded. The code in the following sections will use the following bundled and minified stack trace as an example: Error: You cannot copy to the clipboard at window.copyTextToClipboard (https://foo.bar/bundles/sharedbundle.min.js:69:24978) at MyViewModel.n.copy (https://foo.bar/bundles/viewmodels.min.js:37:37385) at HTMLButtonElement.<anonymous> (https://foo.bar/bundles/sharedbundle.min.js:55:109467) To upload a source map to elmah.io you will need an API key with the Source Maps | Write permission enabled. We recommend creating a new API key with this permission enabled only. For more information about API keys and permissions, check out How to configure API key permissions . Upload through the API Go to the API and insert your API key. The upload source map endpoint accepts a couple of parameters that you will need to get right to make de-minification work. The stack trace contains references to two different bundled JavaScript files with each their .map file. Both source map files should be uploaded to the elmah.io API. For both bundled files, fill in the details as explained here: Parameter Description logId A source map will always belong to a specific elmah.io log. Insert the log ID of that log in this field. If an application is logging JavaScript messages to multiple logs, you will need to upload the files to all those logs. Path This is the relative path to the bundled and minified file. For the example above you will need to specify /bundles/sharedbundle.min.js for the first source map and /bundles/viewmodels.min.js for the second one. You can use an absolute path and query parameters on the URL if you prefer, but this will be converted to a relative path by the elmah.io API. SourceMap The source map file representing the minified file in the Path specified above. MinifiedJavaScript The bundled and minified JavaScript file. This will be the content of the Path specified above. Upload from the elmah.io CLI Source maps can be uploaded from the elmah.io CLI. Install the CLI if not already installed: dotnet tool install --global Elmah.Io.Cli Then, upload a source map and minified JavaScript using the sourcemap command: sourcemap --apiKey API_KEY --logId LOG_ID --path \"/bundles/sharedbundle.min.js\" --sourceMap \"c:\\path\\to\\sharedbundle.map\" --minifiedJavaScript \"c:\\path\\to\\sharedbundle.min.js\" Upload from PowerShell Uploading source maps can be built into your CI/CD pipeline using cURL, PowerShell, or similar. Here's an example written in PowerShell: $boundary = [System.Guid]::NewGuid().ToString() $mapPath = \"c:\\path\\to\\sharedbundle.map\" $jsPath = \"c:\\path\\to\\sharedbundle.min.js\" $mapFile = [System.IO.File]::ReadAllBytes($mapPath) $mapContent = [System.Text.Encoding]::UTF8.GetString($mapFile) $jsFile = [System.IO.File]::ReadAllBytes($jsPath) $jsContent = [System.Text.Encoding]::UTF8.GetString($jsFile) $LF = \"`r`n\" $bodyLines = ( \"--$boundary\", \"Content-Disposition: form-data; name=`\"Path`\"$LF\", \"/bundles/sharedbundle.min.js\", \"--$boundary\", \"Content-Disposition: form-data; name=`\"SourceMap`\"; filename=`\"sharedbundle.map`\"\", \"Content-Type: application/json$LF\", $mapContent, \"--$boundary\", \"Content-Disposition: form-data; name=`\"MinifiedJavaScript`\"; filename=`\"sharedbundle.min.js`\"\", \"Content-Type: text/javascript$LF\", $jsContent, \"--$boundary--$LF\" ) -join $LF Invoke-RestMethod 'https://api.elmah.io/v3/sourcemaps/LOG_ID?api_key=API_KEY' -Method POST -ContentType \"multipart/form-data; boundary=`\"$boundary`\"\" -Body $bodyLines Upload from C# Source maps can be uploaded from C# using the Elmah.Io.Client NuGet package: var api = ElmahioAPI.Create(\"API_KEY\"); using var sourceMapStream = File.OpenRead(\"c:\\\\path\\\\to\\\\sharedbundle.map\"); using var scriptStream = File.OpenRead(\"c:\\\\path\\\\to\\\\sharedbundle.min.js\"); api.SourceMaps.CreateOrUpdate( \"LOG_ID\", new Uri(\"/bundles/sharedbundle.min.js\", UriKind.Relative), new FileParameter(sourceMapStream, \"sharedbundle.map\", \"application/json\"), new FileParameter(scriptStream, \"sharedbundle.min.js\", \"text/javascript\")); Upload from Azure DevOps Uploading one or more source maps from Azure DevOps is available using our integration with Pipelines and Releases. Here is a guide to help you upload source maps from Azure DevOps. Go to the elmah.io Upload Source Map extension on the Azure DevOps Marketplace and click the Get it free button: Select your organization and click the Install button: Pipelines Go to your Azure DevOps Pipeline configuration and add the elmah.io Upload Source Map task. Fill in the fields as shown here: When clicking the Add button, YAML code will be added to your configuration looking similar to this: - task: ElmahIoUploadSourceMap@4 inputs: apiKey: 'API_KEY' logId: 'LOG_ID' path: '/bundles/sharedbundle.min.js' sourceMap: '$(System.DefaultWorkingDirectory)/myproject/bundles/sharedbundle.map' minifiedJavaScript: '$(System.DefaultWorkingDirectory)/myproject/bundles/sharedbundle.min.js' Releases Before you can include the upload source map task, you will need to publish your generated source maps and minified JavaScript files from your build pipeline. Go to your Azure DevOps project and add the elmah.io Upload Source Map task. Fill in all fields as shown here: Upload from GitHub Actions Uploading one or more source maps from GitHub Actions is available using our integration with Actions. We recommend adding your API key and log ID as secrets on your GitHub repository, to avoid people outside of your organization getting access to those values. To upload a generated source map from GitHub Actions, include the following in your build YAML file: uses: elmahio/github-upload-source-map-action@v1 with: apiKey: ${{ secrets.ELMAH_IO_API_KEY }} logId: ${{ secrets.ELMAH_IO_LOG_ID }} path: '/bundles/sharedbundle.min.js' sourceMap: 'path/to/sharedbundle.map' minifiedJavaScript: 'path/to/sharedbundle.min.js' Upload from Octopus Deploy Uploading one or more source from Octopus Deploy is available using our step template for Octopus. The step template can be installed in multiple ways as explained on Community step templates . In this document, the step template will be installed directly from the Process Editor : Go to the Process Editor and click the ADD STEP button. In the Choose Step Template section search for 'elmah.io': Hover over the 'elmah.io - Upload Source Map' community template and click the INSTALL AND ADD button. In the Install and add modal click the SAVE button. The step template is now added to the process. Fill in all fields as shown here:","title":"Source maps"},{"location":"sourcemaps/#source-maps","text":"Source maps Publish to your web server Upload to elmah.io Upload through the API Upload from the elmah.io CLI Upload from PowerShell Upload from C# Upload from Azure DevOps Pipelines Releases Upload from GitHub Actions Upload from Octopus Deploy elmah.io.javascript automatically tries to translate stack traces from minified and/or bundled code into developer-friendly traces using JavaScript source maps. For this to work, you will need to publish a valid .map source map file to either your web server or through the elmah.io API. In this article, we go through each of the possibilities. This is not a guide for generating source map files. There's a range of possibilities to help you do that (like gulp ).","title":"Source maps"},{"location":"sourcemaps/#publish-to-your-web-server","text":"The easiest way for elmah.io.javascript to translate minified/bundled stack traces is to publish a JavaScript source map alongside your minified JavaScript file. When logging a message through elmah.io.javascript , a source map is automatically used if there is a .map reference at the end of the file causing the log message/error: var v = 42; //# sourceMappingURL=/script.map This will require you to serve a source map file named script.map together with the minified/bundled file. The .map file doesn't need to be publicly available over the internet, but the elmah.io.javascript package will need to have access to it. Note De-minification from a .map file doesn't work in older browsers (like < IE10).","title":"Publish to your web server"},{"location":"sourcemaps/#upload-to-elmahio","text":"Publishing source map files alongside your minified and bundled files is not always the preferred way of doing things. With both the minified JavaScript file and the source map, someone outside of your organization can reverse engineer your JavaScript. In cases where this would be critical or if you want to limit the size of the published files, you can choose to upload the minified/bundled file and the corresponding source map file on the elmah.io API. When elmah.io receives a stack trace from a minified JavaScript file, we try to de-minify it if a corresponding .min.js and .map file have been uploaded. The code in the following sections will use the following bundled and minified stack trace as an example: Error: You cannot copy to the clipboard at window.copyTextToClipboard (https://foo.bar/bundles/sharedbundle.min.js:69:24978) at MyViewModel.n.copy (https://foo.bar/bundles/viewmodels.min.js:37:37385) at HTMLButtonElement.<anonymous> (https://foo.bar/bundles/sharedbundle.min.js:55:109467) To upload a source map to elmah.io you will need an API key with the Source Maps | Write permission enabled. We recommend creating a new API key with this permission enabled only. For more information about API keys and permissions, check out How to configure API key permissions .","title":"Upload to elmah.io"},{"location":"sourcemaps/#upload-through-the-api","text":"Go to the API and insert your API key. The upload source map endpoint accepts a couple of parameters that you will need to get right to make de-minification work. The stack trace contains references to two different bundled JavaScript files with each their .map file. Both source map files should be uploaded to the elmah.io API. For both bundled files, fill in the details as explained here: Parameter Description logId A source map will always belong to a specific elmah.io log. Insert the log ID of that log in this field. If an application is logging JavaScript messages to multiple logs, you will need to upload the files to all those logs. Path This is the relative path to the bundled and minified file. For the example above you will need to specify /bundles/sharedbundle.min.js for the first source map and /bundles/viewmodels.min.js for the second one. You can use an absolute path and query parameters on the URL if you prefer, but this will be converted to a relative path by the elmah.io API. SourceMap The source map file representing the minified file in the Path specified above. MinifiedJavaScript The bundled and minified JavaScript file. This will be the content of the Path specified above.","title":"Upload through the API"},{"location":"sourcemaps/#upload-from-the-elmahio-cli","text":"Source maps can be uploaded from the elmah.io CLI. Install the CLI if not already installed: dotnet tool install --global Elmah.Io.Cli Then, upload a source map and minified JavaScript using the sourcemap command: sourcemap --apiKey API_KEY --logId LOG_ID --path \"/bundles/sharedbundle.min.js\" --sourceMap \"c:\\path\\to\\sharedbundle.map\" --minifiedJavaScript \"c:\\path\\to\\sharedbundle.min.js\"","title":"Upload from the elmah.io CLI"},{"location":"sourcemaps/#upload-from-powershell","text":"Uploading source maps can be built into your CI/CD pipeline using cURL, PowerShell, or similar. Here's an example written in PowerShell: $boundary = [System.Guid]::NewGuid().ToString() $mapPath = \"c:\\path\\to\\sharedbundle.map\" $jsPath = \"c:\\path\\to\\sharedbundle.min.js\" $mapFile = [System.IO.File]::ReadAllBytes($mapPath) $mapContent = [System.Text.Encoding]::UTF8.GetString($mapFile) $jsFile = [System.IO.File]::ReadAllBytes($jsPath) $jsContent = [System.Text.Encoding]::UTF8.GetString($jsFile) $LF = \"`r`n\" $bodyLines = ( \"--$boundary\", \"Content-Disposition: form-data; name=`\"Path`\"$LF\", \"/bundles/sharedbundle.min.js\", \"--$boundary\", \"Content-Disposition: form-data; name=`\"SourceMap`\"; filename=`\"sharedbundle.map`\"\", \"Content-Type: application/json$LF\", $mapContent, \"--$boundary\", \"Content-Disposition: form-data; name=`\"MinifiedJavaScript`\"; filename=`\"sharedbundle.min.js`\"\", \"Content-Type: text/javascript$LF\", $jsContent, \"--$boundary--$LF\" ) -join $LF Invoke-RestMethod 'https://api.elmah.io/v3/sourcemaps/LOG_ID?api_key=API_KEY' -Method POST -ContentType \"multipart/form-data; boundary=`\"$boundary`\"\" -Body $bodyLines","title":"Upload from PowerShell"},{"location":"sourcemaps/#upload-from-c","text":"Source maps can be uploaded from C# using the Elmah.Io.Client NuGet package: var api = ElmahioAPI.Create(\"API_KEY\"); using var sourceMapStream = File.OpenRead(\"c:\\\\path\\\\to\\\\sharedbundle.map\"); using var scriptStream = File.OpenRead(\"c:\\\\path\\\\to\\\\sharedbundle.min.js\"); api.SourceMaps.CreateOrUpdate( \"LOG_ID\", new Uri(\"/bundles/sharedbundle.min.js\", UriKind.Relative), new FileParameter(sourceMapStream, \"sharedbundle.map\", \"application/json\"), new FileParameter(scriptStream, \"sharedbundle.min.js\", \"text/javascript\"));","title":"Upload from C#"},{"location":"sourcemaps/#upload-from-azure-devops","text":"Uploading one or more source maps from Azure DevOps is available using our integration with Pipelines and Releases. Here is a guide to help you upload source maps from Azure DevOps. Go to the elmah.io Upload Source Map extension on the Azure DevOps Marketplace and click the Get it free button: Select your organization and click the Install button:","title":"Upload from Azure DevOps"},{"location":"sourcemaps/#pipelines","text":"Go to your Azure DevOps Pipeline configuration and add the elmah.io Upload Source Map task. Fill in the fields as shown here: When clicking the Add button, YAML code will be added to your configuration looking similar to this: - task: ElmahIoUploadSourceMap@4 inputs: apiKey: 'API_KEY' logId: 'LOG_ID' path: '/bundles/sharedbundle.min.js' sourceMap: '$(System.DefaultWorkingDirectory)/myproject/bundles/sharedbundle.map' minifiedJavaScript: '$(System.DefaultWorkingDirectory)/myproject/bundles/sharedbundle.min.js'","title":"Pipelines"},{"location":"sourcemaps/#releases","text":"Before you can include the upload source map task, you will need to publish your generated source maps and minified JavaScript files from your build pipeline. Go to your Azure DevOps project and add the elmah.io Upload Source Map task. Fill in all fields as shown here:","title":"Releases"},{"location":"sourcemaps/#upload-from-github-actions","text":"Uploading one or more source maps from GitHub Actions is available using our integration with Actions. We recommend adding your API key and log ID as secrets on your GitHub repository, to avoid people outside of your organization getting access to those values. To upload a generated source map from GitHub Actions, include the following in your build YAML file: uses: elmahio/github-upload-source-map-action@v1 with: apiKey: ${{ secrets.ELMAH_IO_API_KEY }} logId: ${{ secrets.ELMAH_IO_LOG_ID }} path: '/bundles/sharedbundle.min.js' sourceMap: 'path/to/sharedbundle.map' minifiedJavaScript: 'path/to/sharedbundle.min.js'","title":"Upload from GitHub Actions"},{"location":"sourcemaps/#upload-from-octopus-deploy","text":"Uploading one or more source from Octopus Deploy is available using our step template for Octopus. The step template can be installed in multiple ways as explained on Community step templates . In this document, the step template will be installed directly from the Process Editor : Go to the Process Editor and click the ADD STEP button. In the Choose Step Template section search for 'elmah.io': Hover over the 'elmah.io - Upload Source Map' community template and click the INSTALL AND ADD button. In the Install and add modal click the SAVE button. The step template is now added to the process. Fill in all fields as shown here:","title":"Upload from Octopus Deploy"},{"location":"special-programs/","text":"Special Programs Startups - Discounted Business plan for 12 months. Focus on product while monitoring reliability. Non-profits - Reduced pricing for verified non-profit organizations. MVPs and User Groups - Free or discounted subscriptions for Microsoft MVPs and community groups; sponsorships available. Open Source - Free Small Business plan for eligible open-source projects.","title":"Special Programs"},{"location":"special-programs/#special-programs","text":"Startups - Discounted Business plan for 12 months. Focus on product while monitoring reliability. Non-profits - Reduced pricing for verified non-profit organizations. MVPs and User Groups - Free or discounted subscriptions for Microsoft MVPs and community groups; sponsorships available. Open Source - Free Small Business plan for eligible open-source projects.","title":"Special Programs"},{"location":"specify-api-key-and-log-id-through-appsettings/","text":"Specify API key and log ID through appSettings When integrating to elmah.io from ASP.NET, MVC, Web API and similar, we use the open source project ELMAH to log uncaught exceptions. ELMAH requires configuration in web.config , which in the case of elmah.io could look something like this: <elmah> <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKey=\"API_KEY\" logId=\"LOG_ID\" /> </elmah> You'd normally use web.config Transformations to specify different API keys and log IDs for different environments (see Use multiple logs for different environments ). When hosting on Microsoft Azure (and other cloud-based offerings), a better approach is to specify the configuration in the appSettings element and overwrite values through the web app settings in the Portal. The elmah.io clients built for ASP.NET based web frameworks support this scenario through additional attributes on the <errorLog> element: <appSettings> <add key=\"apiKeyRef\" value=\"API_KEY\" /> <add key=\"logIdRef\" value=\"LOG_ID\" /> </appSettings> <!-- ... --> <elmah> <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKeyKey=\"apiKeyRef\" logIdKey=\"logIdRef\" /> </elmah> Unlike the first example, the term Key has been appended to both the apiKey and logId attributes. The values of those attributes need to match a key specified in appSettings (in this example apiKeyRef and logIdRef ). How you choose to name these keys is entirely up to you, as long as the names match. elmah.io now picks up your API key ( Where is my API key? ) and log ID ( Where is my log ID? ) from the appSettings element and can be overwritten on your production site on Azure.","title":"Specify API key and log ID through appSettings"},{"location":"specify-api-key-and-log-id-through-appsettings/#specify-api-key-and-log-id-through-appsettings","text":"When integrating to elmah.io from ASP.NET, MVC, Web API and similar, we use the open source project ELMAH to log uncaught exceptions. ELMAH requires configuration in web.config , which in the case of elmah.io could look something like this: <elmah> <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKey=\"API_KEY\" logId=\"LOG_ID\" /> </elmah> You'd normally use web.config Transformations to specify different API keys and log IDs for different environments (see Use multiple logs for different environments ). When hosting on Microsoft Azure (and other cloud-based offerings), a better approach is to specify the configuration in the appSettings element and overwrite values through the web app settings in the Portal. The elmah.io clients built for ASP.NET based web frameworks support this scenario through additional attributes on the <errorLog> element: <appSettings> <add key=\"apiKeyRef\" value=\"API_KEY\" /> <add key=\"logIdRef\" value=\"LOG_ID\" /> </appSettings> <!-- ... --> <elmah> <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKeyKey=\"apiKeyRef\" logIdKey=\"logIdRef\" /> </elmah> Unlike the first example, the term Key has been appended to both the apiKey and logId attributes. The values of those attributes need to match a key specified in appSettings (in this example apiKeyRef and logIdRef ). How you choose to name these keys is entirely up to you, as long as the names match. elmah.io now picks up your API key ( Where is my API key? ) and log ID ( Where is my log ID? ) from the appSettings element and can be overwritten on your production site on Azure.","title":"Specify API key and log ID through appSettings"},{"location":"tips-and-tricks-to-stay-below-your-message-limit/","text":"Tips and tricks to stay below your message limit Tips and tricks to stay below your message limit Ignore Rules Filters Ignore future messages like this Disable logs Client-side message filtering Monitor current usage Fix bugs Purchase a top-up Upgrading to the next plan Each plan on elmah.io includes a maximum number of messages per month. The number of messages is calculated from how many times your applications have called our API and successfully stored a message (in most cases messages equal errors). Deleting messages either one by one or in batches is fully supported, but does not result in a decrease in the current message count. Our costs are primarily around receiving, indexing, and notifying about messages, why we cannot allow someone on a lower plan like the Small Business, to log millions and yet millions of messages and then just clean up regularly. We're sure that everyone understands the challenge here. With that said, we want to help you stay within your message limits. Luckily, there are a lot of ways to limit messages. This article contains a list of the most common tactics to stay below your message limit. Ignore Rules Note Be aware that Ignore rules and filters are only meant as a temporary way of ignoring messages. In case you want to permanently ignore one or more log messages, use client-side filtering . The easiest way to limit logged messages is by ignoring some of them (preferable using client-side filtering). Ignored messages are discarded before they are stored and therefore do not count toward your monthly message quota. Message rules can be configured through the Rules tab on the Log Settings view. Rules consist of a query and an action. The query can either be a full-text query or written using Lucene Query Syntax. To create a new ignore rule, input a query on the Rules tab: All new rules are created with an ignore action as default, why you don't need to click the Then link for this type of rule. In the example above, ignore all messages with a status code of 404 . For more information about the possibilities with rules, check out Creating Rules to Perform Actions on Messages . Filters Filters are Ignore Rules in disguise. With Filters, we have collected the most common ignore rules and made them available as a set of checkboxes. To ignore all messages matching a specific filter, enable one of the checkboxes on the Filters tab on Log Settings: If your website is available for everyone to access, ignoring known crawlers, bots, and spiders is a good idea in most cases. Filtering below warning can also be a good idea unless you are using elmah.io to log all log severities from a logging framework like NLog or Serilog. If staying within the message limit is more important than getting the full picture of the errors generated by your website, there are a couple of filters that will help you with that. The Filter Known filter will make sure that only one instance of each error is logged. If you still want to log multiple instances but stop at some point, the Filter Burst filter will stop logging after 50 instances are logged. Be aware that all messages will have an isBurst set on them as soon as we have 50 instances of the message stored. This means that disabling and enabling this filter will not reset the burst limit. Also, if a message has isBurst set to true, it will only be ignored if the Filter Burst filter is enabled. Finally, you can set a limit on how many errors you want logged to a specific log each month, by inputting a number in the Filter Limit filter. Please notice that using any of these last three filters will cause inconsistent results in different graphs and features (like spike detection). They can solve the problem of logging too much, but it is a sign that you are logging more data than is included in your plan. A perfectly valid solution is to purchase a larger plan, get your logging under control (maybe even fix some errors?), and then downgrade when you are ready. Ignore future messages like this Sometimes you may find yourself on the Search tab with a search result thinking: \"I don't care about these messages\". By clicking the caret next to the query filters, an Ignore future messages like this option is revealed: Clicking this option automatically ignores any future messages matching your current search result. Disable logs Each log can be disabled from Log Settings: Disabled logs are shown as semi-transparent on the dashboard, to help you remember that you disabled a log. Client-side message filtering Most of our clients support client filtering. All of the filtering options described above filter messages server-side. This means that your application still communicates with elmah.io's API and needs to wait for that to answer (even for ignored messages). Filtering client-side from ASP.NET, MVC, Web API, and other frameworks built on top of ASP.NET, can be done using ELMAH's (the open-source project) filtering feature. To filter messages, create a method named ErrorLog_Filtering in the Global.asax.cs file: void ErrorLog_Filtering(object sender, ExceptionFilterEventArgs args) { var httpContext = args.Context as HttpContext; if (httpContext.Response.StatusCode == 404) { args.Dismiss(); } } If you're using ASP.NET Core, our client supports the OnFilter action: builder.Services.AddElmahIo(o => { // ... o.OnFilter = message => { return message.StatusCode == 404; }; }); To help you set up client-side filtering in commonly used logging frameworks, click the button on the log message details toolbar. This will show a dialog containing extensive help on setting up client-side filtering. Monitor current usage We send you an email when you have used 90% of your limit and again when reaching the limit. Monitoring your usage is a good supplement to the emails since you can react early on (by upgrading, ignoring errors, or something else). There's a usage graph on the Organization Settings view: By clicking the information icon above the counter, you will be able to see which logs that are taking up space: Fix bugs Seeing the same error over and over again? Maybe the best idea is to fix it :) I mean, that's the whole purpose of elmah.io: to help you fix bugs. And remember, the fewer bugs you have, the cheaper elmah.io gets. The ultimate motivation! Purchase a top-up Sometimes, a spike in errors can be caused by unexpected events like a black hat bot deciding to bombard your site with requests or a junior dev on your team accidentally enabling verbose logging. In these cases, purchasing a top-up may be a better solution than permanently upgrading your plan. Top-ups can be purchased from the Subscription tab on the Organization Settings page. Top-ups are purchased in bundles of 25,000 messages, valid for the rest of the calendar month. Upgrading to the next plan If you constantly go over the limit, you have probably reached a point where you will need to upgrade to a larger plan. You can upgrade and downgrade at any time, so upgrading for a few months (until you get errors under control) and then downgrading again, is perfectly fine.","title":"Tips and tricks to stay below your message limit"},{"location":"tips-and-tricks-to-stay-below-your-message-limit/#tips-and-tricks-to-stay-below-your-message-limit","text":"Tips and tricks to stay below your message limit Ignore Rules Filters Ignore future messages like this Disable logs Client-side message filtering Monitor current usage Fix bugs Purchase a top-up Upgrading to the next plan Each plan on elmah.io includes a maximum number of messages per month. The number of messages is calculated from how many times your applications have called our API and successfully stored a message (in most cases messages equal errors). Deleting messages either one by one or in batches is fully supported, but does not result in a decrease in the current message count. Our costs are primarily around receiving, indexing, and notifying about messages, why we cannot allow someone on a lower plan like the Small Business, to log millions and yet millions of messages and then just clean up regularly. We're sure that everyone understands the challenge here. With that said, we want to help you stay within your message limits. Luckily, there are a lot of ways to limit messages. This article contains a list of the most common tactics to stay below your message limit.","title":"Tips and tricks to stay below your message limit"},{"location":"tips-and-tricks-to-stay-below-your-message-limit/#ignore-rules","text":"Note Be aware that Ignore rules and filters are only meant as a temporary way of ignoring messages. In case you want to permanently ignore one or more log messages, use client-side filtering . The easiest way to limit logged messages is by ignoring some of them (preferable using client-side filtering). Ignored messages are discarded before they are stored and therefore do not count toward your monthly message quota. Message rules can be configured through the Rules tab on the Log Settings view. Rules consist of a query and an action. The query can either be a full-text query or written using Lucene Query Syntax. To create a new ignore rule, input a query on the Rules tab: All new rules are created with an ignore action as default, why you don't need to click the Then link for this type of rule. In the example above, ignore all messages with a status code of 404 . For more information about the possibilities with rules, check out Creating Rules to Perform Actions on Messages .","title":"Ignore Rules"},{"location":"tips-and-tricks-to-stay-below-your-message-limit/#filters","text":"Filters are Ignore Rules in disguise. With Filters, we have collected the most common ignore rules and made them available as a set of checkboxes. To ignore all messages matching a specific filter, enable one of the checkboxes on the Filters tab on Log Settings: If your website is available for everyone to access, ignoring known crawlers, bots, and spiders is a good idea in most cases. Filtering below warning can also be a good idea unless you are using elmah.io to log all log severities from a logging framework like NLog or Serilog. If staying within the message limit is more important than getting the full picture of the errors generated by your website, there are a couple of filters that will help you with that. The Filter Known filter will make sure that only one instance of each error is logged. If you still want to log multiple instances but stop at some point, the Filter Burst filter will stop logging after 50 instances are logged. Be aware that all messages will have an isBurst set on them as soon as we have 50 instances of the message stored. This means that disabling and enabling this filter will not reset the burst limit. Also, if a message has isBurst set to true, it will only be ignored if the Filter Burst filter is enabled. Finally, you can set a limit on how many errors you want logged to a specific log each month, by inputting a number in the Filter Limit filter. Please notice that using any of these last three filters will cause inconsistent results in different graphs and features (like spike detection). They can solve the problem of logging too much, but it is a sign that you are logging more data than is included in your plan. A perfectly valid solution is to purchase a larger plan, get your logging under control (maybe even fix some errors?), and then downgrade when you are ready.","title":"Filters"},{"location":"tips-and-tricks-to-stay-below-your-message-limit/#ignore-future-messages-like-this","text":"Sometimes you may find yourself on the Search tab with a search result thinking: \"I don't care about these messages\". By clicking the caret next to the query filters, an Ignore future messages like this option is revealed: Clicking this option automatically ignores any future messages matching your current search result.","title":"Ignore future messages like this"},{"location":"tips-and-tricks-to-stay-below-your-message-limit/#disable-logs","text":"Each log can be disabled from Log Settings: Disabled logs are shown as semi-transparent on the dashboard, to help you remember that you disabled a log.","title":"Disable logs"},{"location":"tips-and-tricks-to-stay-below-your-message-limit/#client-side-message-filtering","text":"Most of our clients support client filtering. All of the filtering options described above filter messages server-side. This means that your application still communicates with elmah.io's API and needs to wait for that to answer (even for ignored messages). Filtering client-side from ASP.NET, MVC, Web API, and other frameworks built on top of ASP.NET, can be done using ELMAH's (the open-source project) filtering feature. To filter messages, create a method named ErrorLog_Filtering in the Global.asax.cs file: void ErrorLog_Filtering(object sender, ExceptionFilterEventArgs args) { var httpContext = args.Context as HttpContext; if (httpContext.Response.StatusCode == 404) { args.Dismiss(); } } If you're using ASP.NET Core, our client supports the OnFilter action: builder.Services.AddElmahIo(o => { // ... o.OnFilter = message => { return message.StatusCode == 404; }; }); To help you set up client-side filtering in commonly used logging frameworks, click the button on the log message details toolbar. This will show a dialog containing extensive help on setting up client-side filtering.","title":"Client-side message filtering"},{"location":"tips-and-tricks-to-stay-below-your-message-limit/#monitor-current-usage","text":"We send you an email when you have used 90% of your limit and again when reaching the limit. Monitoring your usage is a good supplement to the emails since you can react early on (by upgrading, ignoring errors, or something else). There's a usage graph on the Organization Settings view: By clicking the information icon above the counter, you will be able to see which logs that are taking up space:","title":"Monitor current usage"},{"location":"tips-and-tricks-to-stay-below-your-message-limit/#fix-bugs","text":"Seeing the same error over and over again? Maybe the best idea is to fix it :) I mean, that's the whole purpose of elmah.io: to help you fix bugs. And remember, the fewer bugs you have, the cheaper elmah.io gets. The ultimate motivation!","title":"Fix bugs"},{"location":"tips-and-tricks-to-stay-below-your-message-limit/#purchase-a-top-up","text":"Sometimes, a spike in errors can be caused by unexpected events like a black hat bot deciding to bombard your site with requests or a junior dev on your team accidentally enabling verbose logging. In these cases, purchasing a top-up may be a better solution than permanently upgrading your plan. Top-ups can be purchased from the Subscription tab on the Organization Settings page. Top-ups are purchased in bundles of 25,000 messages, valid for the rest of the calendar month.","title":"Purchase a top-up"},{"location":"tips-and-tricks-to-stay-below-your-message-limit/#upgrading-to-the-next-plan","text":"If you constantly go over the limit, you have probably reached a point where you will need to upgrade to a larger plan. You can upgrade and downgrade at any time, so upgrading for a few months (until you get errors under control) and then downgrading again, is perfectly fine.","title":"Upgrading to the next plan"},{"location":"upgrade-elmah-io-from-v2-to-v3/","text":"Upgrade elmah.io from v2 to v3 When we launched the new version of our API ( v3 ), we used the jump in major version to fix some issues that would require major changes in our client. One of them is a move to netstandard, which makes the new client usable from .NET Core. With interface changes in the client, upgrading from 2.x to 3.x requires more than simply upgrading the NuGet package. This is a guide to upgrading the Elmah.Io package. Note If you are logging to elmah.io from ASP.NET Core, you are already using the 3.x client. Updating the NuGet package First, you need to upgrade the Elmah.Io NuGet package: Update-Package Elmah.Io This installs the latest 3.x client. After doing so, we recommend updating to the latest Elmah.Io.Client package as well (updating Elmah.Io already updated Elmah.Io.Client but to the lowest possible version): Update-Package Elmah.Io.Client The elmah.io.core package is no longer needed and can be uninstalled: Uninstall-Package elmah.io.core Next, you will need to add your API key to your web.config . Where the 2.x client only required a log ID to log messages to elmah.io, the new API improves security by introducing API keys ( Where is my API key? ). Copy your API key and extend the errorLog -element in web.config : <elmah> <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKey=\"API_KEY\" logId=\"LOG_ID\" /> </elmah> If you didn't utilize elmah.io's code from C#, you are ready to rock and roll. Code changes The 3.x client is auto-generated from our new Swagger endpoint. This means that the code doesn't work like previously. We have tried to create extension methods to make some of the API work like previously, but since the client now supports both Messages, Logs, and Deployments, code changes are needed. If you are using the ErrorSignal class from ELMAH (the open-source project) to log exceptions manually, everything works as previously. If you are using methods from the Elmah.Io.Client package, there's a new API documented here: Logging from Console . Elmah.Io.Mvc and Elmah.Io.WebApi When launching the packages for 3.x, we also decided to create two new proxy packages: Elmah.Io.Mvc and Elmah.Io.WebApi. The reason I call them proxy packages is, that they do nothing more than simply install the dependencies needed to log from each framework. The packages are intended for new installs only, so if your code already logs exceptions to elmah.io, there is no need to install any of these packages.","title":"Upgrade elmah.io from v2 to v3"},{"location":"upgrade-elmah-io-from-v2-to-v3/#upgrade-elmahio-from-v2-to-v3","text":"When we launched the new version of our API ( v3 ), we used the jump in major version to fix some issues that would require major changes in our client. One of them is a move to netstandard, which makes the new client usable from .NET Core. With interface changes in the client, upgrading from 2.x to 3.x requires more than simply upgrading the NuGet package. This is a guide to upgrading the Elmah.Io package. Note If you are logging to elmah.io from ASP.NET Core, you are already using the 3.x client.","title":"Upgrade elmah.io from v2 to v3"},{"location":"upgrade-elmah-io-from-v2-to-v3/#updating-the-nuget-package","text":"First, you need to upgrade the Elmah.Io NuGet package: Update-Package Elmah.Io This installs the latest 3.x client. After doing so, we recommend updating to the latest Elmah.Io.Client package as well (updating Elmah.Io already updated Elmah.Io.Client but to the lowest possible version): Update-Package Elmah.Io.Client The elmah.io.core package is no longer needed and can be uninstalled: Uninstall-Package elmah.io.core Next, you will need to add your API key to your web.config . Where the 2.x client only required a log ID to log messages to elmah.io, the new API improves security by introducing API keys ( Where is my API key? ). Copy your API key and extend the errorLog -element in web.config : <elmah> <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKey=\"API_KEY\" logId=\"LOG_ID\" /> </elmah> If you didn't utilize elmah.io's code from C#, you are ready to rock and roll.","title":"Updating the NuGet package"},{"location":"upgrade-elmah-io-from-v2-to-v3/#code-changes","text":"The 3.x client is auto-generated from our new Swagger endpoint. This means that the code doesn't work like previously. We have tried to create extension methods to make some of the API work like previously, but since the client now supports both Messages, Logs, and Deployments, code changes are needed. If you are using the ErrorSignal class from ELMAH (the open-source project) to log exceptions manually, everything works as previously. If you are using methods from the Elmah.Io.Client package, there's a new API documented here: Logging from Console .","title":"Code changes"},{"location":"upgrade-elmah-io-from-v2-to-v3/#elmahiomvc-and-elmahiowebapi","text":"When launching the packages for 3.x, we also decided to create two new proxy packages: Elmah.Io.Mvc and Elmah.Io.WebApi. The reason I call them proxy packages is, that they do nothing more than simply install the dependencies needed to log from each framework. The packages are intended for new installs only, so if your code already logs exceptions to elmah.io, there is no need to install any of these packages.","title":"Elmah.Io.Mvc and Elmah.Io.WebApi"},{"location":"upgrade-elmah-io-from-v3-to-v4/","text":"Upgrade elmah.io from v3 to v4 Upgrade elmah.io from v3 to v4 Upgrading Elmah.Io.Client Code changes Upgrading Elmah.Io.AspNetCore Code changes Troubleshooting There is a new major version update named 4.x on all client packages. All integrations are based on the Elmah.Io.Client package which has switched from using AutoRest to NSwag. We have tried supporting most of the existing code from the 3.x packages, but some minor code changes may be needed after upgrading. This guide will go through the changes needed and potential problems when upgrading. You may experience problems where NuGet refuses to upgrade an Elmah.Io.* package. We experienced this when referencing more Elmah.Io.* packages from the same project. Like if you would reference both Elmah.Io.AspNetCore and Elmah.Io.Extensions.Logging from the same project. Upgrading in this scenario can be achieved in one of the following ways: Uninstall all Elmah.Io.* packages and install them one by one. Install the 4.x version of the Elmah.Io.Client NuGet package. Then upgrade the remaining Elmah.Io.* NuGet packages one by one. Finally, uninstall the Elmah.Io.Client package. Upgrading Elmah.Io.Client If you are using the Elmah.Io.Client package directly, you can simply upgrade that package through NuGet: Update-Package Elmah.Io.Client This installs the latest 4.x client. Most people are using one of the integrations with ASP.NET Core, Serilog, NLog, or similar. There are new major versions of these packages available as well. Code changes As mentioned, some code changes may be required on your part after upgrading. Most of the API stayed the same, but NSwag generates output differently from AutoRest in some cases. Here's a list of changes needed: Remove any references to Elmah.Io.Client.Models . All generated classes are now in the Elmah.Io.Client namespace. Replace any reference to IMessages , IHeartbeats , and similar to IMessagesClient , IHeartbeatsClient , and similar. Replace any instances of new ElmahioAPI(new ApiKeyCredentials(apiKey)); with ElmahioAPI.Create(apiKey); . The ApiKeyCredentials class was specific to AutoRest and has therefore been removed. Collection types on messages like Data , ServerVariables , etc. are now of type ICollection and not IList . This means you can no longer use indexers on these properties. To use indexer you can call ToList() on each collection. Properties of type DateTime are replaced with DateTimeOffset . This shouldn't require any changes on your part since you can assign a value of type DateTime to a property of type DateTimeOffset . You no longer need to make the following cast: (ElmahioAPI)ElmahioAPI.Create(apiKey) . The IElmahioAPI interface will have all the properties you need from the client. If you for some reason manually installed the Microsoft.Rest.ClientRuntime package you can remove that after upgrading Elmah.Io.Client to v4. Unless you have other dependencies on Microsoft.Rest.ClientRuntime . The OnMessageFail event, available on the IMessagesClient interface (previously just IMessages ), does now trigger more often. On v3, this event would only trigger on timeouts connecting with the server, when the server returned 500 , and similar. In v4, the event will trigger on every failing request, meaning a request where the response contains a status code >= 400 . This will make it a lot easier to make smart choices on the client when something fails. An example of this could be to implement a circuit breaker pattern or a local processing queue on the client when the elmah.io API starts returning 429 (too many requests). Upgrading Elmah.Io.AspNetCore Upgrading the Elmah.Io.AspNetCore package can be done through NuGet: Update-Package Elmah.Io.AspNetCore Code changes Besides the changes mentioned in the section about the Elmah.Io.Client package, there's a single change in the Elmah.Io.AspNetCore v4 package as well: The ElmahIoExtensions class has been moved from the Elmah.Io.AspNetCore namespace to the Microsoft.Extensions.DependencyInjection namespace. The ElmahIoExtensions class contains the UseElmahIo and AddElmahIo methods that you call in your Startup.cs file. This change should not cause any compile errors. For simple installations without custom options, you can most likely remove the using Elmah.Io.AspNetCore; line from the Startup.cs file. Visual Studio will tell if that line is no longer needed. Troubleshooting Could not load file or assembly 'Newtonsoft.Json, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed' Elmah.Io.Client requires Newtonsoft.Json version 10.0.3 or newer. Please upgrade to fix this error.","title":"Upgrade elmah.io from v3 to v4"},{"location":"upgrade-elmah-io-from-v3-to-v4/#upgrade-elmahio-from-v3-to-v4","text":"Upgrade elmah.io from v3 to v4 Upgrading Elmah.Io.Client Code changes Upgrading Elmah.Io.AspNetCore Code changes Troubleshooting There is a new major version update named 4.x on all client packages. All integrations are based on the Elmah.Io.Client package which has switched from using AutoRest to NSwag. We have tried supporting most of the existing code from the 3.x packages, but some minor code changes may be needed after upgrading. This guide will go through the changes needed and potential problems when upgrading. You may experience problems where NuGet refuses to upgrade an Elmah.Io.* package. We experienced this when referencing more Elmah.Io.* packages from the same project. Like if you would reference both Elmah.Io.AspNetCore and Elmah.Io.Extensions.Logging from the same project. Upgrading in this scenario can be achieved in one of the following ways: Uninstall all Elmah.Io.* packages and install them one by one. Install the 4.x version of the Elmah.Io.Client NuGet package. Then upgrade the remaining Elmah.Io.* NuGet packages one by one. Finally, uninstall the Elmah.Io.Client package.","title":"Upgrade elmah.io from v3 to v4"},{"location":"upgrade-elmah-io-from-v3-to-v4/#upgrading-elmahioclient","text":"If you are using the Elmah.Io.Client package directly, you can simply upgrade that package through NuGet: Update-Package Elmah.Io.Client This installs the latest 4.x client. Most people are using one of the integrations with ASP.NET Core, Serilog, NLog, or similar. There are new major versions of these packages available as well.","title":"Upgrading Elmah.Io.Client"},{"location":"upgrade-elmah-io-from-v3-to-v4/#code-changes","text":"As mentioned, some code changes may be required on your part after upgrading. Most of the API stayed the same, but NSwag generates output differently from AutoRest in some cases. Here's a list of changes needed: Remove any references to Elmah.Io.Client.Models . All generated classes are now in the Elmah.Io.Client namespace. Replace any reference to IMessages , IHeartbeats , and similar to IMessagesClient , IHeartbeatsClient , and similar. Replace any instances of new ElmahioAPI(new ApiKeyCredentials(apiKey)); with ElmahioAPI.Create(apiKey); . The ApiKeyCredentials class was specific to AutoRest and has therefore been removed. Collection types on messages like Data , ServerVariables , etc. are now of type ICollection and not IList . This means you can no longer use indexers on these properties. To use indexer you can call ToList() on each collection. Properties of type DateTime are replaced with DateTimeOffset . This shouldn't require any changes on your part since you can assign a value of type DateTime to a property of type DateTimeOffset . You no longer need to make the following cast: (ElmahioAPI)ElmahioAPI.Create(apiKey) . The IElmahioAPI interface will have all the properties you need from the client. If you for some reason manually installed the Microsoft.Rest.ClientRuntime package you can remove that after upgrading Elmah.Io.Client to v4. Unless you have other dependencies on Microsoft.Rest.ClientRuntime . The OnMessageFail event, available on the IMessagesClient interface (previously just IMessages ), does now trigger more often. On v3, this event would only trigger on timeouts connecting with the server, when the server returned 500 , and similar. In v4, the event will trigger on every failing request, meaning a request where the response contains a status code >= 400 . This will make it a lot easier to make smart choices on the client when something fails. An example of this could be to implement a circuit breaker pattern or a local processing queue on the client when the elmah.io API starts returning 429 (too many requests).","title":"Code changes"},{"location":"upgrade-elmah-io-from-v3-to-v4/#upgrading-elmahioaspnetcore","text":"Upgrading the Elmah.Io.AspNetCore package can be done through NuGet: Update-Package Elmah.Io.AspNetCore","title":"Upgrading Elmah.Io.AspNetCore"},{"location":"upgrade-elmah-io-from-v3-to-v4/#code-changes_1","text":"Besides the changes mentioned in the section about the Elmah.Io.Client package, there's a single change in the Elmah.Io.AspNetCore v4 package as well: The ElmahIoExtensions class has been moved from the Elmah.Io.AspNetCore namespace to the Microsoft.Extensions.DependencyInjection namespace. The ElmahIoExtensions class contains the UseElmahIo and AddElmahIo methods that you call in your Startup.cs file. This change should not cause any compile errors. For simple installations without custom options, you can most likely remove the using Elmah.Io.AspNetCore; line from the Startup.cs file. Visual Studio will tell if that line is no longer needed.","title":"Code changes"},{"location":"upgrade-elmah-io-from-v3-to-v4/#troubleshooting","text":"Could not load file or assembly 'Newtonsoft.Json, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed' Elmah.Io.Client requires Newtonsoft.Json version 10.0.3 or newer. Please upgrade to fix this error.","title":"Troubleshooting"},{"location":"upgrade-elmah-io-from-v4-to-v5/","text":"Upgrade elmah.io from v4 to v5 Upgrade elmah.io from v4 to v5 Upgrading Elmah.Io.Client Code changes Upgrading Elmah.Io.AspNetCore Code changes Upgrading Serilog.Sinks.ElmahIo Code changes Upgrading Elmah.Io.NLog Code changes Upgrading Elmah.Io.Umbraco Code changes There is a new major version update named 5.x on all client packages. We have tried supporting most of the existing code from the 4.x packages, but some minor code changes may be needed after upgrading. This guide will go through the changes needed and potential problems when upgrading. You may experience problems where NuGet refuses to upgrade an Elmah.Io.* package. We experienced this when referencing more Elmah.Io.* packages from the same project. Like if you would reference both Elmah.Io.AspNetCore and Elmah.Io.Extensions.Logging from the same project. Upgrading in this scenario can be achieved in one of the following ways: Uninstall all Elmah.Io.* packages and install them one by one. Install the 5.x version of the Elmah.Io.Client NuGet package. Then upgrade the remaining Elmah.Io.* NuGet packages one by one. Finally, uninstall the Elmah.Io.Client package. Upgrading Elmah.Io.Client If you are using the Elmah.Io.Client package directly, you can simply upgrade that package through NuGet: Update-Package Elmah.Io.Client This installs the latest 5.x client. Most people are using one of the integrations with ASP.NET Core, Serilog, NLog, or similar. There are new major versions of these packages available as well. Code changes We used the major version number upgrade to clean up the double methods problem introduced back when adding overloads with CancellationToken on all async methods. This means that async methods now only have a single version looking similar to this: Task<Message> CreateAndNotifyAsync( Guid logId, CreateMessage message, CancellationToken cancellationToken = default) This shouldn't cause any compile problems since the v4 version had the following two overloads: Task<Message> CreateAndNotifyAsync( Guid logId, CreateMessage message) Task<Message> CreateAndNotifyAsync( Guid logId, CreateMessage message, CancellationToken cancellationToken = default) In addition, we removed all code marked as Obsolete . Each section below will describe what has been removed for each package. For the Elmah.Io.Client package, the HttpClient property on the IElmahioAPI interface has been removed. If you need to provide a custom HttpClient for the client, you can use the following overload of the Create method on the ElmahioAPI class: public static IElmahioAPI Create(string apiKey, ElmahIoOptions options, HttpClient httpClient) Upgrading Elmah.Io.AspNetCore Upgrading the Elmah.Io.AspNetCore package can be done through NuGet: Update-Package Elmah.Io.AspNetCore Code changes Besides the changes mentioned in the section about the Elmah.Io.Client package, the following obsolete method has been removed from the IHealthChecksBuilder interface: public static IHealthChecksBuilder AddElmahIoPublisher( this IHealthChecksBuilder builder, string apiKey, Guid logId, string application = null) Instead, use the AddElmahIoPublisher method accepting options: public static IHealthChecksBuilder AddElmahIoPublisher( this IHealthChecksBuilder builder, Action<ElmahIoPublisherOptions> options) Upgrading Serilog.Sinks.ElmahIo Upgrading the Serilog.Sinks.ElmahIo package can be done through NuGet: Update-Package Serilog.Sinks.ElmahIo Code changes v5 of the Serilog.Sinks.ElmahIo package moves to Serilog 3. Serilog 3 contains a lot of changes which are fully documented here . Your code may need updates caused by changes in the Serilog package. Besides the changes mentioned in the section about the Elmah.Io.Client package, the following obsolete methods have been removed from the LoggerSinkConfiguration class: public static LoggerConfiguration ElmahIo( this LoggerSinkConfiguration loggerConfiguration, string apiKey, string logId, LogEventLevel restrictedToMinimumLevel = LevelAlias.Minimum, IFormatProvider formatProvider = null) public static LoggerConfiguration ElmahIo( this LoggerSinkConfiguration loggerConfiguration, string apiKey, Guid logId, LogEventLevel restrictedToMinimumLevel = LevelAlias.Minimum, IFormatProvider formatProvider = null) Instead, use the ElmahIo method accepting options: public static LoggerConfiguration ElmahIo( this LoggerSinkConfiguration loggerConfiguration, ElmahIoSinkOptions options) Upgrading Elmah.Io.NLog Upgrading the Elmah.Io.NLog package can be done through NuGet: Update-Package Elmah.Io.NLog Unlike other packages, Elmah.Io.NLog had a version 5.0.38 that was built on top of Elmah.Io.Client v4 and NLog v5. Going forward we recommend using Elmah.Io.NLog version 5.1.x which is built on top of the v5 version of Elmah.Io.Client . Code changes v5 of the Elmah.Io.NLog package moves to NLog 5. NLog 5 contains a lot of changes that are fully documented here . Your code may need updates caused by changes in the NLog package. Upgrading Elmah.Io.Umbraco Upgrading the Elmah.Io.Umbraco package can be done through NuGet: Update-Package Elmah.Io.Umbraco Code changes v5 of the Elmah.Io.Umbraco package moves to Umbraco 10. For earlier versions of Umbraco, check out our documentation here . Since Umbraco 10 is built on top of ASP.NET Core, pretty much everything in the v5 version of the Elmah.Io.Umbraco package is a breaking change. The package now relies on the Elmah.Io.AspNetCore package documented above. We recommend completely uninstalling any Elmah.Io.* NuGet packages and install the Elmah.Io.Umbraco package from scratch.","title":"Upgrade elmah.io from v4 to v5"},{"location":"upgrade-elmah-io-from-v4-to-v5/#upgrade-elmahio-from-v4-to-v5","text":"Upgrade elmah.io from v4 to v5 Upgrading Elmah.Io.Client Code changes Upgrading Elmah.Io.AspNetCore Code changes Upgrading Serilog.Sinks.ElmahIo Code changes Upgrading Elmah.Io.NLog Code changes Upgrading Elmah.Io.Umbraco Code changes There is a new major version update named 5.x on all client packages. We have tried supporting most of the existing code from the 4.x packages, but some minor code changes may be needed after upgrading. This guide will go through the changes needed and potential problems when upgrading. You may experience problems where NuGet refuses to upgrade an Elmah.Io.* package. We experienced this when referencing more Elmah.Io.* packages from the same project. Like if you would reference both Elmah.Io.AspNetCore and Elmah.Io.Extensions.Logging from the same project. Upgrading in this scenario can be achieved in one of the following ways: Uninstall all Elmah.Io.* packages and install them one by one. Install the 5.x version of the Elmah.Io.Client NuGet package. Then upgrade the remaining Elmah.Io.* NuGet packages one by one. Finally, uninstall the Elmah.Io.Client package.","title":"Upgrade elmah.io from v4 to v5"},{"location":"upgrade-elmah-io-from-v4-to-v5/#upgrading-elmahioclient","text":"If you are using the Elmah.Io.Client package directly, you can simply upgrade that package through NuGet: Update-Package Elmah.Io.Client This installs the latest 5.x client. Most people are using one of the integrations with ASP.NET Core, Serilog, NLog, or similar. There are new major versions of these packages available as well.","title":"Upgrading Elmah.Io.Client"},{"location":"upgrade-elmah-io-from-v4-to-v5/#code-changes","text":"We used the major version number upgrade to clean up the double methods problem introduced back when adding overloads with CancellationToken on all async methods. This means that async methods now only have a single version looking similar to this: Task<Message> CreateAndNotifyAsync( Guid logId, CreateMessage message, CancellationToken cancellationToken = default) This shouldn't cause any compile problems since the v4 version had the following two overloads: Task<Message> CreateAndNotifyAsync( Guid logId, CreateMessage message) Task<Message> CreateAndNotifyAsync( Guid logId, CreateMessage message, CancellationToken cancellationToken = default) In addition, we removed all code marked as Obsolete . Each section below will describe what has been removed for each package. For the Elmah.Io.Client package, the HttpClient property on the IElmahioAPI interface has been removed. If you need to provide a custom HttpClient for the client, you can use the following overload of the Create method on the ElmahioAPI class: public static IElmahioAPI Create(string apiKey, ElmahIoOptions options, HttpClient httpClient)","title":"Code changes"},{"location":"upgrade-elmah-io-from-v4-to-v5/#upgrading-elmahioaspnetcore","text":"Upgrading the Elmah.Io.AspNetCore package can be done through NuGet: Update-Package Elmah.Io.AspNetCore","title":"Upgrading Elmah.Io.AspNetCore"},{"location":"upgrade-elmah-io-from-v4-to-v5/#code-changes_1","text":"Besides the changes mentioned in the section about the Elmah.Io.Client package, the following obsolete method has been removed from the IHealthChecksBuilder interface: public static IHealthChecksBuilder AddElmahIoPublisher( this IHealthChecksBuilder builder, string apiKey, Guid logId, string application = null) Instead, use the AddElmahIoPublisher method accepting options: public static IHealthChecksBuilder AddElmahIoPublisher( this IHealthChecksBuilder builder, Action<ElmahIoPublisherOptions> options)","title":"Code changes"},{"location":"upgrade-elmah-io-from-v4-to-v5/#upgrading-serilogsinkselmahio","text":"Upgrading the Serilog.Sinks.ElmahIo package can be done through NuGet: Update-Package Serilog.Sinks.ElmahIo","title":"Upgrading Serilog.Sinks.ElmahIo"},{"location":"upgrade-elmah-io-from-v4-to-v5/#code-changes_2","text":"v5 of the Serilog.Sinks.ElmahIo package moves to Serilog 3. Serilog 3 contains a lot of changes which are fully documented here . Your code may need updates caused by changes in the Serilog package. Besides the changes mentioned in the section about the Elmah.Io.Client package, the following obsolete methods have been removed from the LoggerSinkConfiguration class: public static LoggerConfiguration ElmahIo( this LoggerSinkConfiguration loggerConfiguration, string apiKey, string logId, LogEventLevel restrictedToMinimumLevel = LevelAlias.Minimum, IFormatProvider formatProvider = null) public static LoggerConfiguration ElmahIo( this LoggerSinkConfiguration loggerConfiguration, string apiKey, Guid logId, LogEventLevel restrictedToMinimumLevel = LevelAlias.Minimum, IFormatProvider formatProvider = null) Instead, use the ElmahIo method accepting options: public static LoggerConfiguration ElmahIo( this LoggerSinkConfiguration loggerConfiguration, ElmahIoSinkOptions options)","title":"Code changes"},{"location":"upgrade-elmah-io-from-v4-to-v5/#upgrading-elmahionlog","text":"Upgrading the Elmah.Io.NLog package can be done through NuGet: Update-Package Elmah.Io.NLog Unlike other packages, Elmah.Io.NLog had a version 5.0.38 that was built on top of Elmah.Io.Client v4 and NLog v5. Going forward we recommend using Elmah.Io.NLog version 5.1.x which is built on top of the v5 version of Elmah.Io.Client .","title":"Upgrading Elmah.Io.NLog"},{"location":"upgrade-elmah-io-from-v4-to-v5/#code-changes_3","text":"v5 of the Elmah.Io.NLog package moves to NLog 5. NLog 5 contains a lot of changes that are fully documented here . Your code may need updates caused by changes in the NLog package.","title":"Code changes"},{"location":"upgrade-elmah-io-from-v4-to-v5/#upgrading-elmahioumbraco","text":"Upgrading the Elmah.Io.Umbraco package can be done through NuGet: Update-Package Elmah.Io.Umbraco","title":"Upgrading Elmah.Io.Umbraco"},{"location":"upgrade-elmah-io-from-v4-to-v5/#code-changes_4","text":"v5 of the Elmah.Io.Umbraco package moves to Umbraco 10. For earlier versions of Umbraco, check out our documentation here . Since Umbraco 10 is built on top of ASP.NET Core, pretty much everything in the v5 version of the Elmah.Io.Umbraco package is a breaking change. The package now relies on the Elmah.Io.AspNetCore package documented above. We recommend completely uninstalling any Elmah.Io.* NuGet packages and install the Elmah.Io.Umbraco package from scratch.","title":"Code changes"},{"location":"uptime-monitoring-troubleshooting/","text":"Uptime Monitoring Troubleshooting Cloudflare Super Bot Fight Mode disallows the elmah.io uptime user-agent We have tried to get Cloudflare to adopt the elmah.io Uptime user-agent as an allowed bot. This is not possible since bots need to come from a fixed set of IPs which is not possible when hosting on Microsoft Azure. To allow the elmah.io Uptime user-agent you can create a new firewall rule. To do so go to Security | WAF and select the Custom rules tab. Click the Create rule button and input the following values:","title":"Uptime Monitoring Troubleshooting"},{"location":"uptime-monitoring-troubleshooting/#uptime-monitoring-troubleshooting","text":"","title":"Uptime Monitoring Troubleshooting"},{"location":"uptime-monitoring-troubleshooting/#cloudflare-super-bot-fight-mode-disallows-the-elmahio-uptime-user-agent","text":"We have tried to get Cloudflare to adopt the elmah.io Uptime user-agent as an allowed bot. This is not possible since bots need to come from a fixed set of IPs which is not possible when hosting on Microsoft Azure. To allow the elmah.io Uptime user-agent you can create a new firewall rule. To do so go to Security | WAF and select the Custom rules tab. Click the Create rule button and input the following values:","title":"Cloudflare Super Bot Fight Mode disallows the elmah.io uptime user-agent"},{"location":"use-extended-user-details-without-email-as-id/","text":"Use extended user details without email as ID Most of our integrations automatically log the user identity as part of the error. To make that happen, packages typically use the identity object on the current thread, which gets set by most authentication frameworks for .NET (like ASP.NET Membership Provider and ASP.NET Core Identity). You may use the user's email as the key or a database identifier. If you are using an email, you are already covered and able to see Extended User Details. If not, you need to provide elmah.io with a little help. To tell elmah.io about the user's email and still keep the identifier in the user field, you can enrich the message with a piece of custom data, before sending it off to elmah.io. By putting the user's email in a Data item named X-ELMAHIO-USEREMAIL Extended User Details will pick this up and show the correct user. How you set the Data item is dependent on the elmah.io NuGet package you are using. For ASP.NET, MVC, or Web API, the code could look like this: Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client var logger = ErrorLog.Client; logger.OnMessage += (sender, args) => { if (string.IsNullOrWhiteSpace(args.Message.User)) return; var db = /*...*/; var user = db.GetById<User>(args.Message.User); args.Message.Data.Add(new Item {Key = \"X-ELMAHIO-USEREMAIL\", Value = user.Email}); } For ASP.NET Core the code could look like this: builder.Services.AddElmahIo(o => { // ... o.OnMessage = message => { if (string.IsNullOrWhiteSpace(message.User)) return; var db = /*...*/; var user = db.GetById<User>(message.User); message.Data.Add(new Item {Key = \"X-ELMAHIO-USEREMAIL\", Value = user.Email}); }; }); OnMessage event handlers are executed just before a message is sent to elmah.io. In the body of the event handler, the user's email is fetched from the database by calling the GetById method. How you will be able to convert the user ID to an email depends on your tech stack, but you get the picture. That's it! A few lines of code and you can watch every little detail about the users experiencing problems on your website:","title":"Use extended user details without email as ID"},{"location":"use-extended-user-details-without-email-as-id/#use-extended-user-details-without-email-as-id","text":"Most of our integrations automatically log the user identity as part of the error. To make that happen, packages typically use the identity object on the current thread, which gets set by most authentication frameworks for .NET (like ASP.NET Membership Provider and ASP.NET Core Identity). You may use the user's email as the key or a database identifier. If you are using an email, you are already covered and able to see Extended User Details. If not, you need to provide elmah.io with a little help. To tell elmah.io about the user's email and still keep the identifier in the user field, you can enrich the message with a piece of custom data, before sending it off to elmah.io. By putting the user's email in a Data item named X-ELMAHIO-USEREMAIL Extended User Details will pick this up and show the correct user. How you set the Data item is dependent on the elmah.io NuGet package you are using. For ASP.NET, MVC, or Web API, the code could look like this: Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client var logger = ErrorLog.Client; logger.OnMessage += (sender, args) => { if (string.IsNullOrWhiteSpace(args.Message.User)) return; var db = /*...*/; var user = db.GetById<User>(args.Message.User); args.Message.Data.Add(new Item {Key = \"X-ELMAHIO-USEREMAIL\", Value = user.Email}); } For ASP.NET Core the code could look like this: builder.Services.AddElmahIo(o => { // ... o.OnMessage = message => { if (string.IsNullOrWhiteSpace(message.User)) return; var db = /*...*/; var user = db.GetById<User>(message.User); message.Data.Add(new Item {Key = \"X-ELMAHIO-USEREMAIL\", Value = user.Email}); }; }); OnMessage event handlers are executed just before a message is sent to elmah.io. In the body of the event handler, the user's email is fetched from the database by calling the GetById method. How you will be able to convert the user ID to an email depends on your tech stack, but you get the picture. That's it! A few lines of code and you can watch every little detail about the users experiencing problems on your website:","title":"Use extended user details without email as ID"},{"location":"use-multiple-logs-for-different-environments/","text":"Use multiple logs for different environments We bet that you use at least two environments for hosting your website: localhost and a production environment. You probably need to log website errors on all your environments, but you don\u2019t want to mix errors from different environments in the same error log. Lucky for you, Microsoft provides a great way of differentiating configuration for different environments called Web Config transformation . Tip To avoid spending numerous hours of debugging, remember that Web Config transformations are only run on deploy and not on build. In other words, deploy your website using Visual Studio, MSBuild, or third for the transformations to replace the right ELMAH config. Whether or not you want errors from localhost logged on elmah.io, start by installing the Elmah.Io NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io Install-Package Elmah.Io <PackageReference Include=\"Elmah.Io\" Version=\"5.*\" /> paket add Elmah.Io Then choose one of the two paths below. Tip Our Web.config transformations - The definitive syntax guide contains general information about how transformations work and you can use the Web.config Transformation Tester to validate transformation files. Logging to elmah.io from both localhost and production Create two new logs at the elmah.io website called something like \u201cMy website\u201d and \u201cMy website development\u201d. The naming isn\u2019t really important, so pick something telling. During installation of the elmah.io package, NuGet will ask you for your elmah.io log id. In this dialog input the log id from the log named \u201cMy website development\u201d. The default configuration is used when running your website locally. When installed open the web.release.config file and add the following code: <elmah xdt:Transform=\"Replace\"> <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKey=\"API_KEY\" logId=\"LOG_ID\" /> <security allowRemoteAccess=\"false\" /> </elmah> Replace the API_KEY with your API key ( Where is my API key? ) and LOG_ID with your log ID ( Where is my log ID? ). For more information about Web.config transformations, check out the blog post Web.config transformations - The definitive syntax guide . For help debugging problems, we have created the Web.config Transformation Tester . That\u2019s it! You can now build and deploy your website using different configurations. When nothing is changed, Visual Studio will build your website using the Debug configuration. This configuration looks for the ELMAH code in the web.debug.config file. We didn\u2019t add any ELMAH configuration to this file, why the default values from web.config are used. When selecting the Release configuration, Web. Config transformations will replace the default values in web.config with the new ELMAH configuration from web.release.config . Logging to elmah.io from production only During the installation, NuGet will ask you for your elmah.io log id. You don't need to write anything in this dialog since we will remove the default elmah.io config in a moment. When installed open the web.config file and locate the <elmah> element. Remove the <errorLog> element and set the allowRemoveAccess attribute to true . Your configuration should look like this now: <elmah> <security allowRemoteAccess=\"true\" /> </elmah> Open the web.release.config file and insert the following code: <elmah xdt:Transform=\"Replace\"> <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKey=\"API_KEY\" logId=\"LOG_ID\" /> <security allowRemoteAccess=\"false\" /> </elmah> Like above, replace API_KEY and LOG_ID with the correct values. Errors happening on your local machine will be logged using ELMAH's default error logger (in-memory) and errors happening in production will be logged to elmah.io.","title":"Use multiple logs for different environments"},{"location":"use-multiple-logs-for-different-environments/#use-multiple-logs-for-different-environments","text":"We bet that you use at least two environments for hosting your website: localhost and a production environment. You probably need to log website errors on all your environments, but you don\u2019t want to mix errors from different environments in the same error log. Lucky for you, Microsoft provides a great way of differentiating configuration for different environments called Web Config transformation . Tip To avoid spending numerous hours of debugging, remember that Web Config transformations are only run on deploy and not on build. In other words, deploy your website using Visual Studio, MSBuild, or third for the transformations to replace the right ELMAH config. Whether or not you want errors from localhost logged on elmah.io, start by installing the Elmah.Io NuGet package: .NET CLI Package Manager PackageReference Paket CLI dotnet add package Elmah.Io Install-Package Elmah.Io <PackageReference Include=\"Elmah.Io\" Version=\"5.*\" /> paket add Elmah.Io Then choose one of the two paths below. Tip Our Web.config transformations - The definitive syntax guide contains general information about how transformations work and you can use the Web.config Transformation Tester to validate transformation files.","title":"Use multiple logs for different environments"},{"location":"use-multiple-logs-for-different-environments/#logging-to-elmahio-from-both-localhost-and-production","text":"Create two new logs at the elmah.io website called something like \u201cMy website\u201d and \u201cMy website development\u201d. The naming isn\u2019t really important, so pick something telling. During installation of the elmah.io package, NuGet will ask you for your elmah.io log id. In this dialog input the log id from the log named \u201cMy website development\u201d. The default configuration is used when running your website locally. When installed open the web.release.config file and add the following code: <elmah xdt:Transform=\"Replace\"> <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKey=\"API_KEY\" logId=\"LOG_ID\" /> <security allowRemoteAccess=\"false\" /> </elmah> Replace the API_KEY with your API key ( Where is my API key? ) and LOG_ID with your log ID ( Where is my log ID? ). For more information about Web.config transformations, check out the blog post Web.config transformations - The definitive syntax guide . For help debugging problems, we have created the Web.config Transformation Tester . That\u2019s it! You can now build and deploy your website using different configurations. When nothing is changed, Visual Studio will build your website using the Debug configuration. This configuration looks for the ELMAH code in the web.debug.config file. We didn\u2019t add any ELMAH configuration to this file, why the default values from web.config are used. When selecting the Release configuration, Web. Config transformations will replace the default values in web.config with the new ELMAH configuration from web.release.config .","title":"Logging to elmah.io from both localhost and production"},{"location":"use-multiple-logs-for-different-environments/#logging-to-elmahio-from-production-only","text":"During the installation, NuGet will ask you for your elmah.io log id. You don't need to write anything in this dialog since we will remove the default elmah.io config in a moment. When installed open the web.config file and locate the <elmah> element. Remove the <errorLog> element and set the allowRemoveAccess attribute to true . Your configuration should look like this now: <elmah> <security allowRemoteAccess=\"true\" /> </elmah> Open the web.release.config file and insert the following code: <elmah xdt:Transform=\"Replace\"> <errorLog type=\"Elmah.Io.ErrorLog, Elmah.Io\" apiKey=\"API_KEY\" logId=\"LOG_ID\" /> <security allowRemoteAccess=\"false\" /> </elmah> Like above, replace API_KEY and LOG_ID with the correct values. Errors happening on your local machine will be logged using ELMAH's default error logger (in-memory) and errors happening in production will be logged to elmah.io.","title":"Logging to elmah.io from production only"},{"location":"using-different-logs-per-environment-in-aspnet-core/","text":"Using different logs per environment in ASP.NET Core We are often asked the question: Should I create a log per environment and how do I set it up with ASP.NET Core? Creating a log per environment (staging, production, etc.) is a good idea since you probably want different notification rules and/or user access depending on the environment. This document provides a range of possibilities for setting up a log per environment. Note This document is intended for the Elmah.Io.AspNetCore package only. You can use the same approach for Elmah.Io.Extensions.Logging but we recommend using log filtering in the appsettings.json file or through C# instead. Using appsettings.{Environment}.json All ASP.NET Core websites read an environment variable named ASPNETCORE_ENVIRONMENT . The value can be used to set config variables depending on the current environment. The feature works a bit like Web.config transformations that you may remember from the good old ASP.NET days. The value of ASPNETCORE_ENVIRONMENT can be tailored to your need but the following three values are provided out of the box: Development , Staging , and Production . To only add elmah.io when on staging or production, you can add the following code when setting up the elmah.io middleware: if (builder.Environment.IsProduction() || builder.Environment.IsStaging()) { app.UseElmahIo(); } To create errors in different logs depending on the current environment, create two new files: appsettings.staging.json and appsettings.production.json . Add the ElmahIo config section to both files: { \"ElmahIo\": { \"ApiKey\": \"API_KEY\", \"LogId\": \"LOG_ID\" } } Inside each file, replace API_KEY with your API key and LOG_ID with the different log IDs. The downside of this approach is that you have your production API key and log ID in source control. Using Azure Application settings If you are hosting on Azure (other cloud hosting platforms have a similar feature), you can utilize the built-in Application settings feature to avoid adding API keys and log IDs to source control. Using application settings requires you to specify your elmah.io configuration in the appsettings.json file or one of the environment-specific files as shown above. To replace the values inside the ApiKey and LogId properties, use the colon syntax as shown here: (replace API_KEY and LOG_ID with your staging or production values depending on which environment you are configuring)","title":"Using different logs per environment in ASP.NET Core"},{"location":"using-different-logs-per-environment-in-aspnet-core/#using-different-logs-per-environment-in-aspnet-core","text":"We are often asked the question: Should I create a log per environment and how do I set it up with ASP.NET Core? Creating a log per environment (staging, production, etc.) is a good idea since you probably want different notification rules and/or user access depending on the environment. This document provides a range of possibilities for setting up a log per environment. Note This document is intended for the Elmah.Io.AspNetCore package only. You can use the same approach for Elmah.Io.Extensions.Logging but we recommend using log filtering in the appsettings.json file or through C# instead.","title":"Using different logs per environment in ASP.NET Core"},{"location":"using-different-logs-per-environment-in-aspnet-core/#using-appsettingsenvironmentjson","text":"All ASP.NET Core websites read an environment variable named ASPNETCORE_ENVIRONMENT . The value can be used to set config variables depending on the current environment. The feature works a bit like Web.config transformations that you may remember from the good old ASP.NET days. The value of ASPNETCORE_ENVIRONMENT can be tailored to your need but the following three values are provided out of the box: Development , Staging , and Production . To only add elmah.io when on staging or production, you can add the following code when setting up the elmah.io middleware: if (builder.Environment.IsProduction() || builder.Environment.IsStaging()) { app.UseElmahIo(); } To create errors in different logs depending on the current environment, create two new files: appsettings.staging.json and appsettings.production.json . Add the ElmahIo config section to both files: { \"ElmahIo\": { \"ApiKey\": \"API_KEY\", \"LogId\": \"LOG_ID\" } } Inside each file, replace API_KEY with your API key and LOG_ID with the different log IDs. The downside of this approach is that you have your production API key and log ID in source control.","title":"Using appsettings.{Environment}.json"},{"location":"using-different-logs-per-environment-in-aspnet-core/#using-azure-application-settings","text":"If you are hosting on Azure (other cloud hosting platforms have a similar feature), you can utilize the built-in Application settings feature to avoid adding API keys and log IDs to source control. Using application settings requires you to specify your elmah.io configuration in the appsettings.json file or one of the environment-specific files as shown above. To replace the values inside the ApiKey and LogId properties, use the colon syntax as shown here: (replace API_KEY and LOG_ID with your staging or production values depending on which environment you are configuring)","title":"Using Azure Application settings"},{"location":"using-the-elmah-io-extension-for-visual-studio/","text":"Using the elmah.io extension for Visual Studio Being able to focus on .NET developers makes it possible to do all kinds of cool things. Like building an elmah.io extension for Visual Studio. That's exactly what we've done and here's how to use it. Installation Download the elmah.io extension for Visual Studio \u2264 2019 or Visual Studio 2022 from the Visual Studio Marketplace. Note Don't use the Extensions and Updates feature inside Visual Studio, since Visual Studio causes a problem with installing extensions in previous versions. Double/click the downloaded VSIX and enable elmah.io in the versions of Visual Studio of your choice. The extension supports Visual Studio 2015, 2017, 2019, and 2022. Usage Inside Visual Studio navigate to View | Other Windows | elmah.io or simply search for elmah.io in the Quick Launcher ( Ctrl + Q ). You'll see the elmah.io window somewhere. Click the Sign In button and sign in with a username/password or one of the social providers: If you are part of multiple elmah.io organizations, select the one you want to access: If this is the first time someone is browsing the chosen organization from Visual Studio, authorize the creation of a new API key: Once logged in, the list of logs is populated with all of your logs defined at elmah.io. Select a log and click the search icon: Log messages can be filtered by date range, full-text search, and using Lucene query language as already known from the elmah.io UI. To inspect a single message, double-click it and the message details window will open: The toolbar at the top provides a couple of options: View the message on elmah.io, hide the message and delete the message. Manually adding an API key If the login flow described above doesn\u2019t work, or if you prefer to use your own elmah.io API key, you can enter it manually through the extension options. In Visual Studio, go to Tools > Options > elmah.io and paste your API key: Make sure to use an API key with the following permissions: logs read messages read messages delete .","title":"Using the elmah.io extension for Visual Studio"},{"location":"using-the-elmah-io-extension-for-visual-studio/#using-the-elmahio-extension-for-visual-studio","text":"Being able to focus on .NET developers makes it possible to do all kinds of cool things. Like building an elmah.io extension for Visual Studio. That's exactly what we've done and here's how to use it.","title":"Using the elmah.io extension for Visual Studio"},{"location":"using-the-elmah-io-extension-for-visual-studio/#installation","text":"Download the elmah.io extension for Visual Studio \u2264 2019 or Visual Studio 2022 from the Visual Studio Marketplace. Note Don't use the Extensions and Updates feature inside Visual Studio, since Visual Studio causes a problem with installing extensions in previous versions. Double/click the downloaded VSIX and enable elmah.io in the versions of Visual Studio of your choice. The extension supports Visual Studio 2015, 2017, 2019, and 2022.","title":"Installation"},{"location":"using-the-elmah-io-extension-for-visual-studio/#usage","text":"Inside Visual Studio navigate to View | Other Windows | elmah.io or simply search for elmah.io in the Quick Launcher ( Ctrl + Q ). You'll see the elmah.io window somewhere. Click the Sign In button and sign in with a username/password or one of the social providers: If you are part of multiple elmah.io organizations, select the one you want to access: If this is the first time someone is browsing the chosen organization from Visual Studio, authorize the creation of a new API key: Once logged in, the list of logs is populated with all of your logs defined at elmah.io. Select a log and click the search icon: Log messages can be filtered by date range, full-text search, and using Lucene query language as already known from the elmah.io UI. To inspect a single message, double-click it and the message details window will open: The toolbar at the top provides a couple of options: View the message on elmah.io, hide the message and delete the message.","title":"Usage"},{"location":"using-the-elmah-io-extension-for-visual-studio/#manually-adding-an-api-key","text":"If the login flow described above doesn\u2019t work, or if you prefer to use your own elmah.io API key, you can enter it manually through the extension options. In Visual Studio, go to Tools > Options > elmah.io and paste your API key: Make sure to use an API key with the following permissions: logs read messages read messages delete .","title":"Manually adding an API key"},{"location":"using-the-rest-api/","text":"Using the REST API Using the REST API Security Messages Creating messages Getting a message Searching messages Deleting a message Deleting messages Hiding a message Fixing a message Under the hood, everything related to communicating with elmah.io happens through our REST API. In this article, we will present the possibilities of using the API in a use case-driven approach. For a detailed reference of the various endpoints, visit the API V3 documentation . Security Security is implemented using API keys ( Where is my API key? ). When creating a new organization, a default API key is automatically created. You can create new keys and revoke an existing key if you suspect that the key has been compromised. The API key acts as a secret and should not be available to people outside your team/organization. All requests to the elmah.io API needs the API key as either an HTTP header or query string parameter named api_key like this: GET https://api.elmah.io/v3/messages/LOG_ID?api_key=MY_API_KEY Messages Creating messages Before doing anything, we will need some messages to play with. The Create Message endpoint does just that. To create a simple message, POST to: POST https://api.elmah.io/v3/messages/LOG_ID with a JSON body: { \"title\": \"This is a test message\" } (replace LOG_ID with your log ID): The title field is the only required field on a message, but fields for specifying severity, timestamp, etc. are there. For more information, check out the documentation . If everything where successful, the API returns an HTTP status code of 201 and a location to where to fetch the new message. If the endpoint fails, the response will contain a description of what went wrong. Forgetting to set Content-Length , Content-Type and similar, will result in an invalid request. Getting a message In the example above, the API returned the URL for getting the newly created message: GET https://api.elmah.io/v3/messages/LOG_ID/81C7C282C9FDAEA3 By making a GET request to this URL, we get back the message details: { \"id\": \"99CDEA3D6A631F09\", \"title\": \"This is a test message\", \"dateTime\": \"2016-07-03T14:25:46.087857Z\", \"severity\": \"Information\" } As shown in the returned body, elmah.io automatically inserted some missing fields like a timestamp and a severity. If no severity is specified during creating, a message is treated as information. Searching messages For the demo, we have inserted a couple of additional messages, which leads us to the next endpoint: searching messages. The search endpoint shares the root path with the get message endpoint but only takes a log ID. The simplest possible configuration queries the API for a list of the 15 most recent messages by calling: GET https://api.elmah.io/v3/messages/LOG_ID The response body looks like this: { \"messages\": [ { \"id\": \"81C7C282C9FDAEA3\", \"title\": \"This is another test message\", \"dateTime\": \"2016-07-03T14:31:45.053851Z\", \"severity\": \"Information\" }, { \"id\": \"99CDEA3D6A631F09\", \"title\": \"This is a test message\", \"dateTime\": \"2016-07-03T14:25:46.087857Z\", \"severity\": \"Information\" }, // ... ], \"total\": 42 } For simplicity, the response has been simplified by not showing all of the results. The important thing to notice here is the list of messages and the total count. messages contain 15 messages, which is the default page size in the search endpoint. To increase the number of returned messages, set the pagesize parameter in the URL (max 100 messages per request). The total count tells you if more messages are matching your search. To select messages from the next page, use the pageindex parameter (or use the searchAfter property as shown later). Returning all messages may be fine, but being able to search by terms is even more fun. To search, use the query , from , and to parameters as shown here: GET https://api.elmah.io/v3/messages/LOG_ID?query=another Searching for another will return the following response: { \"messages\": [ { \"id\": \"81C7C282C9FDAEA3\", \"title\": \"This is another test message\", \"dateTime\": \"2016-07-03T14:25:46.087857Z\", \"severity\": \"Information\" } ], \"total\": 1 } Now only 81C7C282C9FDAEA3 shows up since that message contains the text another in the title field. Like specifying the query parameter, you can limit the number of messages using the from , to , and pageSize parameters. There is a limitation of using the pageSize and pageIndex parameters. The data is stored in Elasticsearch which doesn't allow pagination in more than 10,000 documents. If you need to fetch more than 10,000 documents from your log, we recommend breaking this up into weekly, daily, or hourly jobs instead of changing your job to fetch more than 10,000 messages. In case this is not possible, you can switch from using the pageIndex parameter to searchAfter . Each search result will return a value in the searchAfter property: { \"messages\": [ // ... ], \"searchAfter\": \"1694180633270\", \"total\": 42 } To fetch the next list of messages you can provide the search endpoint with the value of searchAfter : GET https://api.elmah.io/v3/messages/LOG_ID?searchAfter=1694180633270 You will need to use the same set of parameters in query , from , and to as in the previous request for this to work. Deleting a message When fixing the bug causing an error logged at elmah.io, you may want to delete the error. Deleting a single error is as easy as fetching it. Create a DELETE request to the errors unique URL: DELETE https://api.elmah.io/v3/messages/LOG_ID/81C7C282C9FDAEA3 When successfully deleted, the delete endpoint returns an HTTP status code of 200 . Deleting messages Deleting messages one by one can be tedious work. To delete multiple errors, you can utilize the Delete Messages endpoint by creating a DELETE request to: DELETE https://api.elmah.io/v3/messages/LOG_ID The request must contain a body with at least a query: { \"query\": \"test\" } An option for deleting messages by date range is available as well. Check out the API documentation for details. Hiding a message Depending on your use case, you may want to hide a message, rather than delete it. Hidden messages are shown as default through neither the UI nor the REST API. But you will be able to search for them by enabling the Hidden checkbox on the UI. To hide a message, use the _hide endpoint like this: POST https://api.elmah.io/v3/messages/LOG_ID/99CDEA3D6A631F09/_hide If successful, the endpoint returns an HTTP status code of 200 . Fixing a message When you have fixed a bug in your code, it's a good idea to mark any instances of this error in elmah.io as fixed. This gives a better overview of what to fix and ensures that you are notified if the error happens again. To mark a message as fixed, use the _fix endpoint like this: POST https://api.elmah.io/v3/messages/LOG_ID/99CDEA3D6A631F09/_fix If successful, the endpoint returns an HTTP status code of 200 . This will mark a single message as fixed. In case you want to mark all instances of this message as fixe, include the markAllAsFixed parameter: POST https://api.elmah.io/v3/messages/LOG_ID/99CDEA3D6A631F09/_fix?markAllAsFixed=true","title":"Using the REST API"},{"location":"using-the-rest-api/#using-the-rest-api","text":"Using the REST API Security Messages Creating messages Getting a message Searching messages Deleting a message Deleting messages Hiding a message Fixing a message Under the hood, everything related to communicating with elmah.io happens through our REST API. In this article, we will present the possibilities of using the API in a use case-driven approach. For a detailed reference of the various endpoints, visit the API V3 documentation .","title":"Using the REST API"},{"location":"using-the-rest-api/#security","text":"Security is implemented using API keys ( Where is my API key? ). When creating a new organization, a default API key is automatically created. You can create new keys and revoke an existing key if you suspect that the key has been compromised. The API key acts as a secret and should not be available to people outside your team/organization. All requests to the elmah.io API needs the API key as either an HTTP header or query string parameter named api_key like this: GET https://api.elmah.io/v3/messages/LOG_ID?api_key=MY_API_KEY","title":"Security"},{"location":"using-the-rest-api/#messages","text":"","title":"Messages"},{"location":"using-the-rest-api/#creating-messages","text":"Before doing anything, we will need some messages to play with. The Create Message endpoint does just that. To create a simple message, POST to: POST https://api.elmah.io/v3/messages/LOG_ID with a JSON body: { \"title\": \"This is a test message\" } (replace LOG_ID with your log ID): The title field is the only required field on a message, but fields for specifying severity, timestamp, etc. are there. For more information, check out the documentation . If everything where successful, the API returns an HTTP status code of 201 and a location to where to fetch the new message. If the endpoint fails, the response will contain a description of what went wrong. Forgetting to set Content-Length , Content-Type and similar, will result in an invalid request.","title":"Creating messages"},{"location":"using-the-rest-api/#getting-a-message","text":"In the example above, the API returned the URL for getting the newly created message: GET https://api.elmah.io/v3/messages/LOG_ID/81C7C282C9FDAEA3 By making a GET request to this URL, we get back the message details: { \"id\": \"99CDEA3D6A631F09\", \"title\": \"This is a test message\", \"dateTime\": \"2016-07-03T14:25:46.087857Z\", \"severity\": \"Information\" } As shown in the returned body, elmah.io automatically inserted some missing fields like a timestamp and a severity. If no severity is specified during creating, a message is treated as information.","title":"Getting a message"},{"location":"using-the-rest-api/#searching-messages","text":"For the demo, we have inserted a couple of additional messages, which leads us to the next endpoint: searching messages. The search endpoint shares the root path with the get message endpoint but only takes a log ID. The simplest possible configuration queries the API for a list of the 15 most recent messages by calling: GET https://api.elmah.io/v3/messages/LOG_ID The response body looks like this: { \"messages\": [ { \"id\": \"81C7C282C9FDAEA3\", \"title\": \"This is another test message\", \"dateTime\": \"2016-07-03T14:31:45.053851Z\", \"severity\": \"Information\" }, { \"id\": \"99CDEA3D6A631F09\", \"title\": \"This is a test message\", \"dateTime\": \"2016-07-03T14:25:46.087857Z\", \"severity\": \"Information\" }, // ... ], \"total\": 42 } For simplicity, the response has been simplified by not showing all of the results. The important thing to notice here is the list of messages and the total count. messages contain 15 messages, which is the default page size in the search endpoint. To increase the number of returned messages, set the pagesize parameter in the URL (max 100 messages per request). The total count tells you if more messages are matching your search. To select messages from the next page, use the pageindex parameter (or use the searchAfter property as shown later). Returning all messages may be fine, but being able to search by terms is even more fun. To search, use the query , from , and to parameters as shown here: GET https://api.elmah.io/v3/messages/LOG_ID?query=another Searching for another will return the following response: { \"messages\": [ { \"id\": \"81C7C282C9FDAEA3\", \"title\": \"This is another test message\", \"dateTime\": \"2016-07-03T14:25:46.087857Z\", \"severity\": \"Information\" } ], \"total\": 1 } Now only 81C7C282C9FDAEA3 shows up since that message contains the text another in the title field. Like specifying the query parameter, you can limit the number of messages using the from , to , and pageSize parameters. There is a limitation of using the pageSize and pageIndex parameters. The data is stored in Elasticsearch which doesn't allow pagination in more than 10,000 documents. If you need to fetch more than 10,000 documents from your log, we recommend breaking this up into weekly, daily, or hourly jobs instead of changing your job to fetch more than 10,000 messages. In case this is not possible, you can switch from using the pageIndex parameter to searchAfter . Each search result will return a value in the searchAfter property: { \"messages\": [ // ... ], \"searchAfter\": \"1694180633270\", \"total\": 42 } To fetch the next list of messages you can provide the search endpoint with the value of searchAfter : GET https://api.elmah.io/v3/messages/LOG_ID?searchAfter=1694180633270 You will need to use the same set of parameters in query , from , and to as in the previous request for this to work.","title":"Searching messages"},{"location":"using-the-rest-api/#deleting-a-message","text":"When fixing the bug causing an error logged at elmah.io, you may want to delete the error. Deleting a single error is as easy as fetching it. Create a DELETE request to the errors unique URL: DELETE https://api.elmah.io/v3/messages/LOG_ID/81C7C282C9FDAEA3 When successfully deleted, the delete endpoint returns an HTTP status code of 200 .","title":"Deleting a message"},{"location":"using-the-rest-api/#deleting-messages","text":"Deleting messages one by one can be tedious work. To delete multiple errors, you can utilize the Delete Messages endpoint by creating a DELETE request to: DELETE https://api.elmah.io/v3/messages/LOG_ID The request must contain a body with at least a query: { \"query\": \"test\" } An option for deleting messages by date range is available as well. Check out the API documentation for details.","title":"Deleting messages"},{"location":"using-the-rest-api/#hiding-a-message","text":"Depending on your use case, you may want to hide a message, rather than delete it. Hidden messages are shown as default through neither the UI nor the REST API. But you will be able to search for them by enabling the Hidden checkbox on the UI. To hide a message, use the _hide endpoint like this: POST https://api.elmah.io/v3/messages/LOG_ID/99CDEA3D6A631F09/_hide If successful, the endpoint returns an HTTP status code of 200 .","title":"Hiding a message"},{"location":"using-the-rest-api/#fixing-a-message","text":"When you have fixed a bug in your code, it's a good idea to mark any instances of this error in elmah.io as fixed. This gives a better overview of what to fix and ensures that you are notified if the error happens again. To mark a message as fixed, use the _fix endpoint like this: POST https://api.elmah.io/v3/messages/LOG_ID/99CDEA3D6A631F09/_fix If successful, the endpoint returns an HTTP status code of 200 . This will mark a single message as fixed. In case you want to mark all instances of this message as fixe, include the markAllAsFixed parameter: POST https://api.elmah.io/v3/messages/LOG_ID/99CDEA3D6A631F09/_fix?markAllAsFixed=true","title":"Fixing a message"},{"location":"vulnerability-disclosure-program/","text":"Vulnerability Disclosure Program (VDP) Vulnerability Disclosure Program (VDP) Scope Rules of Engagement What We're Looking For Recognition Communication & Conduct How to Report We take security seriously at elmah.io. To keep our platform and our customers safe, we invite security researchers and ethical hackers to report vulnerabilities responsibly. This page outlines our Vulnerability Disclosure Program, what we are interested in, and how to report issues. Scope The following domains are in scope: elmah.io app.elmah.io api.elmah.io docs.elmah.io blog.elmah.io Any other subdomain owned by elmah.io. Only vulnerabilities in production environments are eligible. Testing on demo environments or staging systems is not supported. Rules of Engagement Do no harm: Do not exploit vulnerabilities beyond what is necessary to demonstrate them. Respect data: Never access, modify, or delete customer data. Use your own account where possible. Responsible disclosure: Give us a reasonable time to investigate and fix issues before making anything public. No disruption: Do not perform attacks that degrade our service (e.g., DDoS, spam, brute force). What We're Looking For We are particularly interested in: Authentication or authorization bypasses Cross-Site Scripting (XSS) Cross-Site Request Forgery (CSRF) NoSQL injection Server-Side Request Forgery (SSRF) Sensitive data exposure Misconfigurations that could lead to compromise Reports that are not eligible include: Denial of Service (DoS / DDoS) Missing MTA-STS and TLS reporting Missing CAA DNS configuration Session expiration and invalidation Vulnerabilities in 3rd party services we use Best-practice suggestions without a clear security impact Missing security headers without an exploit scenario Social engineering, phishing, or physical security attacks Generally, issues produced by automated tools like security headers, etc. Recognition We appreciate contributions from the security community. Accepted reports may be rewarded with money or swag, depending on severity, novelty, and impact. Please note that reports of issues that are already known to us, are duplicates of previously submitted reports, or are otherwise not accepted, will not be eligible for a reward. elmah.io assigns a severity level to all accepted issues. Each severity has a fixed reward range that determines whether the reporter receives money or swag and the size of the reward. These ranges are applied consistently across all submissions. We do not negotiate rewards outside the defined ranges. If a reporter believes that their finding deserves more than the assigned reward, we still adhere to the published ranges to ensure fairness and consistency. Communication & Conduct We value respectful and professional communication. Most security researchers we work with follow responsible disclosure practices, but unfortunately, we have also experienced cases of hostile or threatening behavior. To be clear: Threats are not tolerated, including threats of disclosing vulnerabilities on the dark web, public forums, or elsewhere if certain demands are not met. Respectful communication is required. We are here to collaborate, not to negotiate under pressure. Immediate blocking if an email contains threats, aggressive language, or blackmail, the sender will be instantly blocked, and no further reports from that individual will be considered. We are committed to working with researchers in good faith and expect the same in return. How to Report Please send reports to info@elmah.io with the following details: A clear description of the vulnerability. Steps to reproduce, including code snippets or screenshots. The potential impact if exploited. Your contact information. We aim to respond to initial reports within 72 hours.","title":"Vulnerability Disclosure Program (VDP)"},{"location":"vulnerability-disclosure-program/#vulnerability-disclosure-program-vdp","text":"Vulnerability Disclosure Program (VDP) Scope Rules of Engagement What We're Looking For Recognition Communication & Conduct How to Report We take security seriously at elmah.io. To keep our platform and our customers safe, we invite security researchers and ethical hackers to report vulnerabilities responsibly. This page outlines our Vulnerability Disclosure Program, what we are interested in, and how to report issues.","title":"Vulnerability Disclosure Program (VDP)"},{"location":"vulnerability-disclosure-program/#scope","text":"The following domains are in scope: elmah.io app.elmah.io api.elmah.io docs.elmah.io blog.elmah.io Any other subdomain owned by elmah.io. Only vulnerabilities in production environments are eligible. Testing on demo environments or staging systems is not supported.","title":"Scope"},{"location":"vulnerability-disclosure-program/#rules-of-engagement","text":"Do no harm: Do not exploit vulnerabilities beyond what is necessary to demonstrate them. Respect data: Never access, modify, or delete customer data. Use your own account where possible. Responsible disclosure: Give us a reasonable time to investigate and fix issues before making anything public. No disruption: Do not perform attacks that degrade our service (e.g., DDoS, spam, brute force).","title":"Rules of Engagement"},{"location":"vulnerability-disclosure-program/#what-were-looking-for","text":"We are particularly interested in: Authentication or authorization bypasses Cross-Site Scripting (XSS) Cross-Site Request Forgery (CSRF) NoSQL injection Server-Side Request Forgery (SSRF) Sensitive data exposure Misconfigurations that could lead to compromise Reports that are not eligible include: Denial of Service (DoS / DDoS) Missing MTA-STS and TLS reporting Missing CAA DNS configuration Session expiration and invalidation Vulnerabilities in 3rd party services we use Best-practice suggestions without a clear security impact Missing security headers without an exploit scenario Social engineering, phishing, or physical security attacks Generally, issues produced by automated tools like security headers, etc.","title":"What We're Looking For"},{"location":"vulnerability-disclosure-program/#recognition","text":"We appreciate contributions from the security community. Accepted reports may be rewarded with money or swag, depending on severity, novelty, and impact. Please note that reports of issues that are already known to us, are duplicates of previously submitted reports, or are otherwise not accepted, will not be eligible for a reward. elmah.io assigns a severity level to all accepted issues. Each severity has a fixed reward range that determines whether the reporter receives money or swag and the size of the reward. These ranges are applied consistently across all submissions. We do not negotiate rewards outside the defined ranges. If a reporter believes that their finding deserves more than the assigned reward, we still adhere to the published ranges to ensure fairness and consistency.","title":"Recognition"},{"location":"vulnerability-disclosure-program/#communication-conduct","text":"We value respectful and professional communication. Most security researchers we work with follow responsible disclosure practices, but unfortunately, we have also experienced cases of hostile or threatening behavior. To be clear: Threats are not tolerated, including threats of disclosing vulnerabilities on the dark web, public forums, or elsewhere if certain demands are not met. Respectful communication is required. We are here to collaborate, not to negotiate under pressure. Immediate blocking if an email contains threats, aggressive language, or blackmail, the sender will be instantly blocked, and no further reports from that individual will be considered. We are committed to working with researchers in good faith and expect the same in return.","title":"Communication &amp; Conduct"},{"location":"vulnerability-disclosure-program/#how-to-report","text":"Please send reports to info@elmah.io with the following details: A clear description of the vulnerability. Steps to reproduce, including code snippets or screenshots. The potential impact if exploited. Your contact information. We aim to respond to initial reports within 72 hours.","title":"How to Report"},{"location":"where-is-my-api-key/","text":"Where is my API key? API keys are a new concept introduced with version 3.x of our API . API keys are located on the organization settings page. To open organization settings, click the gears icon next to your organization name on either the left menu or through the dashboard: When on the organization settings page, click the API Keys tab and copy your API key: This view also lets you generate new API keys and revoke an existing key if you believe that the key is compromised.","title":"Where is my API key"},{"location":"where-is-my-api-key/#where-is-my-api-key","text":"API keys are a new concept introduced with version 3.x of our API . API keys are located on the organization settings page. To open organization settings, click the gears icon next to your organization name on either the left menu or through the dashboard: When on the organization settings page, click the API Keys tab and copy your API key: This view also lets you generate new API keys and revoke an existing key if you believe that the key is compromised.","title":"Where is my API key?"},{"location":"where-is-my-invoice-receipt/","text":"Where is my invoice/receipt? Invoices are located on the organization settings page. To open organization settings, click the gears icon next to your organization name on either the left menu or through the dashboard: When on the organization settings page, click the Invoices tab: There's a row per invoice in the table on this page. You can open or download the invoice using the links to the right. If you want invoices emailed to you (or your accountant) every time a payment is made, click the Email invoices button and input an email address.","title":"Where is my invoice / receipt"},{"location":"where-is-my-invoice-receipt/#where-is-my-invoicereceipt","text":"Invoices are located on the organization settings page. To open organization settings, click the gears icon next to your organization name on either the left menu or through the dashboard: When on the organization settings page, click the Invoices tab: There's a row per invoice in the table on this page. You can open or download the invoice using the links to the right. If you want invoices emailed to you (or your accountant) every time a payment is made, click the Email invoices button and input an email address.","title":"Where is my invoice/receipt?"},{"location":"where-is-my-log-id/","text":"Where is my log ID? A log ID represents a log on elmah.io. A log is a container for log messages. How you choose to split up your logs is totally up to you, but creating a log per application/service is what most users do. The log ID is located on the log settings page. To open log settings, click the gears icon next to the log name in the menu or in the log box on the dashboard: When clicking on the icon, you are taken directly to the Install tab:","title":"Where is my log ID"},{"location":"where-is-my-log-id/#where-is-my-log-id","text":"A log ID represents a log on elmah.io. A log is a container for log messages. How you choose to split up your logs is totally up to you, but creating a log per application/service is what most users do. The log ID is located on the log settings page. To open log settings, click the gears icon next to the log name in the menu or in the log box on the dashboard: When clicking on the icon, you are taken directly to the Install tab:","title":"Where is my log ID?"},{"location":"where-is-the-permalink-button/","text":"Where is the permalink button A permalink is a link to a specific log message on elmah.io. When generating a permalink, the log message will be shown in expanded form on the log search page. To get the permalink, go to the log search page and click a log message to expand the details. Beneath the log message, there's a permalink button that will open the message in a new tab: You can also get a permalink directly from the search result:","title":"Where is the permalink button"},{"location":"where-is-the-permalink-button/#where-is-the-permalink-button","text":"A permalink is a link to a specific log message on elmah.io. When generating a permalink, the log message will be shown in expanded form on the log search page. To get the permalink, go to the log search page and click a log message to expand the details. Beneath the log message, there's a permalink button that will open the message in a new tab: You can also get a permalink directly from the search result:","title":"Where is the permalink button"}]}